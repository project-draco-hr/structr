{
  final BindingsObjectFactory objFactory=new BindingsObjectFactoryImpl();
  final List<PropertyData<?>> properties=new LinkedList<>();
  properties.add(objFactory.createPropertyIdData(PropertyIds.BASE_TYPE_ID,baseTypeId.value()));
  properties.add(objFactory.createPropertyIdData(PropertyIds.OBJECT_TYPE_ID,type));
  properties.add(objFactory.createPropertyIdData(PropertyIds.OBJECT_ID,id));
  properties.add(objFactory.createPropertyStringData(PropertyIds.NAME,name));
  properties.add(objFactory.createPropertyStringData(PropertyIds.DESCRIPTION,description));
  properties.add(objFactory.createPropertyStringData(PropertyIds.CREATED_BY,createdBy));
  properties.add(objFactory.createPropertyStringData(PropertyIds.LAST_MODIFIED_BY,lastModifiedBy));
  properties.add(objFactory.createPropertyDateTimeData(PropertyIds.CREATION_DATE,creationDate));
  properties.add(objFactory.createPropertyDateTimeData(PropertyIds.LAST_MODIFICATION_DATE,lastModificationDate));
  if (dynamicPropertyMap != null) {
    for (    final Entry<PropertyKey,Object> entry : dynamicPropertyMap.entrySet()) {
      final PropertyKey key=entry.getKey();
      final PropertyType dataType=key.getDataType();
      if (dataType != null) {
switch (dataType) {
case BOOLEAN:
          properties.add(objFactory.createPropertyBooleanData(key.jsonName(),(Boolean)entry.getValue()));
        break;
case DATETIME:
      properties.add(objFactory.createPropertyDateTimeData(key.jsonName(),valueOrNull((Date)entry.getValue())));
    break;
case DECIMAL:
  properties.add(objFactory.createPropertyDecimalData(key.jsonName(),valueOrNull((Double)entry.getValue())));
break;
case INTEGER:
properties.add(objFactory.createPropertyIntegerData(key.jsonName(),intOrNull(entry.getValue())));
break;
case STRING:
properties.add(objFactory.createPropertyStringData(key.jsonName(),(String)entry.getValue()));
break;
}
}
}
}
createProperties(objFactory,properties);
return objFactory.createPropertiesData(properties);
}
