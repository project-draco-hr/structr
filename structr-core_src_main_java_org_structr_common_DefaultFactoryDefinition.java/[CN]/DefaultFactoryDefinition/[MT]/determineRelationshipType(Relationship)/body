{
  final String type=GraphObject.type.dbName();
  if (relationship.hasProperty(type)) {
    Object obj=relationship.getProperty(type);
    logger.log(Level.FINEST,"Type property: {0}",obj);
    if (obj != null) {
      return getModuleService().getRelationshipEntityClass(obj.toString());
    }
  }
  final String combinedTypeName="combinedType";
  if (relationship.hasProperty(combinedTypeName)) {
    Object obj=relationship.getProperty(combinedTypeName);
    logger.log(Level.FINE,"Combined type property: {0}",obj);
    if (obj != null) {
      final String combinedType=obj.toString();
      final Class entityType=getClassForCombinedType(combinedType);
      if (entityType != null) {
        return entityType;
      }
    }
  }
  final String sourceType=relationship.getStartNode().hasProperty(type) ? relationship.getStartNode().getProperty(type).toString() : null;
  final String targetType=relationship.getEndNode().hasProperty(type) ? relationship.getEndNode().getProperty(type).toString() : null;
  final String relType=relationship.getType().name();
  final Class entityType=getClassForCombinedType(sourceType,relType,targetType);
  if (entityType != null) {
    logger.log(Level.FINE,"Class for assembled combined {0}",entityType.getName());
    return entityType;
  }
  logger.log(Level.WARNING,"No instantiable class for relationship found for {0} {1} {2}, returning generic relationship class.",new Object[]{sourceType,relType,targetType});
  return getGenericRelationshipType();
}
