{
  Map<Long,Relationship> sortedRelationshipMap=new TreeMap<Long,Relationship>();
  for (  final Relationship rel : node.getRelationships(RelType.CONTAINS,direction)) {
    try {
      long position;
      Object prop=null;
      final String key;
      if (rel.hasProperty("*")) {
        prop=rel.getProperty("*");
        key="*";
      }
 else       if (rel.hasProperty(resourceId)) {
        prop=rel.getProperty(resourceId);
        key=resourceId;
      }
 else {
        key=null;
      }
      if ((key != null) && (prop != null)) {
        if (prop instanceof Long) {
          position=(Long)prop;
        }
 else         if (prop instanceof Integer) {
          position=((Integer)prop).longValue();
        }
 else         if (prop instanceof String) {
          position=Long.parseLong((String)prop);
        }
 else {
          throw new java.lang.IllegalArgumentException("Expected Long, Integer or String");
        }
        long originalPos=position;
        while (sortedRelationshipMap.containsKey(position)) {
          position++;
        }
        sortedRelationshipMap.put(position,rel);
        if (originalPos != position) {
          final long newPos=position;
          Services.command(SecurityContext.getSuperUserInstance(),TransactionCommand.class).execute(new StructrTransaction(){
            @Override public Object execute() throws FrameworkException {
              rel.setProperty(key,newPos);
              return null;
            }
          }
);
        }
        logger.log(Level.FINEST,"Node {0}: Put relationship {1} into map at position {2}",new Object[]{node,rel,position});
      }
    }
 catch (    Throwable t) {
      logger.log(Level.SEVERE,"While reading property " + resourceId,t);
    }
  }
  return sortedRelationshipMap.values();
}
