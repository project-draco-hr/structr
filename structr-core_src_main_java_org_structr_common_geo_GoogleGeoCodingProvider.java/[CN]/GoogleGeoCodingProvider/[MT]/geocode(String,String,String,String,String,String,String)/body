{
  String address=(StringUtils.isNotBlank(street) ? street : "") + " " + (StringUtils.isNotBlank(house) ? house : "")+ " "+ (StringUtils.isNotBlank(postalCode) ? postalCode : "" + (StringUtils.isNotBlank(city) ? city : "") + " "+ (StringUtils.isNotBlank(state) ? state : "")+ " "+ (StringUtils.isNotBlank(country) ? country : "")+ " ");
  String encodedAddress;
  try {
    encodedAddress=URLEncoder.encode(address,"UTF-8");
  }
 catch (  UnsupportedEncodingException ex) {
    logger.log(Level.WARNING,"Unsupported Encoding",ex);
    return null;
  }
  Document xmlDoc;
  try {
    String protocol="xml";
    URL mapsUrl=new URL("http://maps.google.com/maps/api/geocode/" + protocol + "?sensor=false&address="+ encodedAddress+ "&language="+ language);
    HttpURLConnection connection=(HttpURLConnection)mapsUrl.openConnection();
    connection.connect();
    SAXReader reader=new SAXReader();
    BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    xmlDoc=reader.read(rd);
    connection.disconnect();
    rd.close();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,"Connection to geocoding service failed",ioe);
    return null;
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,"Could not read result document",de);
    return null;
  }
  Element root=xmlDoc.getRootElement();
  String status=root.element("status").getTextTrim();
  if ("OK".equals(status)) {
    try {
      return new GoogleGeoCodingResult(address,root);
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to find geocoding for address {0}: {1}",new Object[]{address,t.getMessage()});
    }
  }
 else {
    logger.log(Level.WARNING,"Status not OK for address {0}: {1}",new Object[]{address,status});
  }
  return null;
}
