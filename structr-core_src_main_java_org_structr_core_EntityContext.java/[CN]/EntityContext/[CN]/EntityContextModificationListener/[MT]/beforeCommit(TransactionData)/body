{
  Long transactionKeyValue=transactionKeyCounter.incrementAndGet();
  long transactionKey=transactionKeyValue.longValue();
  if (!Services.isReady(NodeService.class)) {
    logger.log(Level.WARNING,"Node service is not ready yet.");
    return transactionKey;
  }
  SecurityContext securityContext=securityContextMap.get();
  SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  Map<Relationship,Map<String,Object>> removedRelProperties=new LinkedHashMap<Relationship,Map<String,Object>>();
  Map<Node,Map<String,Object>> removedNodeProperties=new LinkedHashMap<Node,Map<String,Object>>();
  RelationshipFactory relFactory=new RelationshipFactory(securityContext);
  NodeFactory nodeFactory=new NodeFactory(superUserContext);
  for (  StructrTransactionListener listener : EntityContext.getTransactionListeners()) {
    listener.commitStarts(securityContext,transactionKey);
  }
  collectRemovedNodeProperties(securityContext,transactionKey,data,nodeFactory,removedNodeProperties);
  collectRemovedRelationshipProperties(securityContext,transactionKey,data,relFactory,removedRelProperties);
  callOnNodeCreation(securityContext,transactionKey,data,nodeFactory);
  callOnRelationshipCreation(securityContext,transactionKey,data,relFactory);
  callOnRelationshipDeletion(securityContext,transactionKey,data,relFactory,removedRelProperties);
  callOnNodeDeletion(securityContext,transactionKey,data,nodeFactory,removedNodeProperties);
  callNodeValidators(securityContext,transactionKey,data,nodeFactory);
  callRelationshipValidators(securityContext,transactionKey,data,relFactory);
  for (  StructrTransactionListener listener : EntityContext.getTransactionListeners()) {
    listener.commitFinishes(securityContext,transactionKey);
  }
  return transactionKey;
}
