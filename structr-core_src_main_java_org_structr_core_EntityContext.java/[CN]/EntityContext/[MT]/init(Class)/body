{
  for (  Enum index : NodeService.NodeIndex.values()) {
    String indexName=index.name();
    Map<String,Set<PropertyKey>> searchablePropertyMapForType=getSearchablePropertyMapForType(type);
    Set<PropertyKey> searchablePropertySet=searchablePropertyMapForType.get(indexName);
    if (searchablePropertySet == null) {
      searchablePropertySet=new LinkedHashSet<PropertyKey>();
      searchablePropertyMapForType.put(indexName,searchablePropertySet);
    }
    Class localType=type.getSuperclass();
    while ((localType != null) && !localType.equals(Object.class)) {
      Set<PropertyKey> superProperties=getSearchableProperties(localType,indexName);
      searchablePropertySet.addAll(superProperties);
      for (      Class interfaceClass : getInterfacesForType(localType)) {
        searchablePropertySet.addAll(getSearchableProperties(interfaceClass,indexName));
      }
      localType=localType.getSuperclass();
    }
  }
  int modifiers=type.getModifiers();
  if (!Modifier.isAbstract(modifiers) && !Modifier.isInterface(modifiers)) {
    try {
      Object entity=type.newInstance();
      Map<Field,PropertyKey> allProperties=getFieldValuesOfType(PropertyKey.class,entity);
      Map<Field,View> views=getFieldValuesOfType(View.class,entity);
      Class entityType=entity.getClass();
      for (      Entry<Field,PropertyKey> entry : allProperties.entrySet()) {
        PropertyKey propertyKey=entry.getValue();
        Field field=entry.getKey();
        Class declaringClass=field.getDeclaringClass();
        if (declaringClass != null) {
          propertyKey.setDeclaringClass(declaringClass);
          registerProperty(declaringClass,propertyKey);
        }
        registerProperty(entityType,propertyKey);
      }
      for (      Entry<Field,View> entry : views.entrySet()) {
        Field field=entry.getKey();
        View view=entry.getValue();
        for (        PropertyKey propertyKey : view.properties()) {
          registerPropertySet(field.getDeclaringClass(),view.name(),propertyKey);
          registerPropertySet(entityType,view.name(),propertyKey);
        }
      }
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to instantiate {0}: {1}",new Object[]{type,t.getMessage()});
    }
  }
  Set<Method> typeMethods=exportedMethodMap.get(type);
  if (typeMethods == null) {
    typeMethods=new LinkedHashSet<Method>();
    exportedMethodMap.put(type,typeMethods);
  }
  typeMethods.addAll(getAnnotatedMethods(type,Export.class));
}
