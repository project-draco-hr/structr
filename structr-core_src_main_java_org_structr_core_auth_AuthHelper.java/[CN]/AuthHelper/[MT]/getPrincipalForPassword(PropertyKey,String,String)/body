{
  String errorMsg=null;
  Principal principal=null;
  if (Services.getSuperuserUsername().equals(value) && Services.getSuperuserPassword().equals(password)) {
    logger.log(Level.INFO,"############# Authenticated as superadmin! ############");
    principal=new SuperUser();
  }
 else {
    try {
      SecurityContext securityContext=SecurityContext.getSuperUserInstance();
      SearchNodeCommand searchNode=Services.command(securityContext,SearchNodeCommand.class);
      List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
      attrs.add(Search.andExactTypeAndSubtypes(Principal.class));
      SearchAttributeGroup group=new SearchAttributeGroup(Occur.MUST);
      group.add(Search.orExactProperty(securityContext,key,value));
      group.add(Search.orExactProperty(securityContext,AbstractNode.name,value));
      attrs.add(group);
      Result principals=searchNode.execute(attrs);
      if (!principals.isEmpty()) {
        principal=(Principal)principals.get(0);
      }
      if (principal == null) {
        logger.log(Level.INFO,"No principal found for {0} {1}",new Object[]{key.dbName(),value});
        errorMsg=STANDARD_ERROR_MSG;
      }
 else {
        if (principal.getProperty(Principal.blocked)) {
          logger.log(Level.INFO,"Principal {0} is blocked",principal);
          errorMsg=STANDARD_ERROR_MSG;
        }
        if (StringUtils.isEmpty(password)) {
          logger.log(Level.INFO,"Empty password for principal {0}",principal);
          errorMsg="Empty password, should never happen here!";
        }
 else {
          String salt=principal.getProperty(Principal.salt);
          String encryptedPasswordValue;
          if (salt != null) {
            encryptedPasswordValue=getHash(password,salt);
          }
 else {
            encryptedPasswordValue=getSimpleHash(password);
          }
          String pw=principal.getEncryptedPassword();
          if (pw == null || !encryptedPasswordValue.equals(pw)) {
            logger.log(Level.INFO,"Wrong password for principal {0}",principal);
            errorMsg=STANDARD_ERROR_MSG;
          }
        }
      }
    }
 catch (    FrameworkException fex) {
      fex.printStackTrace();
    }
  }
  if (errorMsg != null) {
    throw new AuthenticationException(errorMsg);
  }
  return principal;
}
