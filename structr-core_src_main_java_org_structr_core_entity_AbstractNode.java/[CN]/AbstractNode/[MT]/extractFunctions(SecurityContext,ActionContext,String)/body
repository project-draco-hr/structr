{
  if ("null".equals(source)) {
    return NULL_STRING;
  }
  Matcher functionMatcher=threadLocalFunctionMatcher.get();
  functionMatcher.reset(source);
  if (functionMatcher.matches()) {
    String functionGroup=functionMatcher.group(1);
    String parameter=functionMatcher.group(2);
    String functionName=functionGroup.substring(0,functionGroup.length());
    final Function<Object,Object> function=functions.get(functionName);
    final List results=new ArrayList();
    if (function != null) {
      if (parameter == null || parameter.isEmpty()) {
        return function.usage();
      }
      if (parameter.contains(",")) {
        final String[] parameters=split(parameter);
        for (int i=0; i < parameters.length; i++) {
          addAll(results,extractFunctions(securityContext,actionContext,StringUtils.strip(parameters[i])));
        }
        return function.apply(this,results.toArray());
      }
 else {
        addAll(results,extractFunctions(securityContext,actionContext,StringUtils.strip(parameter)));
        return function.apply(this,results.toArray());
      }
    }
  }
  if (source.startsWith("\"") && source.endsWith("\"")) {
    return source.substring(1,source.length() - 1);
  }
 else   if (source.startsWith("'") && source.endsWith("'")) {
    return source.substring(1,source.length() - 1);
  }
 else   if (StringUtils.isNotBlank(source) && isNumeric(source)) {
    return Double.parseDouble(source);
  }
 else {
    return actionContext.getReferencedProperty(securityContext,this,source);
  }
}
