{
  for (  final AbstractRelationship relationship : startNode.getRelationshipsAsSuperUser()) {
    final long relationshipId=relationship.getId();
    if (relationship != null && relationship instanceof PermissionPropagation && !visitedIds.contains(relationshipId)) {
      visitedIds.add(relationshipId);
      final PermissionPropagation propagation=(PermissionPropagation)relationship;
      final NodeInterface otherNode=relationship.getOtherNode(startNode);
      final Relationship dbRelationship=relationship.getRelationship();
      final long startNodeId=dbRelationship.getStartNode().getId();
      final long thisId=startNode.getId();
      final SchemaRelationshipNode.Direction relDirection=thisId == startNodeId ? SchemaRelationshipNode.Direction.Out : SchemaRelationshipNode.Direction.In;
      final SchemaRelationshipNode.Direction propagationDirection=propagation.getPropagationDirection();
      if (!propagationDirection.equals(SchemaRelationshipNode.Direction.Both)) {
        if (propagationDirection.equals(SchemaRelationshipNode.Direction.None)) {
          continue;
        }
        if (!relDirection.equals(propagationDirection)) {
          continue;
        }
      }
      final PermissionResolutionMask backup=mask.copy();
      applyCurrentStep(propagation,mask);
      if (mask.isEmpty()) {
        continue;
      }
      if (otherNode.getId() == getId()) {
        if (mask.allowsPermission(permission)) {
          return true;
        }
        continue;
      }
      if (hasEffectivePermissions(otherNode,permission,mask,visitedIds)) {
        return true;
      }
      mask.restore(backup);
    }
  }
  return false;
}
