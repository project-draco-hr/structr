{
  if (level > 5) {
    System.out.println(indent("Denying access because of recursion leve > 5",level * 4));
    return false;
  }
  if (isCreation && (accessingUser == null || accessingUser.equals(getOwnerNode()))) {
    System.out.println(indent("Allowing creation",level * 4));
    return true;
  }
  if (accessingUser != null && accessingUser.isAdmin()) {
    System.out.println(indent("Allowing superuser",level * 4));
    return true;
  }
  if (this.equals(accessingUser) && (level == 0 || (permission.equals(Permission.read) && level > 0))) {
    if (level == 0) {
      System.out.println(indent("Allowing access for user on itself",level * 4));
    }
 else {
      System.out.println(indent("Allowing read access for parents of user",level * 4));
    }
    return true;
  }
  final Principal _owner=getOwnerNode();
  final boolean hasOwner=(_owner != null);
  if (!hasOwner && Services.getPermissionsForOwnerlessNodes().contains(permission)) {
    if (accessingUser != null && isVisibleToAuthenticatedUsers()) {
      System.out.println(indent("Allowing anonymous access to authenticated users via flag",level * 4));
      return true;
    }
    if (accessingUser == null && isVisibleToPublicUsers()) {
      System.out.println(indent("Allowing anonymous access to public users via flag",level * 4));
      return true;
    }
  }
  if (hasOwner && accessingUser == null) {
    return false;
  }
  if (accessingUser != null) {
    if (hasOwner && accessingUser.equals(_owner)) {
      System.out.println(indent("Allowing access to " + this.getName() + " to owner "+ _owner.getName(),level * 4));
      return true;
    }
    final Security security=getSecurityRelationship(accessingUser);
    if (security != null && security.isAllowed(permission)) {
      System.out.println(indent("Allowing access for " + accessingUser.getName() + " to "+ getName()+ "  via direct security relationship "+ accessingUser.getName()+ " --> "+ getType()+ "("+ getName()+ ")",level * 4));
      return true;
    }
    if (hasEffectivePermissions(accessingUser,permission)) {
      return true;
    }
    for (    Principal parent : accessingUser.getParents()) {
      if (isGranted(permission,parent,level + 1,alreadyTraversed)) {
        System.out.println(indent("Allowing access for " + accessingUser.getName() + " to "+ getName()+ "  based on user parent permissions",level * 4));
        return true;
      }
    }
  }
  return false;
}
