{
  final App app=StructrApp.getInstance(securityContext);
  final Set<T> toBeDeleted=new LinkedHashSet<>(Iterables.toList(get(securityContext,sourceNode,null)));
  final Set<T> toBeCreated=new LinkedHashSet<>();
  if (collection != null) {
    Iterables.addAll(toBeCreated,collection);
  }
  final Set<T> intersection=new LinkedHashSet<>(toBeCreated);
  intersection.retainAll(toBeDeleted);
  toBeCreated.removeAll(intersection);
  toBeDeleted.removeAll(intersection);
  for (  T targetNode : toBeDeleted) {
    for (    AbstractRelationship rel : sourceNode.getOutgoingRelationships()) {
      final String relTypeName=rel.getRelType().name();
      final String desiredRelType=relation.name();
      if (relTypeName.equals(desiredRelType) && rel.getTargetNode().equals(targetNode)) {
        app.delete(rel);
      }
    }
  }
  for (  T targetNode : toBeCreated) {
    relation.ensureCardinality(securityContext,sourceNode,targetNode);
    app.create(sourceNode,targetNode,relation.getClass(),getNotionProperties(securityContext,relation.getClass(),targetNode.getUuid() + ".out"));
  }
}
