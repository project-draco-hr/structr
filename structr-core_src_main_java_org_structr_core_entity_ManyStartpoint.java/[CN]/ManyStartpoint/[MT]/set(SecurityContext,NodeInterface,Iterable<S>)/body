{
  final App app=StructrApp.getInstance(securityContext);
  final Set<S> toBeDeleted=new LinkedHashSet<>(Iterables.toList(get(securityContext,targetNode)));
  final Set<S> toBeCreated=new LinkedHashSet<>();
  if (collection != null) {
    Iterables.addAll(toBeCreated,collection);
  }
  final Set<S> intersection=new LinkedHashSet<>(toBeCreated);
  intersection.retainAll(toBeDeleted);
  toBeCreated.removeAll(intersection);
  toBeDeleted.removeAll(intersection);
  for (  S sourceNode : toBeDeleted) {
    for (    AbstractRelationship rel : targetNode.getIncomingRelationships()) {
      if (rel.getRelType().equals(relation) && rel.getSourceNode().equals(sourceNode)) {
        app.delete(rel);
      }
    }
  }
  final PropertyMap notionProperties=getNotionProperties(securityContext,relation.getClass());
  for (  S sourceNode : toBeCreated) {
    relation.ensureCardinality(securityContext,sourceNode,targetNode);
    app.create(sourceNode,targetNode,relation.getClass(),notionProperties);
  }
}
