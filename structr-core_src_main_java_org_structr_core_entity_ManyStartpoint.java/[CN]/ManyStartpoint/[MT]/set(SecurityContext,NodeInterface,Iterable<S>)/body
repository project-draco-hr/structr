{
  final App app=StructrApp.getInstance(securityContext);
  final Set<S> toBeDeleted=new LinkedHashSet<>(Iterables.toList(get(securityContext,targetNode,null)));
  final Set<S> toBeCreated=new LinkedHashSet<>();
  if (collection != null) {
    Iterables.addAll(toBeCreated,collection);
  }
  final Set<S> intersection=new HashSet<>(toBeCreated);
  intersection.retainAll(toBeDeleted);
  toBeCreated.removeAll(intersection);
  toBeDeleted.removeAll(intersection);
  for (  S sourceNode : toBeDeleted) {
    for (    AbstractRelationship rel : targetNode.getIncomingRelationships()) {
      final String relTypeName=rel.getRelType().name();
      final String desiredRelType=relation.name();
      if (sourceNode.equals(targetNode)) {
        logger.log(Level.WARNING,"Preventing deletion of self relationship {0}-[{1}]->{2}. If you experience issue with this, please report to team@structr.com.",new Object[]{sourceNode,rel.getRelType().name(),targetNode});
        continue;
      }
      if (relTypeName.equals(desiredRelType) && rel.getSourceNode().equals(sourceNode)) {
        app.delete(rel);
      }
    }
  }
  for (  S sourceNode : toBeCreated) {
    if (sourceNode != null && targetNode != null) {
      final String storageKey=sourceNode.getName() + relation.name() + targetNode.getName();
      relation.ensureCardinality(securityContext,sourceNode,targetNode);
      app.create(sourceNode,targetNode,relation.getClass(),getNotionProperties(securityContext,relation.getClass(),storageKey));
    }
  }
}
