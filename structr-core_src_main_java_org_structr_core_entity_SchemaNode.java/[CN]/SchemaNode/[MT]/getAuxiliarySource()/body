{
  if (!"org.structr.dynamic.File".equals(getClassName())) {
    return null;
  }
  final Map<Actions.Type,List<ActionEntry>> saveActions=new EnumMap<>(Actions.Type.class);
  final Map<String,Set<String>> viewProperties=new LinkedHashMap<>();
  final Set<String> propertyNames=new LinkedHashSet<>();
  final Set<Validator> validators=new LinkedHashSet<>();
  final Set<String> enums=new LinkedHashSet<>();
  final String _className=getProperty(name);
  final ErrorBuffer dummyErrorBuffer=new ErrorBuffer();
  final String propertyDefinitions=SchemaHelper.extractProperties(this,propertyNames,validators,enums,viewProperties,saveActions,dummyErrorBuffer);
  if (!propertyNames.isEmpty() || validators.isEmpty() || !saveActions.isEmpty()) {
    final StringBuilder src=new StringBuilder();
    src.append("package org.structr.dynamic;\n\n");
    SchemaHelper.formatImportStatements(src,AbstractNode.class);
    src.append("public class _").append(_className).append("Helper {\n");
    for (    final String enumDefition : enums) {
      src.append(enumDefition);
    }
    if (!enums.isEmpty()) {
      src.append("\n");
    }
    if (!propertyNames.isEmpty()) {
      src.append("\n");
      src.append(propertyDefinitions);
      src.append("\n\tstatic {\n\n");
      for (      final String propertyName : propertyNames) {
        src.append("\t\t").append(propertyName).append(".setDeclaringClass(").append(_className).append(".class);\n\n");
        src.append("\t\tStructrApp.getConfiguration().registerDynamicProperty(").append(_className).append(".class, ").append(propertyName).append(");\n");
        src.append("\t\tStructrApp.getConfiguration().registerPropertySet(").append(_className).append(".class, PropertyView.Ui, ").append(propertyName).append(");\n\n");
      }
      src.append("\t}\n\n");
    }
    SchemaHelper.formatDynamicValidators(src,validators);
    SchemaHelper.formatDynamicSaveActions(src,saveActions);
    src.append("}\n");
    return src.toString();
  }
  return null;
}
