{
  final Map<String,Set<String>> viewProperties=new LinkedHashMap<>();
  final Set<String> validators=new LinkedHashSet<>();
  final Set<String> enums=new LinkedHashSet<>();
  final StringBuilder src=new StringBuilder();
  final Class baseType=AbstractNode.class;
  final String _className=getProperty(name);
  final String _extendsClass=getProperty(extendsClass);
  src.append("package org.structr.dynamic;\n\n");
  SchemaHelper.formatImportStatements(src,baseType);
  String superClass=_extendsClass != null ? _extendsClass : baseType.getSimpleName();
  src.append("public class ").append(_className).append(" extends ").append(superClass).append(" {\n\n");
  for (  final SchemaRelationship outRel : getOutgoingRelationships(SchemaRelationship.class)) {
    src.append(outRel.getPropertySource(_className));
    SchemaHelper.addPropertyToView(PropertyView.Public,outRel.getPropertyName(_className),viewProperties);
    SchemaHelper.addPropertyToView(PropertyView.Ui,outRel.getPropertyName(_className),viewProperties);
  }
  for (  final SchemaRelationship inRel : getIncomingRelationships(SchemaRelationship.class)) {
    src.append(inRel.getPropertySource(_className));
    SchemaHelper.addPropertyToView(PropertyView.Public,inRel.getPropertyName(_className),viewProperties);
    SchemaHelper.addPropertyToView(PropertyView.Ui,inRel.getPropertyName(_className),viewProperties);
  }
  src.append(SchemaHelper.extractProperties(this,validators,enums,viewProperties,errorBuffer));
  for (  final String enumDefition : enums) {
    src.append(enumDefition);
  }
  for (  Entry<String,Set<String>> entry : viewProperties.entrySet()) {
    final String viewName=entry.getKey();
    final Set<String> view=entry.getValue();
    if (!view.isEmpty()) {
      dynamicViews.add(viewName);
      SchemaHelper.formatView(src,_className,viewName,viewName,view);
    }
  }
  if (!validators.isEmpty()) {
    src.append("\n\t@Override\n");
    src.append("\tpublic boolean isValid(final ErrorBuffer errorBuffer) {\n\n");
    src.append("\t\tboolean error = false;\n\n");
    for (    final String validator : validators) {
      src.append("\t\terror |= ").append(validator).append(";\n");
    }
    src.append("\n\t\treturn !error;\n");
    src.append("\t}\n");
  }
  src.append("}\n");
  return src.toString();
}
