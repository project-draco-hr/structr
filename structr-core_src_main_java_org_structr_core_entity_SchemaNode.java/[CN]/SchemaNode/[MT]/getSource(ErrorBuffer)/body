{
  final Map<Actions.Type,List<ActionEntry>> actions=new EnumMap<>(Actions.Type.class);
  final Map<String,Set<String>> viewProperties=new LinkedHashMap<>();
  final Set<String> existingPropertyNames=new LinkedHashSet<>();
  final Set<String> validators=new LinkedHashSet<>();
  final Set<String> enums=new LinkedHashSet<>();
  final StringBuilder src=new StringBuilder();
  final Class baseType=AbstractNode.class;
  final String _className=getProperty(name);
  final String _extendsClass=getProperty(extendsClass);
  src.append("package org.structr.dynamic;\n\n");
  SchemaHelper.formatImportStatements(src,baseType);
  String superClass=_extendsClass != null ? _extendsClass : baseType.getSimpleName();
  src.append("public class ").append(_className).append(" extends ").append(superClass).append(" {\n\n");
  for (  final SchemaRelationship outRel : getOutgoingRelationships(SchemaRelationship.class)) {
    final String propertyName=outRel.getPropertyName(_className,existingPropertyNames,true);
    src.append(outRel.getPropertySource(propertyName,true));
    addPropertyNameToViews(propertyName,viewProperties);
  }
  for (  final SchemaRelationship inRel : getIncomingRelationships(SchemaRelationship.class)) {
    final String propertyName=inRel.getPropertyName(_className,existingPropertyNames,false);
    src.append(inRel.getPropertySource(propertyName,false));
    addPropertyNameToViews(propertyName,viewProperties);
  }
  src.append(SchemaHelper.extractProperties(this,validators,enums,viewProperties,actions,errorBuffer));
  for (  final String enumDefition : enums) {
    src.append(enumDefition);
  }
  for (  Entry<String,Set<String>> entry : viewProperties.entrySet()) {
    final String viewName=entry.getKey();
    final Set<String> view=entry.getValue();
    if (!view.isEmpty()) {
      dynamicViews.add(viewName);
      SchemaHelper.formatView(src,_className,viewName,viewName,view);
    }
  }
  if (!validators.isEmpty()) {
    src.append("\n\t@Override\n");
    src.append("\tpublic boolean isValid(final ErrorBuffer errorBuffer) {\n\n");
    src.append("\t\tboolean error = false;\n\n");
    for (    final String validator : validators) {
      src.append("\t\terror |= ").append(validator).append(";\n");
    }
    src.append("\n\t\treturn !error;\n");
    src.append("\t}\n");
  }
  for (  final Entry<Actions.Type,List<ActionEntry>> entry : actions.entrySet()) {
    final List<ActionEntry> actionList=entry.getValue();
    final Actions.Type type=entry.getKey();
    if (!actionList.isEmpty()) {
      src.append("\n\t@Override\n");
      src.append("\tpublic boolean ");
      src.append(type.getMethod());
      src.append("(SecurityContext securityContext, ErrorBuffer errorBuffer) throws FrameworkException {\n\n");
      src.append("\t\tboolean error = false;\n\n");
      for (      final ActionEntry action : actionList) {
        if (action.runOnError()) {
          src.append("\t\terror |= ").append(action.getSource()).append(";\n");
        }
 else {
          src.append("\t\tif (!error) {\n");
          src.append("\t\t\terror |= ").append(action.getSource()).append(";\n");
          src.append("\t\t}\n");
        }
      }
      src.append("\t\terror |= !super.");
      src.append(type.getMethod());
      src.append("(securityContext, errorBuffer);\n");
      src.append("\n\t\treturn !error;\n");
      src.append("\t}\n");
    }
  }
  src.append("}\n");
  return src.toString();
}
