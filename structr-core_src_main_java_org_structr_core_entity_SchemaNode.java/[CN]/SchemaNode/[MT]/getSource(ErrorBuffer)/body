{
  final Map<Actions.Type,List<ActionEntry>> saveActions=new EnumMap<>(Actions.Type.class);
  final Map<String,Set<String>> viewProperties=new LinkedHashMap<>();
  final Set<String> existingPropertyNames=new LinkedHashSet<>();
  final Set<String> propertyNames=new LinkedHashSet<>();
  final Set<String> validators=new LinkedHashSet<>();
  final Set<String> enums=new LinkedHashSet<>();
  final StringBuilder src=new StringBuilder();
  final Class baseType=AbstractNode.class;
  final String _className=getProperty(name);
  final String _extendsClass=getProperty(extendsClass);
  src.append("package org.structr.dynamic;\n\n");
  SchemaHelper.formatImportStatements(src,baseType);
  String superClass=_extendsClass != null ? _extendsClass : baseType.getSimpleName();
  src.append("public class ").append(_className).append(" extends ").append(superClass).append(" {\n\n");
  for (  final SchemaRelationship outRel : getOutgoingRelationships(SchemaRelationship.class)) {
    final String propertyName=outRel.getPropertyName(_className,existingPropertyNames,true);
    src.append(outRel.getPropertySource(propertyName,true));
    addPropertyNameToViews(propertyName,viewProperties);
  }
  for (  final SchemaRelationship inRel : getIncomingRelationships(SchemaRelationship.class)) {
    final String propertyName=inRel.getPropertyName(_className,existingPropertyNames,false);
    src.append(inRel.getPropertySource(propertyName,false));
    addPropertyNameToViews(propertyName,viewProperties);
  }
  src.append(SchemaHelper.extractProperties(this,propertyNames,validators,enums,viewProperties,saveActions,errorBuffer));
  for (  final String enumDefition : enums) {
    src.append(enumDefition);
  }
  for (  Entry<String,Set<String>> entry : viewProperties.entrySet()) {
    final String viewName=entry.getKey();
    final Set<String> view=entry.getValue();
    if (!view.isEmpty()) {
      dynamicViews.add(viewName);
      SchemaHelper.formatView(src,_className,viewName,viewName,view);
    }
  }
  if (getProperty(defaultSortKey) != null) {
    String order=getProperty(defaultSortOrder);
    if (order == null || "desc".equals(order)) {
      order="GraphObjectComparator.DESCENDING";
    }
 else {
      order="GraphObjectComparator.ASCENDING";
    }
    src.append("\n\t@Override\n");
    src.append("\tpublic PropertyKey getDefaultSortKey() {\n");
    src.append("\t\treturn ").append(getProperty(defaultSortKey)).append("Property;\n");
    src.append("\t}\n");
    src.append("\n\t@Override\n");
    src.append("\tpublic String getDefaultSortOrder() {\n");
    src.append("\t\treturn ").append(order).append(";\n");
    src.append("\t}\n");
  }
  SchemaHelper.formatValidators(src,validators);
  SchemaHelper.formatSaveActions(src,saveActions);
  src.append("}\n");
  return src.toString();
}
