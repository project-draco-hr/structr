{
  Long cascadingDelete=getProperty(cascadingDeleteFlag);
  if (cascadingDelete != null) {
    src.append("\n\t@Override\n");
    src.append("\tpublic int getCascadingDeleteFlag() {\n");
switch (cascadingDelete.intValue()) {
case Relation.ALWAYS:
      src.append("\t\treturn Relation.ALWAYS;\n");
    break;
case Relation.CONSTRAINT_BASED:
  src.append("\t\treturn Relation.CONSTRAINT_BASED;\n");
break;
case Relation.SOURCE_TO_TARGET:
src.append("\t\treturn Relation.SOURCE_TO_TARGET;\n");
break;
case Relation.TARGET_TO_SOURCE:
src.append("\t\treturn Relation.TARGET_TO_SOURCE;\n");
break;
case Relation.NONE:
default :
src.append("\t\treturn Relation.NONE;\n");
}
src.append("\t}\n\n");
}
Long autocreate=getProperty(autocreationFlag);
if (autocreate != null) {
src.append("\n\t@Override\n");
src.append("\tpublic int getAutocreationFlag() {\n");
switch (autocreate.intValue()) {
case Relation.ALWAYS:
src.append("\t\treturn Relation.ALWAYS;\n");
break;
case Relation.SOURCE_TO_TARGET:
src.append("\t\treturn Relation.SOURCE_TO_TARGET;\n");
break;
case Relation.TARGET_TO_SOURCE:
src.append("\t\treturn Relation.TARGET_TO_SOURCE;\n");
break;
default :
src.append("\t\treturn Relation.NONE;\n");
}
src.append("\t}\n\n");
}
}
