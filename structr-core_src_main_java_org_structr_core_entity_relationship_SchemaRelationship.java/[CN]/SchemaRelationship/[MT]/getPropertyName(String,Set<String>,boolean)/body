{
  String propertyName="";
  final String relationshipTypeName=getProperty(SchemaRelationship.relationshipType).toLowerCase();
  final String _sourceType=getSchemaNodeSourceType();
  final String _targetType=getSchemaNodeTargetType();
  if (outgoing) {
    final String _targetJsonName=getProperty(targetJsonName);
    if (_targetJsonName != null) {
      propertyName=_targetJsonName;
    }
 else {
      final String _targetMultiplicity=getProperty(targetMultiplicity);
      if ("1".equals(_targetMultiplicity)) {
        propertyName=CaseHelper.toLowerCamelCase(relationshipTypeName) + CaseHelper.toUpperCamelCase(_targetType);
      }
 else {
        propertyName=CaseHelper.plural(CaseHelper.toLowerCamelCase(relationshipTypeName) + CaseHelper.toUpperCamelCase(_targetType));
      }
    }
  }
 else {
    final String _sourceJsonName=getProperty(sourceJsonName);
    if (_sourceJsonName != null) {
      propertyName=_sourceJsonName;
    }
 else {
      final String _sourceMultiplicity=getProperty(sourceMultiplicity);
      if ("1".equals(_sourceMultiplicity)) {
        propertyName=CaseHelper.toLowerCamelCase(_sourceType) + CaseHelper.toUpperCamelCase(relationshipTypeName);
      }
 else {
        propertyName=CaseHelper.plural(CaseHelper.toLowerCamelCase(_sourceType) + CaseHelper.toUpperCamelCase(relationshipTypeName));
      }
    }
  }
  if (existingPropertyNames.contains(propertyName)) {
    propertyName+=outgoing ? "Out" : "In";
    int i=0;
    while (existingPropertyNames.contains(propertyName)) {
      propertyName+=++i;
    }
  }
  existingPropertyNames.add(propertyName);
  return propertyName;
}
