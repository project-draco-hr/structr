{
  final StringBuilder src=new StringBuilder();
  final Class baseType=AbstractRelationship.class;
  final String _className=getClassName();
  final String _sourceNodeType=getSchemaNodeSourceType();
  final String _targetNodeType=getSchemaNodeTargetType();
  src.append("package org.structr.dynamic;\n\n");
  src.append("import ").append(baseType.getName()).append(";\n");
  src.append("import ").append(PropertyView.class.getName()).append(";\n");
  src.append("import ").append(View.class.getName()).append(";\n");
  src.append("import org.structr.core.property.*;\n");
  src.append("import org.structr.core.entity.*;\n\n");
  src.append("public class ").append(_className).append(" extends ").append(getBaseType()).append(" {\n\n");
  src.append("\tpublic static final Property<String> sourceId = new SourceId(\"sourceId\");\n");
  src.append("\tpublic static final Property<String> targetId = new SourceId(\"targetId\");\n\n");
  src.append("\tpublic static final View defaultView = new View(");
  src.append(_className).append(".class, PropertyView.Public,\n");
  src.append("\t\tsourceId, targetId\n\t);\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Class<").append(_sourceNodeType).append("> getSourceType() {\n");
  src.append("\t\treturn ").append(_sourceNodeType).append(".class;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Class<").append(_targetNodeType).append("> getTargetType() {\n");
  src.append("\t\treturn ").append(_targetNodeType).append(".class;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Property<String> getSourceIdProperty() {\n");
  src.append("\t\treturn sourceId;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Property<String> getTargetIdProperty() {\n");
  src.append("\t\treturn targetId;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic String name() {\n");
  src.append("\t\treturn \"").append(getRelationshipType()).append("\";\n");
  src.append("\t}\n\n");
  src.append("}\n");
  return src.toString();
}
