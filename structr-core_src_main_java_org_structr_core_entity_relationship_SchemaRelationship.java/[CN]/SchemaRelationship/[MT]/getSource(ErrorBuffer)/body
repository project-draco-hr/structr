{
  final Map<String,Set<String>> viewProperties=new LinkedHashMap<>();
  final StringBuilder src=new StringBuilder();
  final Class baseType=AbstractRelationship.class;
  final String _className=getClassName();
  final String _sourceNodeType=getSchemaNodeSourceType();
  final String _targetNodeType=getSchemaNodeTargetType();
  final Set<String> validators=new LinkedHashSet<>();
  final Set<String> enums=new LinkedHashSet<>();
  src.append("package org.structr.dynamic;\n\n");
  SchemaHelper.formatImportStatements(src,baseType);
  src.append("public class ").append(_className).append(" extends ").append(getBaseType()).append(" {\n\n");
  src.append(SchemaHelper.extractProperties(this,validators,enums,viewProperties,errorBuffer));
  src.append("\tpublic static final Property<String> sourceIdProperty = new SourceId(\"sourceId\");\n");
  src.append("\tpublic static final Property<String> targetIdProperty = new TargetId(\"targetId\");\n");
  SchemaHelper.addPropertyToView(PropertyView.Public,"sourceId",viewProperties);
  SchemaHelper.addPropertyToView(PropertyView.Public,"targetId",viewProperties);
  SchemaHelper.addPropertyToView(PropertyView.Ui,"sourceId",viewProperties);
  SchemaHelper.addPropertyToView(PropertyView.Ui,"targetId",viewProperties);
  for (  final String enumDefition : enums) {
    src.append(enumDefition);
  }
  for (  Map.Entry<String,Set<String>> entry : viewProperties.entrySet()) {
    final String viewName=entry.getKey();
    final Set<String> view=entry.getValue();
    if (!view.isEmpty()) {
      dynamicViews.add(viewName);
      SchemaHelper.formatView(src,_className,viewName,viewName,view);
    }
  }
  if (!validators.isEmpty()) {
    src.append("\n\t@Override\n");
    src.append("\tpublic boolean isValid(final ErrorBuffer errorBuffer) {\n\n");
    src.append("\t\tboolean error = false;\n\n");
    for (    final String validator : validators) {
      src.append("\t\terror |= ").append(validator).append(";\n");
    }
    src.append("\n\t\treturn !error;\n");
    src.append("\t}\n");
  }
  src.append("\n\t@Override\n");
  src.append("\tpublic Class<").append(_sourceNodeType).append("> getSourceType() {\n");
  src.append("\t\treturn ").append(_sourceNodeType).append(".class;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Class<").append(_targetNodeType).append("> getTargetType() {\n");
  src.append("\t\treturn ").append(_targetNodeType).append(".class;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Property<String> getSourceIdProperty() {\n");
  src.append("\t\treturn sourceId;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic Property<String> getTargetIdProperty() {\n");
  src.append("\t\treturn targetId;\n");
  src.append("\t}\n\n");
  src.append("\t@Override\n");
  src.append("\tpublic String name() {\n");
  src.append("\t\treturn \"").append(getRelationshipType()).append("\";\n");
  src.append("\t}\n\n");
  src.append("}\n");
  return src.toString();
}
