{
  final List<AbstractRelationship> list=new ArrayList<>();
  if (arrayHasMinLengthAndMaxLengthAndAllElementsNotNull(sources,2,3)) {
    final Object source=sources[0];
    final Object target=sources[1];
    AbstractNode sourceNode=null;
    AbstractNode targetNode=null;
    if (source instanceof AbstractNode && target instanceof AbstractNode) {
      sourceNode=(AbstractNode)source;
      targetNode=(AbstractNode)target;
    }
 else {
      logger.warn("Error: entities are not nodes. Parameters: {}",getParametersAsString(sources));
      return "Error: entities are not nodes.";
    }
    if (sources.length == 2) {
      for (      final AbstractRelationship rel : sourceNode.getIncomingRelationships()) {
        final NodeInterface s=rel.getSourceNode();
        final NodeInterface t=rel.getTargetNode();
        if (s != null && t != null && s.equals(targetNode) && t.equals(sourceNode)) {
          list.add(rel);
        }
      }
    }
 else     if (sources.length == 3) {
      final String relType=(String)sources[2];
      for (      final AbstractRelationship rel : sourceNode.getIncomingRelationships()) {
        final NodeInterface s=rel.getSourceNode();
        final NodeInterface t=rel.getTargetNode();
        if (s != null && t != null && rel.getRelType().name().equals(relType) && s.equals(targetNode) && t.equals(sourceNode)) {
          list.add(rel);
        }
      }
    }
  }
 else {
    logParameterError(entity,sources,ctx.isJavaScriptContext());
  }
  return list;
}
