{
  final DatabaseService graphDb=(DatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  String type=null;
  final String oldKey=(String)properties.get("oldKey");
  final String newKey=(String)properties.get("newKey");
  if (graphDb != null && StringUtils.isNotBlank(oldKey) && StringUtils.isNotBlank(newKey)) {
    Iterator<AbstractNode> nodeIterator=null;
    if (properties.containsKey(AbstractNode.type.dbName())) {
      type=(String)properties.get(AbstractNode.type.dbName());
      try (final Tx tx=StructrApp.getInstance().tx()){
        nodeIterator=StructrApp.getInstance(securityContext).nodeQuery(SchemaHelper.getEntityClassForRawType(type)).getResult().getResults().iterator();
        tx.success();
      }
       properties.remove(AbstractNode.type.dbName());
    }
 else {
      try (final Tx tx=StructrApp.getInstance().tx()){
        nodeIterator=Iterables.map(nodeFactory,graphDb.getAllNodes()).iterator();
        tx.success();
      }
     }
    final long count=bulkGraphOperation(securityContext,nodeIterator,1000,"ChangeNodePropertyKey",new BulkGraphOperation<AbstractNode>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractNode node){
        for (        Entry entry : properties.entrySet()) {
          String key=(String)entry.getKey();
          PropertyKey propertyKey=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(node.getClass(),key);
          if (propertyKey != null) {
            Node dbNode=node.getNode();
            if (dbNode.hasProperty(newKey)) {
              logger.error("Node {} has already a property with key {}",new Object[]{node,newKey});
              throw new IllegalStateException("Node has already a property of the new key");
            }
            if (dbNode.hasProperty(oldKey)) {
              dbNode.setProperty(newKey,dbNode.getProperty(oldKey));
              dbNode.removeProperty(oldKey);
            }
            node.updateInIndex();
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractNode node){
        logger.warn("Unable to set properties of node {}: {}",new Object[]{node.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.warn("Unable to set node properties: {}",t.getMessage());
      }
    }
);
    logger.info("Fixed {} nodes ...",count);
  }
 else {
    logger.info("No values for oldKey and/or newKey found, aborting.");
  }
  logger.info("Done");
}
