{
  final String entityType=(String)attributes.get("type");
  final DatabaseService graphDb=(DatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  Iterator<AbstractNode> nodeIterator=null;
  try (final Tx tx=StructrApp.getInstance().tx()){
    nodeIterator=Iterables.filter(new TypePredicate<>(entityType),Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),graphDb.getAllNodes()))).iterator();
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception while creating all nodes iterator.");
    fex.printStackTrace();
  }
  if (entityType == null) {
    logger.log(Level.INFO,"Node type not set or no entity class found. Starting creation of labels for all nodes.");
  }
 else {
    logger.log(Level.INFO,"Starting creation of labels for all nodes of type {0}",entityType);
  }
  final long count=NodeServiceCommand.bulkGraphOperation(securityContext,nodeIterator,10000,"CreateLabels",new BulkGraphOperation<AbstractNode>(){
    @Override public void handleGraphObject(    SecurityContext securityContext,    AbstractNode node){
      final String type=node.getProperty(GraphObject.type);
      if (type != null) {
        try {
          node.unlockSystemPropertiesOnce();
          GraphObject.type.setProperty(securityContext,node,type);
        }
 catch (        FrameworkException fex) {
        }
      }
      node.updateInIndex();
    }
    @Override public void handleThrowable(    SecurityContext securityContext,    Throwable t,    AbstractNode node){
      logger.log(Level.WARNING,"Unable to create labels for node {0}: {1}",new Object[]{node,t.getMessage()});
    }
    @Override public void handleTransactionFailure(    SecurityContext securityContext,    Throwable t){
      logger.log(Level.WARNING,"Unable to create labels for node: {0}",t.getMessage());
    }
  }
);
  logger.log(Level.INFO,"Done with creating labels on {0} nodes",count);
}
