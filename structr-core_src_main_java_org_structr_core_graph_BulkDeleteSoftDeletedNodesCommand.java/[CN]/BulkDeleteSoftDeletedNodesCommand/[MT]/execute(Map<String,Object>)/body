{
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext,true,false);
  if (graphDb != null) {
    Iterator<AbstractNode> nodeIterator=null;
    try (final Tx tx=StructrApp.getInstance().tx()){
      nodeIterator=Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),GlobalGraphOperations.at(graphDb).getAllNodes())).iterator();
      tx.success();
    }
     final boolean erase;
    if (properties.containsKey("erase") && properties.get("erase").equals("true")) {
      erase=true;
    }
 else {
      erase=false;
    }
    bulkGraphOperation(securityContext,nodeIterator,1000,"DeleteSoftDeletedNodes",new BulkGraphOperation<AbstractNode>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractNode node){
        if (node.isDeleted()) {
          logger.log(Level.INFO,"Found deleted node: {0}",node);
          if (erase) {
            try {
              StructrApp.getInstance(securityContext).delete(node);
            }
 catch (            FrameworkException ex) {
              logger.log(Level.WARNING,"Could not delete node " + node,ex);
            }
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractNode node){
        logger.log(Level.WARNING,"Unable to set properties of node {0}: {1}",new Object[]{node.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to set node properties: {0}",t.getMessage());
      }
    }
);
  }
  logger.log(Level.INFO,"Done");
}
