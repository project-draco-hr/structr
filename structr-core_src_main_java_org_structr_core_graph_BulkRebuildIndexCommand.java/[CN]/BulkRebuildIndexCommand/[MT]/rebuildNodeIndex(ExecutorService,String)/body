{
  final NodeFactory nodeFactory=new NodeFactory(SecurityContext.getSuperUserInstance());
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Iterator<AbstractNode> nodeIterator=null;
  try (final Tx tx=StructrApp.getInstance().tx()){
    nodeIterator=Iterables.filter(new TypePredicate<>(entityType),Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),GlobalGraphOperations.at(graphDb).getAllNodes()))).iterator();
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception while creating all nodes iterator.");
    fex.printStackTrace();
  }
  if (entityType == null) {
    logger.log(Level.INFO,"Node type not set or no entity class found. Starting (re-)indexing all nodes");
  }
 else {
    logger.log(Level.INFO,"Starting (re-)indexing all nodes of type {0}",entityType);
  }
  final Iterator<AbstractNode> finalIterator=nodeIterator;
  final AtomicLong counter=new AtomicLong();
  final Runnable indexer=new Runnable(){
    @Override public void run(){
      bulkGraphOperation(securityContext,finalIterator,1000,"RebuildNodeIndex",new BulkGraphOperation<AbstractNode>(){
        @Override public void handleGraphObject(        SecurityContext securityContext,        AbstractNode node){
          node.updateInIndex();
        }
        @Override public void handleThrowable(        SecurityContext securityContext,        Throwable t,        AbstractNode node){
          logger.log(Level.WARNING,"Unable to index node {0}: {1}",new Object[]{node,t.getMessage()});
        }
        @Override public void handleTransactionFailure(        SecurityContext securityContext,        Throwable t){
          logger.log(Level.WARNING,"Unable to index node: {0}",t.getMessage());
        }
        @Override public Predicate<Long> getCondition(){
          return null;
        }
        @Override public AtomicLong getCounter(){
          return counter;
        }
      }
);
      logger.log(Level.INFO,"Done with (re-)indexing {0} nodes",counter.get());
    }
  }
;
  logger.log(Level.INFO,"Rebuilding node index with {0} threads.",threadCount);
  final List<Future> futures=new LinkedList<>();
  for (int i=0; i < threadCount; i++) {
    futures.add(service.submit(indexer));
  }
  for (  final Future future : futures) {
    try {
      future.get();
    }
 catch (    InterruptedException|ExecutionException iex) {
      iex.printStackTrace();
    }
  }
}
