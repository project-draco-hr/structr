{
  final NodeFactory nodeFactory=new NodeFactory(SecurityContext.getSuperUserInstance());
  final DatabaseService graphDb=(DatabaseService)arguments.get("graphDb");
  Iterator<AbstractNode> nodeIterator=null;
  try (final Tx tx=StructrApp.getInstance().tx()){
    nodeIterator=Iterables.filter(new TypePredicate<>(entityType),Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),graphDb.getAllNodes()))).iterator();
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.warn("Exception while creating all nodes iterator.",fex);
  }
  if (entityType == null) {
    logger.info("Node type not set or no entity class found. Starting (re-)indexing all nodes");
  }
 else {
    logger.info("Starting (re-)indexing all nodes of type {}",entityType);
  }
  long count=NodeServiceCommand.bulkGraphOperation(securityContext,nodeIterator,1000,"RebuildNodeIndex",new BulkGraphOperation<AbstractNode>(){
    @Override public void handleGraphObject(    SecurityContext securityContext,    AbstractNode node){
      node.updateInIndex();
    }
    @Override public void handleThrowable(    SecurityContext securityContext,    Throwable t,    AbstractNode node){
      logger.warn("Unable to index node {}: {}",new Object[]{node,t.getMessage()});
    }
    @Override public void handleTransactionFailure(    SecurityContext securityContext,    Throwable t){
      logger.warn("Unable to index node: {}",t.getMessage());
    }
  }
);
  logger.info("Done with (re-)indexing {} nodes",count);
}
