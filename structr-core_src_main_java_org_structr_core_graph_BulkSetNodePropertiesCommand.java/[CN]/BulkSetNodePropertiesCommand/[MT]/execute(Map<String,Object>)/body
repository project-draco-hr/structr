{
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  final String type=(String)properties.get("type");
  if (StringUtils.isBlank(type)) {
    throw new FrameworkException(422,"Type must not be empty");
  }
  final Class cls=SchemaHelper.getEntityClassForRawType(type);
  if (cls == null) {
    throw new FrameworkException(422,"Invalid type " + type);
  }
  if (graphDb != null) {
    Iterator<AbstractNode> nodeIterator=null;
    if (properties.containsKey(AbstractNode.type.dbName())) {
      try (final Tx tx=StructrApp.getInstance().tx()){
        nodeIterator=StructrApp.getInstance(securityContext).nodeQuery(cls).getResult().getResults().iterator();
        tx.success();
      }
       properties.remove(AbstractNode.type.dbName());
    }
 else {
      try (final Tx tx=StructrApp.getInstance().tx()){
        nodeIterator=Iterables.map(nodeFactory,GlobalGraphOperations.at(graphDb).getAllNodes()).iterator();
        tx.success();
      }
     }
    properties.remove("type");
    final long count=bulkGraphOperation(securityContext,nodeIterator,1000,"SetNodeProperties",new BulkGraphOperation<AbstractNode>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractNode node){
        if (node.getProperty(GraphObject.id) != null) {
          for (          Entry entry : properties.entrySet()) {
            String key=(String)entry.getKey();
            Object val=null;
            if (key.equals("newType")) {
              key="type";
            }
            PropertyConverter inputConverter=StructrApp.getConfiguration().getPropertyKeyForJSONName(cls,key).inputConverter(securityContext);
            if (inputConverter != null) {
              try {
                val=inputConverter.convert(entry.getValue());
              }
 catch (              FrameworkException ex) {
                logger.log(Level.SEVERE,null,ex);
              }
            }
 else {
              val=entry.getValue();
            }
            PropertyKey propertyKey=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(node.getClass(),key);
            if (propertyKey != null) {
              try {
                node.unlockReadOnlyPropertiesOnce();
                node.setProperty(propertyKey,val);
              }
 catch (              FrameworkException fex) {
                logger.log(Level.WARNING,"Unable to set node property {0} of node {1} to {2}: {3}",new Object[]{propertyKey,node.getUuid(),val,fex.getMessage()});
              }
            }
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractNode node){
        logger.log(Level.WARNING,"Unable to set properties of node {0}: {1}",new Object[]{node.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to set node properties: {0}",t.getMessage());
      }
    }
);
    logger.log(Level.INFO,"Fixed {0} nodes ...",count);
  }
  logger.log(Level.INFO,"Done");
}
