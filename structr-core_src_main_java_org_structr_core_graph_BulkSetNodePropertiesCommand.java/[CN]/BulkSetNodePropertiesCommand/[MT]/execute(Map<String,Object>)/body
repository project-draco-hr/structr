{
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  final SearchNodeCommand searchNode=Services.command(superUserContext,SearchNodeCommand.class);
  String type=null;
  if (graphDb != null) {
    Result<AbstractNode> nodes=null;
    if (properties.containsKey(AbstractNode.type.dbName())) {
      type=(String)properties.get(AbstractNode.type.dbName());
      List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
      attrs.add(Search.andExactType(type));
      nodes=searchNode.execute(attrs);
      properties.remove(AbstractNode.type.dbName());
    }
 else {
      nodes=nodeFactory.createAllNodes(GlobalGraphOperations.at(graphDb).getAllNodes());
    }
    final Class cls=Services.getService(ModuleService.class).getNodeEntityClass(type);
    long nodeCount=bulkGraphOperation(securityContext,nodes.getResults(),1000,"SetNodeProperties",new BulkGraphOperation<AbstractNode>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractNode node){
        if (node.getProperty(AbstractNode.uuid) != null) {
          for (          Entry entry : properties.entrySet()) {
            String key=(String)entry.getKey();
            Object val=null;
            if (key.equals("newType")) {
              key="type";
            }
            PropertyConverter inputConverter=EntityContext.getPropertyKeyForJSONName(cls,key).inputConverter(securityContext);
            if (inputConverter != null) {
              try {
                val=inputConverter.convert(entry.getValue());
              }
 catch (              FrameworkException ex) {
                logger.log(Level.SEVERE,null,ex);
              }
            }
 else {
              val=entry.getValue();
            }
            PropertyKey propertyKey=EntityContext.getPropertyKeyForDatabaseName(node.getClass(),key);
            if (propertyKey != null) {
              try {
                node.unlockReadOnlyPropertiesOnce();
                node.setProperty(propertyKey,val);
              }
 catch (              FrameworkException fex) {
                logger.log(Level.WARNING,"Unable to set node property {0} of node {1} to {2}: {3}",new Object[]{propertyKey,node.getUuid(),val,fex.getMessage()});
              }
            }
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractNode node){
        logger.log(Level.WARNING,"Unable to set properties of node {0}: {1}",new Object[]{node.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to set node properties: {0}",t.getMessage());
      }
    }
);
    logger.log(Level.INFO,"Fixed {0} nodes ...",nodeCount);
  }
  logger.log(Level.INFO,"Done");
}
