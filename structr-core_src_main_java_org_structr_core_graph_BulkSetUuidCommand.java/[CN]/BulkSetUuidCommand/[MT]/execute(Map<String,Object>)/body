{
  final String entityType=(String)attributes.get("type");
  final String relType=(String)attributes.get("relType");
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  final RelationshipFactory relFactory=new RelationshipFactory(superUserContext);
  if (entityType != null) {
    final Class type=SchemaHelper.getEntityClassForRawType(entityType);
    if (type != null) {
      Iterator<AbstractNode> nodeIterator=null;
      try (final Tx tx=StructrApp.getInstance().tx()){
        nodeIterator=Iterables.filter(new TypePredicate<>(entityType),Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),GlobalGraphOperations.at(graphDb).getAllNodes()))).iterator();
        tx.success();
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Exception while creating all nodes iterator.");
        fex.printStackTrace();
      }
      logger.log(Level.INFO,"Start setting UUID on all nodes of type {0}",new Object[]{entityType});
      final AtomicLong count=new AtomicLong();
      bulkGraphOperation(securityContext,nodeIterator,1000,"SetNodeProperties",new BulkGraphOperation<AbstractNode>(){
        @Override public void handleGraphObject(        final SecurityContext securityContext,        final AbstractNode node){
          try {
            node.setProperty(GraphObject.id,UUID.randomUUID().toString().replaceAll("[\\-]+",""));
            if (node.getProperty(NodeInterface.type) == null) {
              node.setProperty(NodeInterface.type,type.getSimpleName());
            }
          }
 catch (          FrameworkException fex) {
            logger.log(Level.WARNING,"Unable to set UUID of node {0}: {1}",new Object[]{node,fex.getMessage()});
          }
        }
        @Override public void handleThrowable(        SecurityContext securityContext,        Throwable t,        AbstractNode node){
          logger.log(Level.WARNING,"Unable to set UUID of node {0}: {1}",new Object[]{node,t.getMessage()});
        }
        @Override public void handleTransactionFailure(        SecurityContext securityContext,        Throwable t){
          logger.log(Level.WARNING,"Unable to set UUID on node: {0}",t.getMessage());
        }
        @Override public Predicate<Long> getCondition(){
          return null;
        }
        @Override public AtomicLong getCounter(){
          return count;
        }
      }
);
      logger.log(Level.INFO,"Done with setting UUID on {0} nodes",count.get());
      return;
    }
  }
 else   if (relType != null) {
    Iterator<AbstractRelationship> relIterator=null;
    try (final Tx tx=StructrApp.getInstance().tx()){
      relIterator=Iterables.filter(new TypePredicate<>(relType),Iterables.map(relFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),GlobalGraphOperations.at(graphDb).getAllRelationships()))).iterator();
      tx.success();
    }
 catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Exception while creating all nodes iterator.");
      fex.printStackTrace();
    }
    logger.log(Level.INFO,"Start setting UUID on all rels of type {0}",new Object[]{relType});
    final AtomicLong count=new AtomicLong();
    bulkGraphOperation(securityContext,relIterator,1000,"SetRelationshipUuid",new BulkGraphOperation<AbstractRelationship>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractRelationship rel){
        try {
          rel.setProperty(AbstractRelationship.id,UUID.randomUUID().toString().replaceAll("[\\-]+",""));
        }
 catch (        FrameworkException fex) {
          logger.log(Level.WARNING,"Unable to set UUID of relationship {0}: {1}",new Object[]{rel,fex.getMessage()});
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractRelationship rel){
        logger.log(Level.WARNING,"Unable to set UUID of relationship {0}: {1}",new Object[]{rel,t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to set UUID on relationship: {0}",t.getMessage());
      }
      @Override public Predicate<Long> getCondition(){
        return null;
      }
      @Override public AtomicLong getCounter(){
        return count;
      }
    }
);
    logger.log(Level.INFO,"Done with setting UUID on {0} relationships",count);
    return;
  }
  logger.log(Level.INFO,"Unable to determine entity type to set UUID.");
}
