{
  final String entityType=(String)attributes.get("type");
  final String relType=(String)attributes.get("relType");
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  final RelationshipFactory relFactory=new RelationshipFactory(superUserContext);
  if (entityType != null) {
    final Class type=SchemaHelper.getEntityClassForRawType(entityType);
    if (type != null) {
      final Result<AbstractNode> result=nodeFactory.instantiateAll(GlobalGraphOperations.at(graphDb).getAllNodes());
      final List<AbstractNode> nodes=result.getResults();
      logger.log(Level.INFO,"Start setting UUID on all nodes of type {0}",new Object[]{type.getSimpleName()});
      long count=bulkGraphOperation(securityContext,nodes,1000,"SetNodeProperties",new BulkGraphOperation<AbstractNode>(){
        @Override public void handleGraphObject(        SecurityContext securityContext,        AbstractNode node){
          if (!node.getClass().equals(type)) {
            return;
          }
          try {
            node.setProperty(GraphObject.id,UUID.randomUUID().toString().replaceAll("[\\-]+",""));
          }
 catch (          FrameworkException fex) {
            logger.log(Level.WARNING,"Unable to set UUID of node {0}: {1}",new Object[]{node,fex.getMessage()});
          }
        }
        @Override public void handleThrowable(        SecurityContext securityContext,        Throwable t,        AbstractNode node){
          logger.log(Level.WARNING,"Unable to set UUID of node {0}: {1}",new Object[]{node,t.getMessage()});
        }
        @Override public void handleTransactionFailure(        SecurityContext securityContext,        Throwable t){
          logger.log(Level.WARNING,"Unable to set UUID on node: {0}",t.getMessage());
        }
      }
);
      logger.log(Level.INFO,"Done with setting UUID on {0} nodes",count);
      return;
    }
  }
 else   if (relType != null) {
    final List<AbstractRelationship> rels=relFactory.instantiate(GlobalGraphOperations.at(graphDb).getAllRelationships());
    logger.log(Level.INFO,"Start setting UUID on all rels of type {0}",new Object[]{relType});
    long count=bulkGraphOperation(securityContext,rels,1000,"SetRelationshipUuid",new BulkGraphOperation<AbstractRelationship>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractRelationship rel){
        if (!rel.getType().equals(relType)) {
          return;
        }
        try {
          rel.setProperty(AbstractRelationship.id,UUID.randomUUID().toString().replaceAll("[\\-]+",""));
        }
 catch (        FrameworkException fex) {
          logger.log(Level.WARNING,"Unable to set UUID of relationship {0}: {1}",new Object[]{rel,fex.getMessage()});
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractRelationship rel){
        logger.log(Level.WARNING,"Unable to set UUID of relationship {0}: {1}",new Object[]{rel,t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to set UUID on relationship: {0}",t.getMessage());
      }
    }
);
    logger.log(Level.INFO,"Done with setting UUID on {0} relationships",count);
    return;
  }
  logger.log(Level.INFO,"Unable to determine entity type to set UUID.");
}
