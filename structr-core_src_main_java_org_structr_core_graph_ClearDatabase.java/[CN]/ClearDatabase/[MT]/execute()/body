{
  final DatabaseService graphDb=(DatabaseService)arguments.get("graphDb");
  final NodeFactory nodeFactory=new NodeFactory(securityContext);
  if (graphDb != null) {
    Iterator<AbstractNode> nodeIterator=null;
    final App app=StructrApp.getInstance();
    try (final Tx tx=app.tx()){
      nodeIterator=Iterables.map(nodeFactory,Iterables.filter(new StructrAndSpatialPredicate(true,false,false),graphDb.getAllNodes())).iterator();
      tx.success();
    }
 catch (    FrameworkException fex) {
      logger.warn("Exception while creating all nodes iterator.",fex);
    }
    final long deletedNodes=bulkGraphOperation(securityContext,nodeIterator,1000,"ClearDatabase",new BulkGraphOperation<AbstractNode>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractNode node){
        if (node.getProperty(GraphObject.id) != null) {
          try {
            app.delete(node);
          }
 catch (          FrameworkException fex) {
            logger.warn("Unable to delete node {}: {}",new Object[]{node.getUuid(),fex.getMessage()});
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractNode node){
        logger.warn("Unable to delete node {}: {}",new Object[]{node.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.warn("Unable to clear database: {}",t.getMessage());
      }
    }
);
    logger.info("Finished deleting {} nodes",deletedNodes);
  }
}
