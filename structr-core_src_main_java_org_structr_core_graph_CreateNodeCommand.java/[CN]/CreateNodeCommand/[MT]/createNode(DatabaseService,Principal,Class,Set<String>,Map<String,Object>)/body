{
  final Map<String,Object> parameters=new HashMap<>();
  final Map<String,Object> ownsProperties=new HashMap<>();
  final Map<String,Object> securityProperties=new HashMap<>();
  final StringBuilder buf=new StringBuilder();
  final boolean canHaveOwner=canHaveOwner(nodeType);
  if (canHaveOwner && user != null && !(user instanceof SuperUser)) {
    buf.append("MATCH (u:Principal) WHERE id(u) = {userId}");
    buf.append(" CREATE (u)-[o:OWNS {ownsProperties}]->(n");
    for (    final String label : labels) {
      buf.append(":");
      buf.append(label);
    }
    buf.append(" {nodeProperties})<-[s:SECURITY {securityProperties}]-(u)");
    buf.append(" RETURN n");
    ownsProperties.put(GraphObject.id.dbName(),getNextUuid());
    securityProperties.put(Security.allowed.dbName(),new String[]{Permission.read.name(),Permission.write.name(),Permission.delete.name(),Permission.accessControl.name()});
    securityProperties.put(GraphObject.id.dbName(),getNextUuid());
    parameters.put("userId",user.getId());
    parameters.put("ownsProperties",ownsProperties);
    parameters.put("securityProperties",securityProperties);
  }
 else {
    buf.append("CREATE (n");
    for (    final String label : labels) {
      buf.append(":");
      buf.append(label);
    }
    buf.append(" {nodeProperties})");
    buf.append(" RETURN n");
  }
  parameters.put("nodeProperties",properties);
  final NativeResult result=graphDb.execute(buf.toString(),parameters);
  if (result.hasNext()) {
    final Map<String,Object> data=result.next();
    final Node newNode=(Node)data.get("n");
    return newNode;
  }
  throw new RuntimeException("Unable to create new node.");
}
