{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Principal user=securityContext.getUser(false);
  T node=null;
  if (graphDb != null) {
    CreateRelationshipCommand createRel=Services.command(securityContext,CreateRelationshipCommand.class);
    Date now=new Date();
    PropertyMap properties=new PropertyMap(attributes);
    Object typeObject=properties.get(AbstractNode.type);
    String nodeType=(typeObject != null) ? typeObject.toString() : EntityContext.getFactoryDefinition().getGenericNodeType();
    NodeFactory<T> nodeFactory=new NodeFactory<T>(securityContext);
    boolean isCreation=true;
    node=nodeFactory.instantiateWithType(graphDb.createNode(),nodeType,isCreation);
    if (node != null) {
      TransactionCommand.nodeCreated(node);
      if ((user != null) && user instanceof AbstractNode) {
        AbstractNode owner=(AbstractNode)user;
        createRel.execute(owner,node,RelType.OWNS,false);
        SecurityRelationship securityRel=(SecurityRelationship)createRel.execute(owner,node,RelType.SECURITY,false);
        securityRel.setAllowed(Permission.values());
        node.unlockReadOnlyPropertiesOnce();
        node.setProperty(AbstractNode.createdBy,user.getProperty(AbstractNode.uuid));
      }
      node.unlockReadOnlyPropertiesOnce();
      node.setProperty(AbstractNode.createdDate,now);
      node.unlockReadOnlyPropertiesOnce();
      node.setProperty(AbstractNode.lastModifiedDate,now);
      for (      Entry<PropertyKey,Object> attr : properties.entrySet()) {
        Object value=attr.getValue();
        PropertyKey key=attr.getKey();
        if (key.isReadOnly()) {
          node.unlockReadOnlyPropertiesOnce();
        }
        node.setProperty(key,value);
      }
      properties.clear();
    }
  }
  if (node != null) {
    node.onNodeCreation();
    for (    Transformation<GraphObject> transformation : EntityContext.getEntityCreationTransformations(node.getClass())) {
      transformation.apply(securityContext,node);
    }
  }
  return node;
}
