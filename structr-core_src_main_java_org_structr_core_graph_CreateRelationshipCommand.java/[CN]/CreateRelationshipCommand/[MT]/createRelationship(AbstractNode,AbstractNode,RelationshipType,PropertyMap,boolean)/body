{
  return (T)Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      if (checkDuplicates) {
        int contentHashCode=properties != null ? properties.contentHashCode(null,false) : -1;
        for (        AbstractRelationship rel : toNode.getIncomingRelationships(relType)) {
          Relationship dbRelationship=rel.getRelationship();
          Node dbRelStartNode=dbRelationship.getStartNode();
          Node dbFromNode=fromNode.getNode();
          if (dbRelStartNode.getId() == dbFromNode.getId()) {
            if (properties != null) {
              if (contentHashCode == rel.getProperties().contentHashCode(properties.keySet(),false)) {
                return null;
              }
            }
 else {
              return null;
            }
          }
        }
      }
      RelationshipFactory<T> relationshipFactory=new RelationshipFactory<T>(securityContext);
      Node startNode=fromNode.getNode();
      Node endNode=toNode.getNode();
      Relationship rel=startNode.createRelationshipTo(endNode,relType);
      T newRel=relationshipFactory.instantiateRelationship(securityContext,rel);
      if (newRel != null) {
        TransactionCommand.relationshipCreated(newRel);
        newRel.unlockReadOnlyPropertiesOnce();
        newRel.setProperty(AbstractRelationship.createdDate,new Date());
        if (properties != null) {
          for (          Entry<PropertyKey,Object> entry : properties.entrySet()) {
            PropertyKey key=entry.getKey();
            if (key.isReadOnlyProperty() || key.isWriteOnceProperty()) {
              newRel.unlockReadOnlyPropertiesOnce();
            }
            newRel.setProperty(entry.getKey(),entry.getValue());
          }
        }
        newRel.onRelationshipInstantiation();
        for (        Transformation<GraphObject> transformation : EntityContext.getEntityCreationTransformations(newRel.getClass())) {
          transformation.apply(securityContext,newRel);
        }
      }
      return newRel;
    }
  }
);
}
