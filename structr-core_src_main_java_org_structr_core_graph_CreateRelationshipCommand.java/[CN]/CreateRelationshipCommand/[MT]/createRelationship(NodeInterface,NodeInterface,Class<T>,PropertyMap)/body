{
  final RelationshipFactory<T> factory=new RelationshipFactory(securityContext);
  final T template=instantiate(relType);
  final Node startNode=fromNode.getNode();
  final Node endNode=toNode.getNode();
  final Relationship rel=startNode.createRelationshipTo(endNode,template);
  final T newRel=factory.instantiate(rel);
  final Date now=new Date();
  if (newRel != null) {
    newRel.unlockReadOnlyPropertiesOnce();
    newRel.setProperty(GraphObject.type,relType.getSimpleName());
    newRel.unlockReadOnlyPropertiesOnce();
    newRel.setProperty(GraphObject.id,getNextUuid());
    newRel.unlockReadOnlyPropertiesOnce();
    newRel.setProperty(AbstractRelationship.createdDate,now);
    newRel.unlockReadOnlyPropertiesOnce();
    newRel.setProperty(AbstractRelationship.lastModifiedDate,now);
    newRel.unlockReadOnlyPropertiesOnce();
    newRel.setProperty(AbstractRelationship.cascadeDelete,factory.instantiate(rel).getCascadingDeleteFlag());
    TransactionCommand.relationshipCreated(newRel);
    if (properties != null) {
      for (      Entry<PropertyKey,Object> entry : properties.entrySet()) {
        PropertyKey key=entry.getKey();
        if (key.isReadOnly() || key.isWriteOnce()) {
          newRel.unlockReadOnlyPropertiesOnce();
        }
        newRel.setProperty(entry.getKey(),entry.getValue());
      }
    }
    newRel.onRelationshipCreation();
    for (    Transformation<GraphObject> transformation : StructrApp.getConfiguration().getEntityCreationTransformations(newRel.getClass())) {
      transformation.apply(securityContext,newRel);
    }
  }
  return newRel;
}
