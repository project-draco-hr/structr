{
  if (!deletedNodes.contains(node) && node.getUuid() == null) {
    logger.log(Level.WARNING,"Will not delete node which has no UUID");
    return null;
  }
  deletedNodes.add(node);
  final RemoveNodeFromIndex removeNodeFromIndex=Services.command(securityContext,RemoveNodeFromIndex.class);
  final DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      try {
        List<AbstractNode> nodesToCheckAfterDeletion=new LinkedList<AbstractNode>();
        if (cascade) {
          for (          AbstractRelationship rel : node.getOutgoingRelationships()) {
            int cascadeDelete=rel.cascadeDelete();
            AbstractNode endNode=rel.getEndNode();
            if ((cascadeDelete & Relation.DELETE_IF_CONSTRAINT_WOULD_BE_VIOLATED) == Relation.DELETE_IF_CONSTRAINT_WOULD_BE_VIOLATED) {
              nodesToCheckAfterDeletion.add(endNode);
            }
            if (!deletedNodes.contains(endNode) && ((cascadeDelete & Relation.DELETE_OUTGOING) == Relation.DELETE_OUTGOING)) {
              removeNodeFromIndex.execute(endNode);
              doDeleteNode(endNode,cascade);
            }
          }
          for (          AbstractRelationship rel : node.getIncomingRelationships()) {
            int cascadeDelete=rel.cascadeDelete();
            AbstractNode startNode=rel.getStartNode();
            if ((cascadeDelete & Relation.DELETE_IF_CONSTRAINT_WOULD_BE_VIOLATED) == Relation.DELETE_IF_CONSTRAINT_WOULD_BE_VIOLATED) {
              nodesToCheckAfterDeletion.add(startNode);
            }
            if (!deletedNodes.contains(startNode) && ((cascadeDelete & Relation.DELETE_INCOMING) == Relation.DELETE_INCOMING)) {
              removeNodeFromIndex.execute(startNode);
              doDeleteNode(startNode,cascade);
            }
          }
        }
        node.onNodeDeletion();
        for (        AbstractRelationship r : node.getRelationships()) {
          deleteRel.execute(r,true);
        }
        removeNodeFromIndex.execute(node);
        node.getNode().delete();
        TransactionCommand.nodeDeleted(node);
        if (cascade) {
          for (          AbstractNode nodeToCheck : nodesToCheckAfterDeletion) {
            ErrorBuffer errorBuffer=new ErrorBuffer();
            if (!deletedNodes.contains(nodeToCheck) && !nodeToCheck.isValid(errorBuffer)) {
              removeNodeFromIndex.execute(nodeToCheck);
              doDeleteNode(nodeToCheck,cascade);
            }
          }
        }
      }
 catch (      Throwable t) {
        logger.log(Level.WARNING,"Exception while deleting node: {0}",t);
      }
      return null;
    }
  }
);
  return null;
}
