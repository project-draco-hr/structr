{
  AbstractRelationship rel=null;
  if (argument instanceof Long) {
    long id=((Long)argument).longValue();
    try {
      rel=relationshipFactory.instantiateRelationship(securityContext,(Relationship)graphDb.getRelationshipById(id));
    }
 catch (    NotFoundException nfe) {
      logger.log(Level.SEVERE,"Relationship {0} not found, cannot delete.",id);
    }
  }
 else   if (argument instanceof AbstractRelationship) {
    rel=(AbstractRelationship)argument;
  }
 else   if (argument instanceof Relationship) {
    rel=relationshipFactory.instantiateRelationship(securityContext,(Relationship)argument);
  }
  if (rel != null) {
    if (rel.getProperty(AbstractRelationship.uuid) == null) {
      logger.log(Level.WARNING,"Will not delete relationship which has no UUID: {0} --[:{1}]-->{2}",new Object[]{rel.getStartNode(),rel.getType(),rel.getEndNode()});
      return null;
    }
    final RemoveRelationshipFromIndex removeRel=Services.command(SecurityContext.getSuperUserInstance(),RemoveRelationshipFromIndex.class);
    final Relationship relToDelete=rel.getRelationship();
    final AbstractRelationship finalRel=rel;
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        TransactionCommand.relationshipDeleted(finalRel);
        try {
          removeRel.execute(finalRel);
          relToDelete.delete();
        }
 catch (        IllegalStateException ise) {
          logger.log(Level.WARNING,ise.getMessage());
        }
        return null;
      }
    }
);
  }
  return null;
}
