{
  final String dbPath=config.getProperty(Services.DATABASE_PATH);
  final GraphDatabaseBuilder builder=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(dbPath);
  logger.log(Level.INFO,"Initializing database ({0}) ...",dbPath);
  if (graphDb != null) {
    logger.log(Level.INFO,"Database already running ({0}) ...",dbPath);
    return;
  }
  final File confFile=new File(dbPath + "/neo4j.conf");
  if (confFile.exists()) {
    builder.loadPropertiesFromFile(confFile.getAbsolutePath());
  }
  builder.setConfig(ShellSettings.remote_shell_enabled,config.getProperty(Services.NEO4J_SHELL_ENABLED,"false"));
  builder.setConfig(ShellSettings.remote_shell_port,config.getProperty(Services.NEO4J_SHELL_PORT,"1337"));
  builder.setConfig(GraphDatabaseSettings.pagecache_memory,config.getProperty(Services.NEO4J_PAGE_CACHE_MEMORY,Long.toString(1024 * 1024 * 64L)));
  graphDb=builder.newGraphDatabase();
  if (graphDb == null) {
    logger.log(Level.SEVERE,"Database could not be started ({0}) ...",dbPath);
    return;
  }
  filesPath=config.getProperty(Services.FILES_PATH);
  File files=new File(filesPath);
  if (!files.exists()) {
    files.mkdir();
  }
  logger.log(Level.INFO,"Database ready.");
  logger.log(Level.FINE,"Initializing UUID index...");
  try (final Transaction tx=graphDb.beginTx()){
    caseInsensitiveIndex=graphDb.index().forNodes("caseInsensitiveAllNodes",MapUtil.stringMap("provider","lucene","type","exact","to_lower_case","true"));
    nodeIndices.put(NodeIndex.caseInsensitive,caseInsensitiveIndex);
    logger.log(Level.FINE,"Node case insensitive node index ready.");
    logger.log(Level.FINE,"Initializing case insensitive fulltext node index...");
    fulltextIndex=graphDb.index().forNodes("fulltextAllNodes",LuceneIndexImplementation.FULLTEXT_CONFIG);
    nodeIndices.put(NodeIndex.fulltext,fulltextIndex);
    logger.log(Level.FINE,"Fulltext node index ready.");
    logger.log(Level.FINE,"Initializing keyword node index...");
    keywordIndex=graphDb.index().forNodes("keywordAllNodes",LuceneIndexImplementation.EXACT_CONFIG);
    nodeIndices.put(NodeIndex.keyword,keywordIndex);
    logger.log(Level.FINE,"Keyword node index ready.");
    logger.log(Level.FINE,"Initializing layer index...");
    final Map<String,String> spatialConfig=new HashMap<>();
    spatialConfig.put(LayerNodeIndex.LAT_PROPERTY_KEY,Location.latitude.dbName());
    spatialConfig.put(LayerNodeIndex.LON_PROPERTY_KEY,Location.longitude.dbName());
    spatialConfig.put(SpatialIndexProvider.GEOMETRY_TYPE,LayerNodeIndex.POINT_PARAMETER);
    layerIndex=new LayerNodeIndex("layerIndex",graphDb,spatialConfig);
    nodeIndices.put(NodeIndex.layer,layerIndex);
    logger.log(Level.FINE,"Layer index ready.");
    logger.log(Level.FINE,"Initializing node factory...");
    relUuidIndex=graphDb.index().forRelationships("uuidAllRelationships",LuceneIndexImplementation.EXACT_CONFIG);
    relIndices.put(RelationshipIndex.rel_uuid,relUuidIndex);
    logger.log(Level.FINE,"Relationship UUID index ready.");
    logger.log(Level.FINE,"Initializing relationship index...");
    relFulltextIndex=graphDb.index().forRelationships("fulltextAllRelationships",LuceneIndexImplementation.FULLTEXT_CONFIG);
    relIndices.put(RelationshipIndex.rel_fulltext,relFulltextIndex);
    logger.log(Level.FINE,"Relationship fulltext index ready.");
    logger.log(Level.FINE,"Initializing keyword relationship index...");
    relKeywordIndex=graphDb.index().forRelationships("keywordAllRelationships",LuceneIndexImplementation.EXACT_CONFIG);
    relIndices.put(RelationshipIndex.rel_keyword,relKeywordIndex);
    tx.success();
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Error while initializing indexes.",t);
  }
  logger.log(Level.FINE,"Relationship numeric index ready.");
  logger.log(Level.FINE,"Initializing relationship factory...");
  logger.log(Level.FINE,"Relationship factory ready.");
  logger.log(Level.FINE,"Cypher execution engine ready.");
  isInitialized=true;
}
