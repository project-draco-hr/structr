{
  final ZipEntry dbEntry=new ZipEntry(STRUCTR_ZIP_DB_NAME);
  final String uuidPropertyName=GraphObject.id.dbName();
  int nodeCount=0;
  int relCount=0;
  zos.putNextEntry(dbEntry);
  for (  NodeInterface nodeObject : nodes) {
    final Node node=nodeObject.getNode();
    if (node.hasProperty(GraphObject.id.dbName())) {
      writer.print("N");
      for (      String key : node.getPropertyKeys()) {
        serialize(writer,key);
        serialize(writer,node.getProperty(key));
      }
      writer.print("\n");
      nodeCount++;
    }
  }
  writer.flush();
  for (  RelationshipInterface relObject : relationships) {
    final Relationship rel=relObject.getRelationship();
    if (rel.hasProperty(GraphObject.id.dbName())) {
      final Node startNode=rel.getStartNode();
      final Node endNode=rel.getEndNode();
      if (startNode.hasProperty(uuidPropertyName) && endNode.hasProperty(uuidPropertyName)) {
        String startId=(String)startNode.getProperty(uuidPropertyName);
        String endId=(String)endNode.getProperty(uuidPropertyName);
        writer.print("R");
        serialize(writer,startId);
        serialize(writer,endId);
        serialize(writer,rel.getType().name());
        for (        String key : rel.getPropertyKeys()) {
          serialize(writer,key);
          serialize(writer,rel.getProperty(key));
        }
        writer.print("\n");
        relCount++;
      }
    }
  }
  writer.flush();
  zos.closeEntry();
  logger.log(Level.INFO,"Exported {0} nodes and {1} rels",new Object[]{nodeCount,relCount});
}
