{
  final App app=StructrApp.getInstance();
  final DataInputStream dis=new DataInputStream(new BufferedInputStream(zis));
  final RelationshipFactory relFactory=new RelationshipFactory(securityContext);
  final long internalBatchSize=batchSize != null ? batchSize : 200;
  final NodeFactory nodeFactory=new NodeFactory(securityContext);
  final String uuidPropertyName=GraphObject.id.dbName();
  final Map<String,Node> uuidMap=new LinkedHashMap<>();
  final Set<Long> deletedNodes=new HashSet<>();
  final Set<Long> deletedRels=new HashSet<>();
  final SuperUser superUser=new SuperUser();
  double t0=System.nanoTime();
  PropertyContainer currentObject=null;
  String currentKey=null;
  boolean finished=false;
  long totalNodeCount=0;
  long totalRelCount=0;
  do {
    try (final Tx tx=app.tx(doValidation)){
      final List<Relationship> rels=new LinkedList<>();
      final List<Node> nodes=new LinkedList<>();
      long nodeCount=0;
      long relCount=0;
      do {
        try {
          dis.mark(4);
          byte objectType=dis.readByte();
          if (objectType == '\n') {
            continue;
          }
          if (objectType == 'N') {
            if (nodeCount + relCount >= internalBatchSize) {
              dis.reset();
              break;
            }
            currentObject=graphDb.createNode();
            nodeCount++;
            nodes.add((Node)currentObject);
          }
 else           if (objectType == 'R') {
            if (nodeCount + relCount >= internalBatchSize) {
              dis.reset();
              break;
            }
            String startId=(String)deserialize(dis);
            String endId=(String)deserialize(dis);
            String relTypeName=(String)deserialize(dis);
            Node endNode=uuidMap.get(endId);
            Node startNode=uuidMap.get(startId);
            if (startNode != null && endNode != null) {
              if (deletedNodes.contains(startNode.getId()) || deletedNodes.contains(endNode.getId())) {
                System.out.println("NOT creating relationship between deleted nodes..");
              }
 else {
                RelationshipType relType=RelationshipType.forName(relTypeName);
                currentObject=startNode.createRelationshipTo(endNode,relType);
                rels.add((Relationship)currentObject);
                relCount++;
              }
            }
 else {
              System.out.println("NOT creating relationship of type " + relTypeName + ", start: "+ startId+ ", end: "+ endId);
            }
          }
 else {
            dis.reset();
            if (currentKey == null) {
              currentKey=(String)deserialize(dis);
            }
 else {
              if (currentObject != null) {
                Object obj=deserialize(dis);
                if (uuidPropertyName.equals(currentKey) && currentObject instanceof Node) {
                  String uuid=(String)obj;
                  uuidMap.put(uuid,(Node)currentObject);
                }
                if (currentKey.length() != 0) {
                  currentObject.setProperty(currentKey,obj);
                  if (currentObject instanceof Node && NodeInterface.type.dbName().equals(currentKey)) {
                    ((Node)currentObject).addLabel(graphDb.forName(Label.class,(String)obj));
                  }
                }
 else {
                  logger.log(Level.SEVERE,"Invalid property key for value {0}, ignoring",obj);
                }
                currentKey=null;
              }
 else {
                logger.log(Level.WARNING,"No current object to store property in.");
              }
            }
          }
        }
 catch (        EOFException eofex) {
          finished=true;
        }
      }
 while (!finished);
      totalNodeCount+=nodeCount;
      totalRelCount+=relCount;
      for (      Node node : nodes) {
        if (!deletedNodes.contains(node.getId())) {
          NodeInterface entity=nodeFactory.instantiate(node);
          if (entity instanceof AbstractSchemaNode) {
            checkAndMerge(entity,deletedNodes,deletedRels);
          }
          if (!deletedNodes.contains(node.getId())) {
            TransactionCommand.nodeCreated(superUser,entity);
            entity.addToIndex();
          }
        }
      }
      for (      Relationship rel : rels) {
        if (!deletedRels.contains(rel.getId())) {
          RelationshipInterface entity=relFactory.instantiate(rel);
          TransactionCommand.relationshipCreated(superUser,entity);
          entity.addToIndex();
        }
      }
      logger.log(Level.INFO,"Imported {0} nodes and {1} rels, committing transaction..",new Object[]{totalNodeCount,totalRelCount});
      tx.success();
    }
   }
 while (!finished);
  try (final Tx tx=app.tx()){
    SchemaHelper.reloadSchema(new ErrorBuffer());
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"",fex);
  }
  app.command(BulkCreateLabelsCommand.class).execute(Collections.emptyMap());
  double t1=System.nanoTime();
  double time=((t1 - t0) / 1000000000.0);
  DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
  logger.log(Level.INFO,"Import done in {0} s",decimalFormat.format(time));
}
