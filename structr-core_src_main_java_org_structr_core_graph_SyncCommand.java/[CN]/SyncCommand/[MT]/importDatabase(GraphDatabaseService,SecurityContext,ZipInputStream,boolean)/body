{
  final App app=StructrApp.getInstance();
  final RelationshipFactory relFactory=new RelationshipFactory(securityContext);
  final NodeFactory nodeFactory=new NodeFactory(securityContext);
  final String uuidPropertyName=GraphObject.id.dbName();
  double t0=System.nanoTime();
  Map<String,Node> uuidMap=new LinkedHashMap<>();
  PropertyContainer currentObject=null;
  String currentKey=null;
  boolean finished=false;
  long totalNodeCount=0;
  long totalRelCount=0;
  try (final BufferedReader reader=new BufferedReader(new InputStreamReader(zis))){
    do {
      try (final Tx tx=app.tx(doValidation)){
        final List<Relationship> rels=new LinkedList<>();
        final List<Node> nodes=new LinkedList<>();
        long nodeCount=0;
        long relCount=0;
        do {
          try {
            reader.mark(4);
            String objectType=read(reader,1);
            if ("\n".equals(objectType)) {
              continue;
            }
            if ("N".equals(objectType)) {
              currentObject=graphDb.createNode();
              nodeCount++;
              nodes.add((Node)currentObject);
            }
 else             if ("R".equals(objectType)) {
              String startId=(String)deserialize(reader);
              String endId=(String)deserialize(reader);
              String relTypeName=(String)deserialize(reader);
              Node endNode=uuidMap.get(endId);
              Node startNode=uuidMap.get(startId);
              if (startNode != null && endNode != null) {
                RelationshipType relType=DynamicRelationshipType.withName(relTypeName);
                currentObject=startNode.createRelationshipTo(endNode,relType);
                rels.add((Relationship)currentObject);
              }
              relCount++;
            }
 else {
              reader.reset();
              if (currentKey == null) {
                currentKey=(String)deserialize(reader);
              }
 else {
                if (currentObject != null) {
                  Object obj=deserialize(reader);
                  if (uuidPropertyName.equals(currentKey) && currentObject instanceof Node) {
                    String uuid=(String)obj;
                    uuidMap.put(uuid,(Node)currentObject);
                  }
                  if (currentKey.length() != 0) {
                    currentObject.setProperty(currentKey,obj);
                    if (currentObject instanceof Node && NodeInterface.type.dbName().equals(currentKey)) {
                      ((Node)currentObject).addLabel(DynamicLabel.label((String)obj));
                    }
                  }
 else {
                    logger.log(Level.SEVERE,"Invalid property key for value {0}, ignoring",obj);
                  }
                  currentKey=null;
                }
 else {
                  logger.log(Level.WARNING,"No current object to store property in.");
                }
              }
            }
          }
 catch (          EOFException eofex) {
            finished=true;
          }
        }
 while (!finished && (nodeCount + relCount < 200));
        totalNodeCount+=nodeCount;
        totalRelCount+=relCount;
        for (        Node node : nodes) {
          NodeInterface entity=nodeFactory.instantiate(node);
          TransactionCommand.nodeCreated(entity);
          entity.addToIndex();
        }
        for (        Relationship rel : rels) {
          RelationshipInterface entity=relFactory.instantiate(rel);
          TransactionCommand.relationshipCreated(entity);
          entity.addToIndex();
        }
        logger.log(Level.INFO,"Imported {0} nodes and {1} rels, committing transaction..",new Object[]{totalNodeCount,totalRelCount});
        tx.success();
      }
     }
 while (!finished);
  }
 catch (  IOException ioex) {
  }
  double t1=System.nanoTime();
  double time=((t1 - t0) / 1000000000.0);
  DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
  logger.log(Level.INFO,"Import done in {0} s",decimalFormat.format(time));
}
