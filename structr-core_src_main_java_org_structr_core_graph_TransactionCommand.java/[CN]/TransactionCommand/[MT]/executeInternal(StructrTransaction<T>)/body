{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Transaction tx=transactions.get();
  boolean topLevel=(tx == null);
  boolean error=false;
  boolean deadlock=false;
  Set<String> synchronizationKeys=null;
  FrameworkException exception=null;
  T result=null;
  if (topLevel) {
    this.modificationQueue=new ModificationQueue();
    this.errorBuffer=new ErrorBuffer();
    tx=graphDb.beginTx();
    transactions.set(tx);
    currentCommand.set(this);
  }
  try {
    result=transaction.execute();
    if (topLevel) {
      if (!modificationQueue.doInnerCallbacks(securityContext,errorBuffer)) {
        if (transaction.doValidation) {
          throw new FrameworkException(422,errorBuffer);
        }
      }
      synchronizationKeys=modificationQueue.getSynchronizationKeys();
      try {
        semaphore.acquire(synchronizationKeys);
      }
 catch (      InterruptedException iex) {
        return null;
      }
      if (!modificationQueue.doValidation(securityContext,errorBuffer,transaction.doValidation)) {
        throw new FrameworkException(422,errorBuffer);
      }
    }
  }
 catch (  DeadlockDetectedException ddex) {
    tx.failure();
    deadlock=true;
    error=true;
  }
catch (  RetryException rex) {
    tx.failure();
    deadlock=true;
    error=true;
  }
catch (  FrameworkException fex) {
    tx.failure();
    exception=fex;
    error=true;
  }
catch (  Throwable t) {
    tx.failure();
    exception=new FrameworkException(500,t);
    error=true;
  }
 finally {
    if (topLevel) {
      try {
        tx.success();
        tx.finish();
      }
  finally {
        semaphore.release(synchronizationKeys);
        currentCommand.remove();
        transactions.remove();
      }
      if (!error) {
        modificationQueue.doOuterCallbacks(securityContext);
        modificationQueue.clear();
      }
    }
  }
  if (deadlock) {
    throw new RetryException();
  }
  if (exception != null && error) {
    throw exception;
  }
  return result;
}
