{
  if (page == 0 || pageSize <= 0) {
    return Result.EMPTY_RESULT;
  }
  final Factory<S,T> factory=getFactory(securityContext,includeDeletedAndHidden,publicOnly,pageSize,page,offsetId);
  boolean hasGraphSources=false;
  boolean hasSpatialSource=false;
  if (securityContext.getUser(false) == null) {
    rootGroup.add(new PropertySearchAttribute(GraphObject.visibleToPublicUsers,true,Occurrence.REQUIRED,true));
  }
  if (!includeDeletedAndHidden && !isRelationshipSearch()) {
    rootGroup.add(new PropertySearchAttribute(NodeInterface.hidden,true,Occurrence.FORBIDDEN,true));
    rootGroup.add(new PropertySearchAttribute(NodeInterface.deleted,true,Occurrence.FORBIDDEN,true));
  }
  final List<SourceSearchAttribute> sources=new ArrayList<>();
  boolean hasEmptySearchFields=false;
  Result intermediateResult=null;
  for (final Iterator<SearchAttribute> it=rootGroup.getSearchAttributes().iterator(); it.hasNext(); ) {
    final SearchAttribute attr=it.next();
    if (attr instanceof SearchAttributeGroup) {
      for (final Iterator<SearchAttribute> groupIterator=((SearchAttributeGroup)attr).getSearchAttributes().iterator(); groupIterator.hasNext(); ) {
        final SearchAttribute item=groupIterator.next();
        if (item instanceof SourceSearchAttribute) {
          sources.add((SourceSearchAttribute)item);
          groupIterator.remove();
          hasGraphSources=true;
        }
        if (item instanceof EmptySearchAttribute) {
          hasEmptySearchFields=true;
        }
      }
    }
    if (attr instanceof DistanceSearchAttribute) {
      final DistanceSearchAttribute distanceSearch=(DistanceSearchAttribute)attr;
      final GeoCodingResult coords=GeoHelper.geocode(distanceSearch);
      if (coords != null) {
        distanceSearch.setCoords(coords.toArray());
      }
      hasSpatialSource=true;
    }
    if (attr instanceof SourceSearchAttribute) {
      sources.add((SourceSearchAttribute)attr);
      hasGraphSources=true;
    }
    if (attr instanceof EmptySearchAttribute) {
      hasEmptySearchFields=true;
    }
  }
  if (!hasSpatialSource && !sources.isEmpty()) {
    intermediateResult=new Result(new ArrayList<>(),null,false,false);
  }
 else {
    if (sortKey != null && !doNotSort) {
      rootGroup.setSortKey(sortKey);
      rootGroup.sortDescending(sortDescending);
    }
    final Iterable hits=getIndex().query(rootGroup);
    intermediateResult=factory.instantiate(hits);
  }
  if (intermediateResult != null && (hasEmptySearchFields || hasGraphSources || hasSpatialSource)) {
    final Set<GraphObject> intermediateResultSet=new LinkedHashSet<>(intermediateResult.getResults());
    final List<GraphObject> finalResult=new ArrayList<>();
    int resultCount=0;
    if (hasGraphSources) {
      final Set<GraphObject> mergedSources=mergeSources(sources);
      if (hasSpatialSource) {
        intermediateResultSet.retainAll(mergedSources);
      }
 else {
        intermediateResultSet.addAll(mergedSources);
      }
    }
    for (    final GraphObject obj : intermediateResultSet) {
      boolean addToResult=true;
      for (      SearchAttribute attr : rootGroup.getSearchAttributes()) {
        addToResult&=attr.includeInResult(obj);
      }
      if (addToResult) {
        finalResult.add(obj);
        resultCount++;
      }
    }
    Collections.sort(finalResult,new GraphObjectComparator(sortKey,sortDescending));
    return new Result(PagingHelper.subList(finalResult,pageSize,page,offsetId),resultCount,true,false);
  }
 else {
    return intermediateResult;
  }
}
