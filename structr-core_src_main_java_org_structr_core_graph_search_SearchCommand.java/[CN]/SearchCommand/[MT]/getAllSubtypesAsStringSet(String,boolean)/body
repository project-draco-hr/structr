{
  Set<String> allSubtypes=subtypeMapForType.get(type);
  if (allSubtypes == null || baseTypes.contains(type) || directOnly) {
    allSubtypes=new LinkedHashSet<>();
    if (!directOnly) {
      subtypeMapForType.put(type,allSubtypes);
    }
    final ConfigurationProvider configuration=StructrApp.getConfiguration();
    final Map<String,Class<? extends NodeInterface>> nodeEntities=configuration.getNodeEntities();
    final Map<String,Class<? extends RelationshipInterface>> relEntities=configuration.getRelationshipEntities();
    allSubtypes.add(type);
    for (    Map.Entry<String,Class<? extends NodeInterface>> entity : nodeEntities.entrySet()) {
      final Class entityType=entity.getValue();
      final Set<Class> ancestors=typeAndAllSupertypes(entityType,directOnly);
      for (      final Class superClass : ancestors) {
        final String superClasSimpleName=superClass.getSimpleName();
        final String superClassFullName=superClass.getName();
        if ((superClassFullName.startsWith("org.structr.") || superClassFullName.startsWith("com.structr.")) && superClasSimpleName.equals(type)) {
          allSubtypes.add(entityType.getSimpleName());
        }
      }
    }
    for (    Map.Entry<String,Class<? extends RelationshipInterface>> entity : relEntities.entrySet()) {
      final Class entityType=entity.getValue();
      final Set<Class> ancestors=typeAndAllSupertypes(entityType);
      for (      final Class superClass : ancestors) {
        final String superClasSimpleName=superClass.getSimpleName();
        final String superClassFullName=superClass.getName();
        if ((superClassFullName.startsWith("org.structr.") || superClassFullName.startsWith("com.structr.")) && superClasSimpleName.equals(type)) {
          allSubtypes.add(entityType.getSimpleName());
        }
      }
    }
  }
  return allSubtypes;
}
