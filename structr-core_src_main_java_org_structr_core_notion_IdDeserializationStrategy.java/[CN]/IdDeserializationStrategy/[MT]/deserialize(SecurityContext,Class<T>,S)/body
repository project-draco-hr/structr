{
  final App app=StructrApp.getInstance(securityContext);
  if (source != null) {
    if (source instanceof JsonInput) {
      final JsonInput properties=(JsonInput)source;
      final PropertyMap map=PropertyMap.inputTypeToJavaType(securityContext,type,properties.getAttributes());
      T relatedNode=null;
      if (map.containsKey(GraphObject.id)) {
        relatedNode=(T)app.get(map.get(GraphObject.id));
      }
 else {
        final PropertyMap uniqueKeyValues=new PropertyMap();
        for (        final PropertyKey key : map.keySet()) {
          if (key.isUnique()) {
            uniqueKeyValues.put(key,map.get(key));
          }
        }
        if (!uniqueKeyValues.isEmpty()) {
          final List<T> possibleResults=app.nodeQuery(type).and(uniqueKeyValues).getAsList();
          final int num=possibleResults.size();
switch (num) {
case 0:
            break;
case 1:
          relatedNode=possibleResults.get(0);
        break;
default :
      throw new FrameworkException(type.getSimpleName(),new AmbiguousRelationToken(propertyKey));
  }
}
}
if (relatedNode == null) {
if (relationProperty != null) {
  final Relation relation=relationProperty.getRelation();
  if (relation != null) {
switch (relation.getCascadingDeleteFlag()) {
case Relation.ALWAYS:
case Relation.CONSTRAINT_BASED:
case Relation.SOURCE_TO_TARGET:
      return app.create(type,map);
case Relation.TARGET_TO_SOURCE:
    logger.log(Level.INFO,"NOT creating related node for property {0} since cascading delete flag is TARGET_TO_SOURCE.",propertyKey);
  throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
case Relation.NONE:
logger.log(Level.INFO,"NOT creating related node for property {0} since cascading delete flag is NONE.",propertyKey);
throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
}
}
}
logger.log(Level.INFO,"NOT creating related node for property {0} since no relation property was found.",propertyKey);
throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
}
 else {
return relatedNode;
}
}
 else if (source instanceof GraphObject) {
Thread.dumpStack();
GraphObject obj=(GraphObject)source;
if (propertyKey != null) {
final Result<T> results=(Result<T>)app.nodeQuery(NodeInterface.class).and(propertyKey,obj.getProperty(propertyKey)).getResult();
int size=results.size();
switch (size) {
case 0:
throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
case 1:
return results.get(0);
default :
logger.log(Level.WARNING,"Got more than one result for UUID {0}. Either this is not an UUID or we have a collision.",source.toString());
}
}
 else {
PropertyKey<String> idProperty=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(obj.getClass(),GraphObject.id.dbName());
return (T)app.get(obj.getProperty(idProperty));
}
}
 else {
return (T)app.get(source.toString());
}
}
return null;
}
