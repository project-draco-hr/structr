{
  final App app=StructrApp.getInstance(securityContext);
  if (source != null) {
    Result<T> results=Result.EMPTY_RESULT;
    if (source instanceof JsonInput) {
      JsonInput properties=(JsonInput)source;
      PropertyMap map=PropertyMap.inputTypeToJavaType(securityContext,type,properties.getAttributes());
      if (map.containsKey(GraphObject.uuid)) {
        return (T)app.get(map.get(GraphObject.uuid));
      }
 else {
        throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
      }
    }
 else     if (source instanceof GraphObject) {
      GraphObject obj=(GraphObject)source;
      if (propertyKey != null) {
        results=(Result<T>)app.nodeQuery(NodeInterface.class).and(propertyKey,obj.getProperty(propertyKey)).getResult();
      }
 else {
        PropertyKey<String> idProperty=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(obj.getClass(),AbstractNode.uuid.dbName());
        return (T)app.get(obj.getProperty(idProperty));
      }
    }
 else {
      return (T)app.get(source.toString());
    }
    int size=results.size();
switch (size) {
case 0:
      throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
case 1:
    return results.get(0);
default :
  logger.log(Level.WARNING,"Got more than one result for UUID {0}. Either this is not an UUID or we have a collision.",source.toString());
}
}
 else if (createIfNotExisting) {
try {
app.beginTx();
final T newNode=app.create(type);
app.commitTx();
return newNode;
}
 catch (FrameworkException fex) {
logger.log(Level.WARNING,"Unable to create node of type {0} for property {1}",new Object[]{type.getSimpleName(),propertyKey.dbName()});
}
 finally {
app.finishTx();
}
}
return null;
}
