{
  final App app=StructrApp.getInstance(securityContext);
  if (source != null) {
    if (source instanceof JsonInput) {
      final JsonInput properties=(JsonInput)source;
      final PropertyMap map=PropertyMap.inputTypeToJavaType(securityContext,type,properties.getAttributes());
      T relatedNode=null;
      if (map.containsKey(GraphObject.id)) {
        relatedNode=(T)app.getNodeById(map.get(GraphObject.id));
        if (relatedNode != null && !type.isAssignableFrom(relatedNode.getClass())) {
          throw new FrameworkException(type.getSimpleName(),new TypeToken(AbstractNode.base,type.getSimpleName()));
        }
      }
 else {
        final PropertyMap uniqueKeyValues=new PropertyMap();
        for (        final PropertyKey key : map.keySet()) {
          if (key.isUnique()) {
            uniqueKeyValues.put(key,map.get(key));
          }
        }
        if (!uniqueKeyValues.isEmpty()) {
          final List<T> possibleResults=app.nodeQuery(type).and(uniqueKeyValues).getAsList();
          final int num=possibleResults.size();
switch (num) {
case 0:
            break;
case 1:
          relatedNode=possibleResults.get(0);
        break;
default :
      throw new FrameworkException(422,concat("Unable to resolve related node of type ",type.getSimpleName(),", ambiguous result: found ",num," nodes for the given property set."));
  }
}
 else {
}
}
if (relatedNode == null) {
if (relationProperty != null) {
  final Relation relation=relationProperty.getRelation();
  if (relationProperty.doAutocreate()) {
    return app.create(type,map);
  }
 else {
    throw new FrameworkException(422,concat("Cannot create ",relation.getOtherType(type).getSimpleName(),": no matching ",type.getSimpleName()," found for the given property set"," and autoCreate has a value of ",relationProperty.getAutocreateFlagName()));
  }
}
throw new FrameworkException(500,concat("Unable to resolve related node of type ",type.getSimpleName(),", no relation defined."));
}
 else {
return relatedNode;
}
}
 else if (type.isAssignableFrom(source.getClass())) {
return (T)source;
}
 else {
final GraphObject obj=app.getNodeById(source.toString());
if (obj != null && !type.isAssignableFrom(obj.getClass())) {
throw new FrameworkException(type.getSimpleName(),new TypeToken(AbstractNode.base,type.getSimpleName()));
}
return (T)obj;
}
}
return null;
}
