{
  if (attributes != null) {
    List<SearchAttribute> attrs=new LinkedList<>();
    if (attributes.containsKey(GraphObject.uuid)) {
      attrs.add(Search.andExactUuid(attributes.get(GraphObject.uuid)));
    }
 else {
      boolean attributesComplete=true;
      for (      PropertyKey key : propertyKeys) {
        attributesComplete&=attributes.containsKey(key);
      }
      if (attributesComplete) {
        attrs.add(Search.andExactTypeAndSubtypes(type));
        for (        Entry<PropertyKey,Object> entry : attributes.entrySet()) {
          attrs.add(Search.andExactProperty(securityContext,entry.getKey(),entry.getValue() != null ? entry.getValue().toString() : null));
        }
      }
    }
    Result<T> result=Services.command(securityContext,SearchNodeCommand.class).execute(attrs);
    int size=result.size();
switch (size) {
case 0:
      if (createIfNotExisting) {
        attributes.put(AbstractNode.type,type.getSimpleName());
        T newNode=(T)Services.command(securityContext,CreateNodeCommand.class).execute(attributes);
        if (newNode != null) {
          return newNode;
        }
      }
    break;
case 1:
  return getTypedResult(result,type);
default :
logger.log(Level.SEVERE,"Found {0} nodes for given type and properties, property set is ambiguous!\n" + "This is often due to wrong modeling, or you should consider creating a uniquness constraint for " + type.getName(),size);
break;
}
throw new FrameworkException(type.getSimpleName(),new PropertiesNotFoundToken(AbstractNode.base,attributes));
}
return null;
}
