{
  final App app=StructrApp.getInstance(securityContext);
  if (attributes != null) {
    Result<T> result=Result.EMPTY_RESULT;
    if (attributes.containsKey(GraphObject.id)) {
      result=new Result(app.get(attributes.get(GraphObject.id)),false);
    }
 else {
      boolean attributesComplete=true;
      for (      PropertyKey key : propertyKeys) {
        attributesComplete&=attributes.containsKey(key);
      }
      if (attributesComplete) {
        final PropertyMap searchAttributes=new PropertyMap();
        for (        final PropertyKey key : attributes.keySet()) {
          if (key.relatedType() == null) {
            searchAttributes.put(key,attributes.get(key));
          }
        }
        result=app.nodeQuery(type).and(searchAttributes).getResult();
      }
    }
    final int size=result.size();
switch (size) {
case 0:
      if (createIfNotExisting) {
        T newNode=app.create(type,attributes);
        if (newNode != null) {
          return newNode;
        }
      }
    break;
case 1:
  return getTypedResult(result,type);
default :
logger.log(Level.SEVERE,"Found {0} nodes for given type and properties, property set is ambiguous!\n" + "This is often due to wrong modeling, or you should consider creating a uniquness constraint for " + type.getName(),size);
break;
}
throw new FrameworkException(type.getSimpleName(),new PropertiesNotFoundToken(AbstractNode.base,attributes));
}
return null;
}
