{
  List<SearchAttribute> attrs=new LinkedList();
  attrs.add(Search.andExactTypeAndSubtypes(type));
  Map<String,Object> sourceMap=new LinkedHashMap<String,Object>();
  sourceMap.put(propertyKey.jsonName(),source);
  PropertyMap convertedSourceMap=PropertyMap.inputTypeToJavaType(securityContext,type,sourceMap);
  Object convertedSource=convertedSourceMap.get(propertyKey);
  if (convertedSource != null) {
    if (convertedSource instanceof JsonInput) {
      Object value=((JsonInput)convertedSource).getAttributes().get(propertyKey.jsonName());
      if (value != null) {
        String stringValue=value.toString();
        attrs.add(Search.andExactProperty(securityContext,propertyKey,stringValue));
      }
    }
 else     if (convertedSource instanceof GraphObject) {
      GraphObject obj=(GraphObject)convertedSource;
      if (propertyKey != null) {
        attrs.add(Search.andExactProperty(securityContext,propertyKey,obj.getProperty(propertyKey)));
      }
 else {
        PropertyKey<String> idProperty=EntityContext.getPropertyKeyForDatabaseName(obj.getClass(),AbstractNode.uuid.dbName());
        attrs.add(Search.andExactUuid(obj.getProperty(idProperty)));
      }
    }
 else {
      attrs.add(Search.andExactProperty(securityContext,propertyKey,convertedSource));
    }
  }
  Result result=Services.command(securityContext,SearchNodeCommand.class).execute(attrs);
  int resultCount=result.size();
switch (resultCount) {
case 0:
    if ((convertedSource != null) && createIfNotExisting) {
      NodeInterface newNode=Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,type.getSimpleName()),new NodeAttribute(propertyKey,convertedSource));
      if (newNode != null) {
        return newNode;
      }
    }
 else {
      logger.log(Level.WARNING,"Unable to create node of type {0} for property {1}",new Object[]{type.getSimpleName(),propertyKey.jsonName()});
    }
  break;
case 1:
GraphObject obj=result.get(0);
if (!type.isAssignableFrom(obj.getClass())) {
throw new FrameworkException("base",new TypeToken(propertyKey,type.getSimpleName()));
}
return obj;
}
if (convertedSource != null) {
Map<PropertyKey,Object> attributes=new LinkedHashMap<>();
attributes.put(propertyKey,convertedSource);
attributes.put(AbstractNode.type,type.getSimpleName());
throw new FrameworkException(type.getSimpleName(),new PropertiesNotFoundToken(AbstractNode.base,attributes));
}
return null;
}
