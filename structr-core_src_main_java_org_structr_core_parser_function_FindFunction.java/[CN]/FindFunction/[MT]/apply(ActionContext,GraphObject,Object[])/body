{
  if (sources != null) {
    final SecurityContext securityContext=ctx.getSecurityContext();
    final ConfigurationProvider config=StructrApp.getConfiguration();
    final Query query=StructrApp.getInstance(securityContext).nodeQuery().sort(GraphObject.createdDate).order(false);
    Class type=null;
    if (sources.length >= 1 && sources[0] != null) {
      final String typeString=sources[0].toString();
      type=config.getNodeEntityClass(typeString);
      if (type != null) {
        query.andTypes(type);
      }
 else {
        return "Error in find(): type " + typeString + " not found.";
      }
    }
    if (type == null) {
      return "Error in find(): no type specified.";
    }
    if (sources.length == 2 && sources[1] instanceof Map) {
      query.and(PropertyMap.inputTypeToJavaType(securityContext,type,(Map)sources[1]));
    }
 else     if (sources.length == 2) {
      final PropertyKey key=config.getPropertyKeyForJSONName(type,"id");
      query.and(key,sources[1].toString());
      final int resultCount=query.getResult().size();
      if (resultCount == 1) {
        return query.getFirst();
      }
 else       if (resultCount == 0) {
        return null;
      }
 else {
        throw new FrameworkException(400,"Multiple Objects found for id! [" + sources[1].toString() + "]");
      }
    }
 else {
      final Integer parameter_count=sources.length;
      if (parameter_count % 2 == 0) {
        throw new FrameworkException(400,"Invalid number of parameters: " + parameter_count + ". Should be uneven: "+ ERROR_MESSAGE_FIND);
      }
      for (Integer c=1; c < parameter_count; c+=2) {
        final PropertyKey key=config.getPropertyKeyForJSONName(type,sources[c].toString());
        if (key != null) {
          if (!key.isSearchable()) {
            throw new FrameworkException(400,"Search key " + key.jsonName() + " is not indexed.");
          }
          final PropertyConverter inputConverter=key.inputConverter(securityContext);
          Object value=sources[c + 1];
          if (inputConverter != null) {
            value=inputConverter.convert(value);
          }
          query.and(key,value);
        }
      }
    }
    return query.getAsList();
  }
  return "";
}
