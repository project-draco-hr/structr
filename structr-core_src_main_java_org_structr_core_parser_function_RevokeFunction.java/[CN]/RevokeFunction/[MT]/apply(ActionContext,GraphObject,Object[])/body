{
  if (arrayHasLengthAndAllElementsNotNull(sources,3)) {
    if (sources[0] instanceof Principal) {
      final Principal principal=(Principal)sources[0];
      if (sources[1] instanceof AbstractNode) {
        final AbstractNode node=(AbstractNode)sources[1];
        if (sources[2] instanceof String) {
          final String[] parts=((String)sources[2]).split("[,]+");
          for (          final String part : parts) {
            final String trimmedPart=part.trim();
            if (trimmedPart.length() > 0) {
              final Permission permission=Permissions.valueOf(trimmedPart);
              if (permission != null) {
                node.revoke(permission,principal);
              }
 else {
                logger.log(Level.WARNING,"Error: unknown permission \"{0}\". Parameters: {1}",new Object[]{trimmedPart,getParametersAsString(sources)});
                return "Error: unknown permission " + trimmedPart;
              }
            }
          }
          return "";
        }
 else {
          logger.log(Level.WARNING,"Error: third argument is not a string. Parameters: {0}",getParametersAsString(sources));
          return "Error: third argument is not a string.";
        }
      }
 else {
        logger.log(Level.WARNING,"Error: second argument is not a node. Parameters: {0}",getParametersAsString(sources));
        return "Error: second argument is not a node.";
      }
    }
 else {
      logger.log(Level.WARNING,"Error: first argument is not of type Principal. Parameters: {0}",getParametersAsString(sources));
      return "Error: first argument is not of type Principal.";
    }
  }
 else {
    logParameterError(sources,ctx.isJavaScriptContext());
    return usage(ctx.isJavaScriptContext());
  }
}
