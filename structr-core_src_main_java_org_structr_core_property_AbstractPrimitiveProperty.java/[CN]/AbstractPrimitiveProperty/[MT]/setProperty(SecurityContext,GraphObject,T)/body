{
  final PropertyConverter converter=databaseConverter(securityContext,obj);
  final Object convertedValue;
  if (converter != null) {
    convertedValue=converter.convert(value);
  }
 else {
    convertedValue=value;
  }
  final PropertyContainer propertyContainer=obj.getPropertyContainer();
  if (propertyContainer != null) {
    if (!TransactionCommand.inTransaction()) {
      logger.log(Level.SEVERE,"setProperty outside of transaction");
      throw new FrameworkException(500,"setProperty outside of transaction.");
    }
    boolean internalSystemPropertiesUnlocked=false;
    if (obj instanceof AbstractNode) {
      if (!unvalidated) {
        TransactionCommand.nodeModified(securityContext.getCachedUser(),(AbstractNode)obj,AbstractPrimitiveProperty.this,propertyContainer.hasProperty(dbName()) ? propertyContainer.getProperty(dbName()) : null,value);
      }
      internalSystemPropertiesUnlocked=((AbstractNode)obj).internalSystemPropertiesUnlocked;
    }
 else     if (obj instanceof AbstractRelationship) {
      if (!unvalidated) {
        TransactionCommand.relationshipModified(securityContext.getCachedUser(),(AbstractRelationship)obj,AbstractPrimitiveProperty.this,propertyContainer.hasProperty(dbName()) ? propertyContainer.getProperty(dbName()) : null,value);
      }
      internalSystemPropertiesUnlocked=((AbstractRelationship)obj).internalSystemPropertiesUnlocked;
    }
    try {
      if (convertedValue == null) {
        propertyContainer.removeProperty(dbName());
      }
 else {
        if (!isSystemInternal() || internalSystemPropertiesUnlocked) {
          propertyContainer.setProperty(dbName(),convertedValue);
        }
 else {
          logger.log(Level.WARNING,"Tried to set internal system property {0} to {1}. Action was denied.",new Object[]{dbName(),convertedValue});
        }
      }
      updateAccessInformation(securityContext,propertyContainer);
    }
 catch (    Throwable t) {
      final FrameworkException fex=new FrameworkException(500,"Unable to set property " + jsonName() + " on entity with ID "+ obj.getUuid()+ ": "+ t.toString());
      fex.initCause(t);
      throw fex;
    }
    if (isIndexed()) {
      if (!isPassivelyIndexed()) {
        index(obj,convertedValue);
      }
    }
  }
  return null;
}
