{
  PropertyConverter converter=databaseConverter(securityContext,obj);
  final Object convertedValue;
  if (converter != null) {
    convertedValue=converter.convert(value);
  }
 else {
    convertedValue=value;
  }
  final PropertyContainer propertyContainer=obj.getPropertyContainer();
  if (propertyContainer != null) {
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        try {
          if (!isSystemProperty) {
            if (obj instanceof AbstractNode) {
              TransactionCommand.nodeModified((AbstractNode)obj);
            }
 else             if (obj instanceof AbstractRelationship) {
              TransactionCommand.relationshipModified((AbstractRelationship)obj);
            }
            TransactionCommand.nonSystemProperty();
          }
          if (convertedValue == null) {
            propertyContainer.removeProperty(dbName());
          }
 else {
            if (!AbstractPrimitiveProperty.this.equals(AbstractNode.lastModifiedDate)) {
              propertyContainer.setProperty(dbName(),convertedValue);
              propertyContainer.setProperty(AbstractNode.lastModifiedDate.dbName(),System.currentTimeMillis());
            }
 else {
              logger.log(Level.FINE,"Tried to set lastModifiedDate explicitely (action was denied)");
            }
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
        }
 finally {
        }
        return null;
      }
    }
);
  }
}
