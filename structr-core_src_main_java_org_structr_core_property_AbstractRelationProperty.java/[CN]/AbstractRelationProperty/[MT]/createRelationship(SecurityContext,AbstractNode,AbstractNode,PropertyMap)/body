{
  final CreateRelationshipCommand<?> createRel=Services.command(securityContext,CreateRelationshipCommand.class);
  final DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  if ((sourceNode != null) && (targetNode != null)) {
    final AbstractNode finalTargetNode=targetNode;
    final AbstractNode finalSourceNode=(AbstractNode)sourceNode;
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        PropertyMap props=new PropertyMap(properties);
        AbstractRelationship newRel=null;
        if (getCascadeDelete() > 0) {
          props.put(AbstractRelationship.cascadeDelete,new Integer(getCascadeDelete()));
        }
        if (getDirection().equals(Direction.OUTGOING)) {
          String tripleKey=EntityContext.createCombinedRelationshipType(declaringClass.getSimpleName(),relType.name(),destType.getSimpleName());
          props.put(AbstractRelationship.combinedType,Search.clean(tripleKey));
          newRel=createRel.execute(sourceNode,finalTargetNode,getRelType(),props,false);
        }
 else {
          String tripleKey=EntityContext.createCombinedRelationshipType(destType.getSimpleName(),relType.name(),declaringClass.getSimpleName());
          props.put(AbstractRelationship.combinedType,Search.clean(tripleKey));
          newRel=createRel.execute(finalTargetNode,sourceNode,getRelType(),props,false);
        }
        if (newRel != null) {
          FactoryDefinition factoryDefinition=EntityContext.getFactoryDefinition();
switch (getCardinality()) {
case OneToOne:
            ensureManyToOne(finalSourceNode,finalTargetNode,newRel,factoryDefinition,deleteRel);
          ensureOneToMany(finalSourceNode,finalTargetNode,newRel,factoryDefinition,deleteRel);
        break;
case ManyToOne:
      ensureManyToOne(finalSourceNode,finalTargetNode,newRel,factoryDefinition,deleteRel);
    break;
case OneToMany:
  ensureOneToMany(finalSourceNode,finalTargetNode,newRel,factoryDefinition,deleteRel);
break;
}
}
return newRel;
}
}
;
Services.command(securityContext,TransactionCommand.class).execute(transaction);
}
 else {
String type="unknown";
if (sourceNode != null) {
type=sourceNode.getType();
}
 else if (targetNode != null) {
type=targetNode.getType();
}
if (sourceNode == null) {
logger.log(Level.WARNING,"No source node!");
throw new FrameworkException(type,new IdNotFoundToken(sourceNode));
}
if (targetNode == null) {
logger.log(Level.WARNING,"No target node!");
throw new FrameworkException(type,new IdNotFoundToken(targetNode));
}
}
}
