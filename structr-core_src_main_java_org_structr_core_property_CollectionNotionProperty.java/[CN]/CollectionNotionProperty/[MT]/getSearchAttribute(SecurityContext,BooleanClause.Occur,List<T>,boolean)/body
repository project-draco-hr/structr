{
  SourceSearchAttribute attr=new SourceSearchAttribute(occur);
  Set<GraphObject> intersectionResult=new LinkedHashSet<GraphObject>();
  CollectionProperty collectionProperty=(CollectionProperty)base;
  boolean alreadyAdded=false;
  try {
    if (searchValues != null && !searchValues.isEmpty()) {
      boolean allBlank=true;
      for (      T searchValue : searchValues) {
        if (StringUtils.isBlank(searchValue.toString())) {
          continue;
        }
 else {
          allBlank=false;
        }
        Result<AbstractNode> result=Services.command(securityContext,SearchNodeCommand.class).execute(Search.andExactType(base.relatedType().getSimpleName()),Search.andExactProperty(securityContext,notion.getPrimaryPropertyKey(),searchValue));
        for (        AbstractNode node : result.getResults()) {
switch (occur) {
case MUST:
            if (!alreadyAdded) {
              intersectionResult.addAll(collectionProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
              alreadyAdded=true;
            }
 else {
              intersectionResult.retainAll(collectionProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
            }
          break;
case SHOULD:
        intersectionResult.addAll(collectionProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
      break;
case MUST_NOT:
    break;
}
}
}
if (allBlank) {
return new EmptySearchAttribute(this,Collections.emptyList());
}
 else {
attr.setResult(new LinkedList<GraphObject>(intersectionResult));
}
}
 else {
return new EmptySearchAttribute(this,Collections.emptyList());
}
}
 catch (FrameworkException fex) {
fex.printStackTrace();
}
return attr;
}
