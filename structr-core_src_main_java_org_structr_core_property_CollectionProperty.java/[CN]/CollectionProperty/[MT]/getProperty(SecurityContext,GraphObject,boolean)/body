{
  if (obj instanceof AbstractNode) {
    AbstractNode node=(AbstractNode)obj;
    if (cardinality.equals(Relation.Cardinality.OneToMany) || cardinality.equals(Relation.Cardinality.ManyToMany)) {
      NodeFactory nodeFactory=new NodeFactory(securityContext,false,false);
      Class destinationType=getDestType();
      List<T> nodes=new LinkedList<T>();
      Node dbNode=node.getNode();
      String destTypeString=destinationType.getSimpleName();
      String typeString=AbstractNode.type.dbName();
      try {
        for (        Relationship rel : dbNode.getRelationships(getRelType(),getDirection())) {
          Node otherNode=rel.getOtherNode(dbNode);
          if (otherNode.hasProperty(typeString) && ((String)otherNode.getProperty(typeString)).equals(destTypeString)) {
            nodes.add((T)nodeFactory.createNode(otherNode));
          }
        }
        return nodes;
      }
 catch (      Throwable t) {
        logger.log(Level.WARNING,"Unable to fetch related node: {0}",t.getMessage());
      }
    }
 else {
      logger.log(Level.WARNING,"Requested related nodes with wrong cardinality {0} between {1} and {2}",new Object[]{getCardinality().name(),node.getClass().getSimpleName(),getDestType()});
    }
  }
 else {
    logger.log(Level.WARNING,"Property {0} is registered on illegal type {1}",new Object[]{this,obj.getClass()});
  }
  return Collections.emptyList();
}
