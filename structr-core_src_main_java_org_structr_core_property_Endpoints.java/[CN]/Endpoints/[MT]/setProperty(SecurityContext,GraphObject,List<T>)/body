{
  if (obj instanceof AbstractNode) {
    Set<T> toBeDeleted=new LinkedHashSet<T>(getProperty(securityContext,obj,true));
    Set<T> toBeCreated=new LinkedHashSet<T>();
    AbstractNode sourceNode=(AbstractNode)obj;
    if (collection != null) {
      toBeCreated.addAll(collection);
    }
    Set<T> intersection=new LinkedHashSet<T>(toBeCreated);
    intersection.retainAll(toBeDeleted);
    toBeCreated.removeAll(intersection);
    toBeDeleted.removeAll(intersection);
    for (    T targetNode : toBeDeleted) {
      removeRelationship(securityContext,sourceNode,(AbstractNode)targetNode);
    }
    for (    T targetNode : toBeCreated) {
      createRelationship(securityContext,sourceNode,(AbstractNode)targetNode);
    }
  }
 else {
    logger.log(Level.WARNING,"Property {0} is registered on illegal type {1}",new Object[]{this,obj.getClass()});
  }
}
