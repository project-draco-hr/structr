{
  SourceSearchAttribute attr=new SourceSearchAttribute(occur);
  Set<GraphObject> intersectionResult=new LinkedHashSet<>();
  boolean alreadyAdded=false;
  try {
    if (searchValue != null && !StringUtils.isBlank(searchValue.toString())) {
      if (exactMatch) {
        Result<AbstractNode> result=Services.command(securityContext,SearchNodeCommand.class).execute(Search.andExactTypeAndSubtypes(base.relatedType(),exactMatch),Search.andExactProperty(securityContext,notion.getPrimaryPropertyKey(),searchValue));
        for (        AbstractNode node : result.getResults()) {
switch (occur) {
case MUST:
            if (!alreadyAdded) {
              alreadyAdded=true;
            }
 else {
            }
          break;
case SHOULD:
        break;
case MUST_NOT:
      break;
  }
}
}
 else {
Result<AbstractNode> result=Services.command(securityContext,SearchNodeCommand.class).execute(Search.andExactTypeAndSubtypes(base.relatedType(),exactMatch),Search.andProperty(securityContext,notion.getPrimaryPropertyKey(),searchValue));
for (AbstractNode node : result.getResults()) {
}
}
attr.setResult(new LinkedList<GraphObject>(intersectionResult));
}
 else {
return new EmptySearchAttribute(this,null);
}
}
 catch (FrameworkException fex) {
fex.printStackTrace();
}
return attr;
}
