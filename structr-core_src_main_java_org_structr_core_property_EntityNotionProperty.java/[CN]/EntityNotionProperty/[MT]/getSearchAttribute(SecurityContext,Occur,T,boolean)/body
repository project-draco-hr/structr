{
  SourceSearchAttribute attr=new SourceSearchAttribute(occur);
  Set<GraphObject> intersectionResult=new LinkedHashSet<GraphObject>();
  EntityProperty entityProperty=(EntityProperty)base;
  boolean alreadyAdded=false;
  try {
    Result<AbstractNode> result=Services.command(securityContext,SearchNodeCommand.class).execute(Search.andExactType(base.relatedType().getSimpleName()),Search.andExactProperty(securityContext,notion.getPrimaryPropertyKey(),searchValue));
    for (    AbstractNode node : result.getResults()) {
switch (occur) {
case MUST:
        if (!alreadyAdded) {
          intersectionResult.addAll(entityProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
          alreadyAdded=true;
        }
 else {
          intersectionResult.retainAll(entityProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
        }
      break;
case SHOULD:
    intersectionResult.addAll(entityProperty.getRelatedNodesReverse(securityContext,node,declaringClass));
  break;
case MUST_NOT:
break;
}
}
attr.setResult(new LinkedList<GraphObject>(intersectionResult));
}
 catch (FrameworkException fex) {
fex.printStackTrace();
}
return attr;
}
