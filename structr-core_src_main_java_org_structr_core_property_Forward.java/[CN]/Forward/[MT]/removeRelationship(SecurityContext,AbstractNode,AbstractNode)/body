{
  final DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  if ((sourceNode != null) && (targetNode != null)) {
    final AbstractNode finalTargetNode=targetNode;
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
switch (getCardinality()) {
case ManyToOne:
case OneToOne:
{
            String destType=finalTargetNode.getType();
            for (            AbstractRelationship rel : sourceNode.getIncomingRelationships(Forward.this.relationClass)) {
              if (rel.getOtherNode(sourceNode).getType().equals(destType)) {
                deleteRel.execute(rel);
              }
            }
            break;
          }
case OneToMany:
{
          String sourceType=sourceNode.getType();
          for (          AbstractRelationship rel : finalTargetNode.getIncomingRelationships(Forward.this.relationClass)) {
            if (rel.getOtherNode(finalTargetNode).getType().equals(sourceType)) {
              deleteRel.execute(rel);
            }
          }
        }
case ManyToMany:
{
        for (        AbstractRelationship rel : finalTargetNode.getAllRelationships(Forward.this.relationClass)) {
          if (rel.getOtherNode(finalTargetNode).equals(sourceNode)) {
            deleteRel.execute(rel);
          }
        }
      }
  }
  return null;
}
}
;
Services.command(securityContext,TransactionCommand.class).execute(transaction);
}
 else {
String type="unknown";
if (sourceNode != null) {
type=sourceNode.getType();
}
 else if (targetNode != null) {
type=targetNode.getType();
}
throw new FrameworkException(type,new IdNotFoundToken(targetNode));
}
}
