{
  if (StringUtils.startsWith(requestParameter,"[") && StringUtils.endsWith(requestParameter,"]")) {
    Matcher matcher=rangeQueryPattern.matcher(requestParameter);
    if (matcher.matches()) {
      if (matcher.groupCount() == 2) {
        String rangeStart=matcher.group(1);
        String rangeEnd=matcher.group(2);
        PropertyConverter inputConverter=inputConverter(securityContext);
        Object rangeStartConverted=rangeStart;
        Object rangeEndConverted=rangeEnd;
        if (inputConverter != null) {
          rangeStartConverted=inputConverter.convert(rangeStartConverted);
          rangeEndConverted=inputConverter.convert(rangeEndConverted);
        }
        query.andRange(this,rangeStartConverted,rangeEndConverted);
        return;
      }
      logger.log(Level.WARNING,"Unable to determine range query bounds for {0}",requestParameter);
    }
 else {
      if ("[]".equals(requestParameter)) {
        if (isIndexedWhenEmpty()) {
          query.notBlank(this);
          return;
        }
 else {
          throw new FrameworkException(400,"PropertyKey " + jsonName() + " must be indexedWhenEmpty() to be used in not-blank search query.");
        }
      }
    }
  }
  if (requestParameter.contains(",") && requestParameter.contains(";")) {
    throw new FrameworkException(422,"Mixing of AND and OR not allowed in request parameters");
  }
  if (requestParameter.contains(";")) {
    if (multiValueSplitAllowed()) {
      query.and();
      for (      final String part : requestParameter.split("[;]+")) {
        query.or(this,convertSearchValue(securityContext,part));
      }
      query.parent();
    }
 else {
      query.or(this,convertSearchValue(securityContext,requestParameter));
    }
  }
 else {
    query.and(this,convertSearchValue(securityContext,requestParameter));
  }
}
