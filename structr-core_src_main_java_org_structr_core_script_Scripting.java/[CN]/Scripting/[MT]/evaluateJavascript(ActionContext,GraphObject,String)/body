{
  final Context scriptingContext=Context.enter();
  try {
    scriptingContext.setLanguageVersion(Context.VERSION_1_2);
    Scriptable scope=scriptingContext.initStandardObjects();
    final StructrScriptable scriptable=new StructrScriptable(actionContext,entity);
    scriptable.setParentScope(scope);
    scope.put("Structr",scope,scriptable);
    actionContext.clear();
    Object extractedValue=scriptingContext.evaluateString(scope,embedInFunction(script),"script source [" + (!((NodeInterface)entity).getName().equals("") ? "\"" + ((NodeInterface)entity).getName() + "\":" : "") + entity.getUuid()+ "], line ",1,null);
    if (scriptable.hasException()) {
      throw scriptable.getException();
    }
    final String output=actionContext.getOutput();
    if (output != null && !output.isEmpty()) {
      extractedValue=output;
    }
    if (extractedValue == null || extractedValue == Undefined.instance) {
      extractedValue=scriptable.unwrap(scope.get("_structrMainResult",scope));
    }
    if (extractedValue == null || extractedValue == Undefined.instance) {
      extractedValue="";
    }
    return extractedValue;
  }
 catch (  final Throwable t) {
    actionContext.raiseError(entity.getType(),new ErrorToken(422,null){
      @Override public String getKey(){
        return "JavaScript error";
      }
      @Override public JsonElement getContent(){
        return new JsonPrimitive(getErrorToken());
      }
      @Override public String getErrorToken(){
        return t.getMessage();
      }
    }
);
  }
 finally {
    Context.exit();
  }
  return null;
}
