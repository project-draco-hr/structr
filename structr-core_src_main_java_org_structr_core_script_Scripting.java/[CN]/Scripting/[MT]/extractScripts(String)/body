{
  final List<String> expressions=new LinkedList<>();
  final int length=source.length();
  boolean inSingleQuotes=false;
  boolean inDoubleQuotes=false;
  boolean inTemplate=false;
  boolean hasDollar=false;
  int level=0;
  int start=0;
  int end=0;
  for (int i=0; i < length; i++) {
    final char c=source.charAt(i);
switch (c) {
case '\'':
      if (inTemplate) {
        inSingleQuotes=!inSingleQuotes;
      }
    hasDollar=false;
  break;
case '\"':
if (inTemplate) {
  inDoubleQuotes=!inDoubleQuotes;
}
hasDollar=false;
break;
case '$':
hasDollar=true;
break;
case '{':
if (!inTemplate && hasDollar) {
inTemplate=true;
start=i - 1;
}
 else if (!inSingleQuotes && !inDoubleQuotes) {
level++;
}
hasDollar=false;
break;
case '}':
if (!inSingleQuotes && !inDoubleQuotes && level-- == 0 && inTemplate) {
inTemplate=false;
end=i + 1;
expressions.add(source.substring(start,end));
level=0;
}
hasDollar=true;
break;
default :
hasDollar=false;
break;
}
}
return expressions;
}
