{
  if ("get".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        if (parameters.length > 0 && parameters[0] != null) {
          try {
            return wrap(thisObject,null,actionContext.evaluate(entity,parameters[0].toString(),null,null));
          }
 catch (          FrameworkException ex) {
            exception=ex;
          }
        }
        return null;
      }
    }
,null,0,0);
  }
  if ("print".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        actionContext.print(parameters);
        return null;
      }
    }
,null,0,0);
  }
  if ("clear".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        actionContext.clear();
        return null;
      }
    }
,null,0,0);
  }
  if ("log".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        if (parameters.length > 0 && parameters[0] != null) {
          final StringBuilder buf=new StringBuilder();
          for (          final Object obj : parameters) {
            buf.append(obj);
          }
          logger.log(Level.INFO,buf.toString());
        }
        return null;
      }
    }
,null,0,0);
  }
  final Function<Object,Object> function=Functions.functions.get(name);
  if (function != null) {
    return new IdFunctionObject(new FunctionWrapper(function),null,0,0);
  }
  return null;
}
