{
  if ("get".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        if (parameters.length > 0 && parameters[0] != null) {
          try {
            return wrap(context,thisObject,null,actionContext.evaluate(entity,parameters[0].toString(),null,null));
          }
 catch (          FrameworkException ex) {
            exception=ex;
          }
        }
        return null;
      }
    }
,null,0,0);
  }
  if ("clear".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        actionContext.clear();
        return null;
      }
    }
,null,0,0);
  }
  if ("this".equals(name)) {
    return wrap(null,start,null,entity);
  }
  if ("me".equals(name)) {
    return wrap(null,start,null,actionContext.getSecurityContext().getUser(false));
  }
  if ("vars".equals(name)) {
    NativeObject nobj=new NativeObject();
    for (    Map.Entry<String,Object> entry : actionContext.getAllVariables().entrySet()) {
      nobj.defineProperty(entry.getKey(),entry.getValue(),NativeObject.READONLY);
    }
    return nobj;
  }
  if ("include".equals(name) || "render".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        if (parameters.length > 0 && parameters[0] != null) {
          try {
            final Function func=Functions.functions.get(name);
            if (func != null) {
              actionContext.print(func.apply(actionContext,entity,parameters));
            }
            return null;
          }
 catch (          FrameworkException ex) {
            exception=ex;
          }
        }
        return null;
      }
    }
,null,0,0);
  }
  if ("call".equals(name)) {
    return new IdFunctionObject(new IdFunctionCall(){
      @Override public Object execIdCall(      final IdFunctionObject info,      final Context context,      final Scriptable scope,      final Scriptable thisObject,      final Object[] parameters){
        try {
          if (parameters.length > 0) {
            final String methodName=parameters[0].toString();
switch (parameters.length) {
case 0:
              break;
case 1:
            return Actions.call(methodName);
case 2:
          if (parameters[1] instanceof Map) {
            return Actions.call(methodName,(Map)parameters[1]);
          }
 else {
            return Actions.call(methodName,parameters[1]);
          }
default :
        return Actions.call(methodName,Arrays.copyOfRange(parameters,1,parameters.length));
    }
  }
}
 catch (FrameworkException fex) {
  fex.printStackTrace();
}
return null;
}
}
,null,0,0);
}
if ("includeJs".equals(name)) {
return new IdFunctionObject(new IdFunctionCall(){
@Override public Object execIdCall(final IdFunctionObject info,final Context context,final Scriptable scope,final Scriptable thisObject,final Object[] parameters){
if (parameters.length == 1) {
  final String fileName=parameters[0].toString();
  context.evaluateString(scope,actionContext.getJavascriptLibraryCode(fileName),fileName,1,null);
}
 else {
  logger.log(Level.WARNING,"Incorrect usage of includeJs function. Takes exactly one parameter: The filename of the javascript file!");
}
return null;
}
}
,null,0,0);
}
final Function<Object,Object> function=Functions.functions.get(CaseHelper.toUnderscore(name,false));
if (function != null) {
return new IdFunctionObject(new FunctionWrapper(function),null,0,0);
}
return null;
}
