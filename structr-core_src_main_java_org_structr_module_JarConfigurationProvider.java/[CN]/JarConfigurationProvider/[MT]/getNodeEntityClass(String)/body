{
  Class nodeEntityClass=GenericNode.class;
  if ((name != null) && (!name.isEmpty())) {
    nodeEntityClass=nodeEntityClassCache.get(name);
    if (nodeEntityClass == null) {
      for (      String possiblePath : nodeEntityPackages) {
        if (possiblePath != null) {
          try {
            Class nodeClass=Class.forName(possiblePath + "." + name);
            if (!Modifier.isAbstract(nodeClass.getModifiers())) {
              nodeEntityClassCache.put(name,nodeClass);
              nodeEntityClass=nodeClass;
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("#########################################################################################################");
              System.out.println("NODE ENTITY CLASS FOUND FOR TYPE " + nodeClass);
              break;
            }
          }
 catch (          ClassNotFoundException ex) {
          }
        }
      }
    }
  }
  return nodeEntityClass;
}
