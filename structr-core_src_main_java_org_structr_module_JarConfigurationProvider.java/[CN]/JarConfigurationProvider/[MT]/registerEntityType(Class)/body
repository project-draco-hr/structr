{
  String simpleName=type.getSimpleName();
  String fqcn=type.getName();
  if (AbstractNode.class.isAssignableFrom(type)) {
    nodeEntityClassCache.put(simpleName,type);
    nodeEntityPackages.add(fqcn.substring(0,fqcn.lastIndexOf(".")));
    globalPropertyViewMap.remove(fqcn);
  }
  if (AbstractRelationship.class.isAssignableFrom(type)) {
    relationshipEntityClassCache.put(simpleName,type);
    relationshipPackages.add(fqcn.substring(0,fqcn.lastIndexOf(".")));
    globalPropertyViewMap.remove(fqcn);
  }
  for (  Class interfaceClass : type.getInterfaces()) {
    String interfaceName=interfaceClass.getSimpleName();
    Set<Class> classesForInterface=interfaceCache.get(interfaceName);
    if (classesForInterface == null) {
      classesForInterface=new LinkedHashSet<>();
      interfaceCache.put(interfaceName,classesForInterface);
    }
    classesForInterface.add(type);
  }
  try {
    final Map<Field,PropertyKey> allProperties=getFieldValuesOfType(PropertyKey.class,type);
    final Map<Field,View> views=getFieldValuesOfType(View.class,type);
    for (    final Map.Entry<Field,PropertyKey> entry : allProperties.entrySet()) {
      final PropertyKey propertyKey=entry.getValue();
      final Field field=entry.getKey();
      final Class declaringClass=field.getDeclaringClass();
      if (declaringClass != null) {
        propertyKey.setDeclaringClass(declaringClass);
        registerProperty(declaringClass,propertyKey);
      }
      registerProperty(type,propertyKey);
    }
    for (    Map.Entry<Field,View> entry : views.entrySet()) {
      final Field field=entry.getKey();
      final View view=entry.getValue();
      for (      PropertyKey propertyKey : view.properties()) {
        registerPropertySet(field.getDeclaringClass(),view.name(),propertyKey);
        registerPropertySet(type,view.name(),propertyKey);
      }
    }
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,t,LogMessageSupplier.create("Unable to register type {0}: {1}",new Object[]{type,t.getMessage()}));
  }
  Map<String,Method> typeMethods=exportedMethodMap.get(fqcn);
  if (typeMethods == null) {
    typeMethods=new HashMap<>();
    exportedMethodMap.put(fqcn,typeMethods);
  }
  typeMethods.putAll(getAnnotatedMethods(type,Export.class));
  getInterfacesForType(type);
}
