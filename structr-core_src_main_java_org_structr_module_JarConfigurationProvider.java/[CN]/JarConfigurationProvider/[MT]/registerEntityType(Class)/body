{
  int modifiers=type.getModifiers();
  if (!Modifier.isAbstract(modifiers) && !Modifier.isInterface(modifiers)) {
    String simpleName=type.getSimpleName();
    String fullName=type.getName();
    if (AbstractNode.class.isAssignableFrom(type)) {
      nodeEntityClassCache.put(simpleName,type);
      nodeEntityPackages.add(fullName.substring(0,fullName.lastIndexOf(".")));
      globalPropertyViewMap.remove(type.getName());
    }
    if (AbstractRelationship.class.isAssignableFrom(type)) {
      relationshipEntityClassCache.put(simpleName,type);
      relationshipPackages.add(fullName.substring(0,fullName.lastIndexOf(".")));
      globalPropertyViewMap.remove(type.getName());
    }
    for (    Class interfaceClass : type.getInterfaces()) {
      String interfaceName=interfaceClass.getSimpleName();
      Set<Class> classesForInterface=interfaceCache.get(interfaceName);
      if (classesForInterface == null) {
        classesForInterface=new LinkedHashSet<>();
        interfaceCache.put(interfaceName,classesForInterface);
      }
      classesForInterface.add(type);
    }
    try {
      Object entity=type.newInstance();
      Map<Field,PropertyKey> allProperties=getFieldValuesOfType(PropertyKey.class,entity);
      Map<Field,View> views=getFieldValuesOfType(View.class,entity);
      Class entityType=entity.getClass();
      for (      Map.Entry<Field,PropertyKey> entry : allProperties.entrySet()) {
        PropertyKey propertyKey=entry.getValue();
        Field field=entry.getKey();
        Class declaringClass=field.getDeclaringClass();
        if (declaringClass != null) {
          propertyKey.setDeclaringClass(declaringClass);
          registerProperty(declaringClass,propertyKey);
        }
        registerProperty(entityType,propertyKey);
      }
      for (      Map.Entry<Field,View> entry : views.entrySet()) {
        Field field=entry.getKey();
        View view=entry.getValue();
        for (        PropertyKey propertyKey : view.properties()) {
          registerPropertySet(field.getDeclaringClass(),view.name(),propertyKey);
          registerPropertySet(entityType,view.name(),propertyKey);
        }
      }
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to instantiate {0}: {1}",new Object[]{type,t.getMessage()});
    }
  }
  Set<Method> typeMethods=exportedMethodMap.get(type.getName());
  if (typeMethods == null) {
    typeMethods=new LinkedHashSet<>();
    exportedMethodMap.put(type.getName(),typeMethods);
  }
  typeMethods.addAll(getAnnotatedMethods(type,Export.class));
  getInterfacesForType(type);
}
