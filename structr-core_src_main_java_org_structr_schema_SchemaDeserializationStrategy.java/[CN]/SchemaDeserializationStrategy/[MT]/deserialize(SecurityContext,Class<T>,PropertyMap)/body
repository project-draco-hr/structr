{
  final App app=StructrApp.getInstance(securityContext);
  if (attributes != null) {
    Result<T> result=Result.EMPTY_RESULT;
    final PropertyMap foreignProperties=new PropertyMap();
    for (final Iterator<PropertyKey> it=attributes.keySet().iterator(); it.hasNext(); ) {
      final PropertyKey key=it.next();
      if (foreignPropertyKeys.contains(key)) {
        foreignProperties.put(key,attributes.get(key));
        it.remove();
      }
    }
    if (attributes.containsKey(GraphObject.id)) {
      result=new Result(app.get(attributes.get(GraphObject.id)),false);
    }
 else {
      boolean attributesComplete=true;
      for (      PropertyKey key : identifyingPropertyKeys) {
        attributesComplete&=attributes.containsKey(key);
      }
      if (attributesComplete) {
        final PropertyMap identifyingKeyValues=new PropertyMap();
        for (        final PropertyKey key : identifyingPropertyKeys) {
          identifyingKeyValues.put(key,attributes.get(key));
        }
        result=app.nodeQuery(type).and(identifyingKeyValues).getResult();
      }
    }
    final int size=result.size();
switch (size) {
case 0:
      if (createIfNotExisting) {
        T newNode=app.create(type,attributes);
        if (newNode != null) {
          Map<String,PropertyMap> notionPropertyMap=(Map<String,PropertyMap>)securityContext.getAttribute("notionProperties");
          if (notionPropertyMap == null) {
            notionPropertyMap=new LinkedHashMap<>();
            securityContext.setAttribute("notionProperties",notionPropertyMap);
          }
          notionPropertyMap.put(newNode.getUuid() + "." + relationProperty.getDirectionKey(),foreignProperties);
          return newNode;
        }
      }
    break;
case 1:
  final T typedResult=getTypedResult(result,type);
for (final Entry<PropertyKey,Object> entry : attributes.entrySet()) {
  typedResult.setProperty(entry.getKey(),entry.getValue());
}
return typedResult;
default :
logger.log(Level.SEVERE,"Found {0} nodes for given type and properties, property set is ambiguous!\n" + "This is often due to wrong modeling, or you should consider creating a uniquness constraint for " + type.getName(),size);
break;
}
throw new FrameworkException(type.getSimpleName(),new PropertiesNotFoundToken(AbstractNode.base,attributes));
}
return null;
}
