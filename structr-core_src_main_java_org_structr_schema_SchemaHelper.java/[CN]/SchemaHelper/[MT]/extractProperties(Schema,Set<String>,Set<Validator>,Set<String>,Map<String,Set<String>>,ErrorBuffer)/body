{
  final PropertyContainer propertyContainer=entity.getPropertyContainer();
  final StringBuilder src=new StringBuilder();
  for (  String propertyName : SchemaHelper.getProperties(propertyContainer)) {
    if (!propertyName.startsWith("__") && propertyContainer.hasProperty(propertyName)) {
      String rawType=propertyContainer.getProperty(propertyName).toString();
      PropertySourceGenerator parser=SchemaHelper.getSourceGenerator(errorBuffer,entity.getClassName(),new StringBasedPropertyDefinition(propertyName,rawType));
      if (parser != null) {
        if (entity instanceof AbstractSchemaNode) {
          parser.createSchemaPropertyNode((AbstractSchemaNode)entity,propertyName);
        }
      }
    }
  }
  final List<SchemaProperty> schemaProperties=entity.getSchemaProperties();
  if (schemaProperties != null) {
    for (    final SchemaProperty schemaProperty : schemaProperties) {
      if (!schemaProperty.getProperty(SchemaProperty.isBuiltinProperty)) {
        if (Type.Function.equals(schemaProperty.getPropertyType())) {
          final String format=schemaProperty.getFormat();
          if (format != null) {
            try {
              schemaProperty.setProperty(SchemaProperty.readFunction,format);
              schemaProperty.setProperty(SchemaProperty.format,null);
            }
 catch (            FrameworkException ex) {
              logger.log(Level.WARNING,"",ex);
            }
          }
        }
        final PropertySourceGenerator parser=SchemaHelper.getSourceGenerator(errorBuffer,entity.getClassName(),schemaProperty);
        if (parser != null) {
          final String propertyName=schemaProperty.getPropertyName();
          propertyNames.add(propertyName);
          parser.getPropertySource(src,entity);
          validators.addAll(parser.getGlobalValidators());
          enums.addAll(parser.getEnumDefinitions());
          addPropertyToView(PropertyView.Ui,propertyName,views);
        }
      }
    }
  }
  return src.toString();
}
