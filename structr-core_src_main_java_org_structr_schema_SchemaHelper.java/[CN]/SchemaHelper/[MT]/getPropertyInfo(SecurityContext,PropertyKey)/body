{
  final Map<String,Object> map=new LinkedHashMap();
  map.put("dbName",property.dbName());
  map.put("jsonName",property.jsonName());
  map.put("className",property.getClass().getName());
  final Class declaringClass=property.getDeclaringClass();
  map.put("declaringClass",declaringClass.getSimpleName());
  map.put("defaultValue",property.defaultValue());
  if (property instanceof StringProperty) {
    map.put("contentType",((StringProperty)property).contentType());
  }
  map.put("format",property.format());
  map.put("readOnly",property.isReadOnly());
  map.put("system",property.isUnvalidated());
  map.put("indexed",property.isIndexed());
  map.put("indexedWhenEmpty",property.isIndexedWhenEmpty());
  map.put("unique",property.isUnique());
  map.put("notNull",property.isNotNull());
  map.put("dynamic",property.isDynamic());
  final Class<? extends GraphObject> relatedType=property.relatedType();
  if (relatedType != null) {
    map.put("relatedType",relatedType.getName());
    map.put("type",relatedType.getSimpleName());
    map.put("uiType",relatedType.getSimpleName() + (property.isCollection() ? "[]" : ""));
  }
 else {
    map.put("type",property.typeName());
    map.put("uiType",property.typeName() + (property.isCollection() ? "[]" : ""));
  }
  map.put("isCollection",property.isCollection());
  final PropertyConverter databaseConverter=property.databaseConverter(securityContext,null);
  final PropertyConverter inputConverter=property.inputConverter(securityContext);
  if (databaseConverter != null) {
    map.put("databaseConverter",databaseConverter.getClass().getName());
  }
  if (inputConverter != null) {
    map.put("inputConverter",inputConverter.getClass().getName());
  }
  if (declaringClass != null && property instanceof RelationProperty) {
    Relation relation=((RelationProperty)property).getRelation();
    if (relation != null) {
      map.put("relationshipType",relation.name());
    }
  }
  return map;
}
