{
  String value=null;
  if (rawValue == null) {
    return null;
  }
  if (rawValue instanceof String) {
    value=(String)rawValue;
    if (!actionContext.returnRawValue(securityContext)) {
      final Map<String,String> replacements=new LinkedHashMap<>();
      int start=value.indexOf("${");
      int end=value.indexOf("}",start);
      while (start >= 0 && end >= 0) {
        String group=value.substring(start,end + 1);
        String source=value.substring(start + 2,end);
        Object extractedValue=Functions.evaluate(securityContext,actionContext,entity,source);
        if (extractedValue == null) {
          extractedValue="";
        }
        String partValue=extractedValue.toString();
        if (partValue != null) {
          replacements.put(group,partValue);
        }
 else {
          if (!value.equals(group)) {
            replacements.put(group,"");
          }
        }
        start=value.indexOf("${",end);
        end=value.indexOf("}",start);
      }
      for (      final Entry<String,String> entry : replacements.entrySet()) {
        final String group=entry.getKey();
        final String replacement=entry.getValue();
        value=value.replace(group,replacement);
      }
    }
  }
 else   if (rawValue instanceof Boolean) {
    value=Boolean.toString((Boolean)rawValue);
  }
 else {
    value=rawValue.toString();
  }
  if (Functions.NULL_STRING.equals(value)) {
    return null;
  }
  return value;
}
