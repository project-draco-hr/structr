{
  final ConfigurationProvider config=StructrApp.getConfiguration();
  boolean success=true;
  if (compiling.compareAndSet(false,true)) {
synchronized (SchemaService.class) {
      final Set<String> dynamicViews=new LinkedHashSet<>();
      final NodeExtender nodeExtender=new NodeExtender();
      try (final Tx tx=StructrApp.getInstance().tx()){
        SchemaService.ensureBuiltinTypesExist();
        for (        final SchemaNode schemaNode : StructrApp.getInstance().nodeQuery(SchemaNode.class).getAsList()) {
          nodeExtender.addClass(schemaNode.getClassName(),schemaNode.getSource(errorBuffer));
          nodeExtender.addClass("_" + schemaNode.getClassName() + "Helper",schemaNode.getAuxiliarySource());
          dynamicViews.addAll(schemaNode.getViews());
        }
        for (        final SchemaRelationship schemaRelationship : StructrApp.getInstance().relationshipQuery(SchemaRelationship.class).getAsList()) {
          nodeExtender.addClass(schemaRelationship.getClassName(),schemaRelationship.getSource(errorBuffer));
          nodeExtender.addClass("_" + schemaRelationship.getClassName() + "Helper",schemaRelationship.getAuxiliarySource());
          dynamicViews.addAll(schemaRelationship.getViews());
        }
        Map<String,Class> newTypes=nodeExtender.compile(errorBuffer);
        for (        final Class newType : newTypes.values()) {
          config.registerEntityType(newType);
          try {
            newType.newInstance();
          }
 catch (          Throwable t) {
          }
        }
        success=!errorBuffer.hasError();
        if (success) {
          config.registerDynamicViews(dynamicViews);
          tx.success();
          lastClassLoader=nodeExtender.getClassLoader();
        }
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"Unable to compile dynamic schema.",t);
        success=false;
      }
    }
    compiling.set(false);
  }
  return success;
}
