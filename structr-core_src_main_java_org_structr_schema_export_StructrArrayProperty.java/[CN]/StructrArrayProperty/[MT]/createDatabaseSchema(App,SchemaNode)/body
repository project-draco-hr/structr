{
  final String reference=getReference();
  if (reference != null) {
    final StructrDefinition def=resolveJsonPointer(reference);
    if (def != null) {
      final Set<String> properties=getProperties();
      final String direction=getDirection();
      if (direction == null || (properties != null && !properties.isEmpty())) {
        if (def instanceof JsonProperty) {
          final JsonProperty notionProperty=(JsonProperty)def;
          final SchemaProperty schemaProperty=app.create(SchemaProperty.class,new NodeAttribute(AbstractNode.name,getName()),new NodeAttribute(SchemaProperty.schemaNode,schemaNode),new NodeAttribute(SchemaProperty.propertyType,Type.Notion.name()),new NodeAttribute(SchemaProperty.format,notionProperty.getName() + ", " + StringUtils.join(properties,", ")));
          return schemaProperty;
        }
 else         if (def instanceof JsonType) {
          System.out.println("########################################################################################");
          System.out.println("createDatabaseSchema for array property " + this);
          System.out.println("encountered type: " + def.getClass().getName());
        }
      }
 else {
        String relationship=getRelationship();
        final SchemaNode otherNode=def.getSchemaNode();
        if ("out".equals(direction)) {
          if (StringUtils.isEmpty(relationship)) {
            relationship=SchemaRelationshipNode.getDefaultRelationshipType(schemaNode,otherNode);
          }
          final SchemaRelationshipNode rel=StructrDefinition.getRelationship(app,schemaNode,otherNode,relationship);
          rel.setProperty(SchemaRelationshipNode.targetJsonName,getName());
          rel.setProperty(SchemaRelationshipNode.targetMultiplicity,"*");
        }
 else         if ("in".equals(direction)) {
          if (StringUtils.isEmpty(relationship)) {
            relationship=SchemaRelationshipNode.getDefaultRelationshipType(otherNode,schemaNode);
          }
          final SchemaRelationshipNode rel=StructrDefinition.getRelationship(app,otherNode,schemaNode,relationship);
          rel.setProperty(SchemaRelationshipNode.sourceJsonName,getName());
          rel.setProperty(SchemaRelationshipNode.sourceMultiplicity,"*");
        }
 else {
          throw new IllegalStateException("Invalid direction " + direction + " for property "+ getName()+ " in type "+ getParent().getName());
        }
      }
    }
  }
  return null;
}
