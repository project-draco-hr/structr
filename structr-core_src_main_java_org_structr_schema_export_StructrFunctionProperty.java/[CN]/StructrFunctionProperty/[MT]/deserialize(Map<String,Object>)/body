{
  super.deserialize(source);
  final Object readFunctionValue=source.get(JsonSchema.KEY_READ_FUNCTION);
  if (readFunctionValue != null) {
    if (readFunctionValue instanceof String) {
      this.readFunction=(String)readFunctionValue;
    }
 else {
      throw new IllegalStateException("Invalid readFunction for property " + name + ", expected string.");
    }
  }
 else {
    throw new IllegalStateException("Missing readFunction value for property " + name);
  }
  final Object writeFunctionValue=source.get(JsonSchema.KEY_WRITE_FUNCTION);
  if (writeFunctionValue != null) {
    if (writeFunctionValue instanceof String) {
      this.writeFunction=(String)writeFunctionValue;
    }
 else {
      throw new IllegalStateException("Invalid writeFunction for property " + name + ", expected string.");
    }
  }
  final Object contentTypeValue=source.get(JsonSchema.KEY_CONTENT_TYPE);
  if (contentTypeValue != null) {
    if (contentTypeValue instanceof String) {
      this.contentType=(String)contentTypeValue;
    }
 else {
      throw new IllegalStateException("Invalid contentType for property " + name + ", expected string.");
    }
  }
}
