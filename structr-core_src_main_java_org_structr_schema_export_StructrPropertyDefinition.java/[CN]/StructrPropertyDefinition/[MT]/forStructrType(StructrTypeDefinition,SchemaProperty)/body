{
  final String parentName=parent.getName();
  final String name=property.getName();
  final Type type=property.getPropertyType();
  final String _format=property.getFormat();
switch (type) {
case Function:
    final StructrScriptProperty func=new StructrScriptProperty(parent,name);
  func.setContentType(property.getSourceContentType());
func.setRequired(property.isRequired());
func.setUnique(property.isUnique());
func.setSource(_format);
return func;
case Cypher:
final StructrScriptProperty cypher=new StructrScriptProperty(parent,name);
cypher.setContentType(property.getSourceContentType());
cypher.setSource("text/cypher");
return cypher;
case Notion:
final String reference="#/definitions/" + parentName + "/properties/"+ property.getNotionBaseProperty();
final Set<String> notionProperties=property.getPropertiesForNotionProperty();
final StructrPropertyDefinition notionProperty;
if (property.getNotionMultiplicity().startsWith("*")) {
notionProperty=new StructrArrayProperty(parent,name);
final Map<String,Object> items=new TreeMap<>();
items.put(JsonSchema.KEY_REFERENCE,reference);
if (!notionProperties.isEmpty()) {
items.put(JsonSchema.KEY_PROPERTIES,notionProperties);
}
notionProperty.put(JsonSchema.KEY_ITEMS,items);
}
 else {
notionProperty=new StructrObjectProperty(parent,name);
notionProperty.put(JsonSchema.KEY_REFERENCE,reference);
if (!notionProperties.isEmpty()) {
notionProperty.put(JsonSchema.KEY_PROPERTIES,notionProperties);
}
}
return notionProperty;
case StringArray:
final StructrArrayProperty arr=new StructrArrayProperty(parent,name);
final Map<String,Object> items=new TreeMap<>();
items.put(JsonSchema.KEY_TYPE,"string");
arr.put(JsonSchema.KEY_TYPE,"array");
arr.put(JsonSchema.KEY_ITEMS,items);
return arr;
case String:
final StructrStringProperty str=new StructrStringProperty(parent,name);
str.setRequired(property.isRequired());
str.setUnique(property.isUnique());
str.setDefaultValue(property.getDefaultValue());
return str;
case Boolean:
final StructrBooleanProperty bool=new StructrBooleanProperty(parent,name);
bool.setRequired(property.isRequired());
bool.setUnique(property.isUnique());
bool.setDefaultValue(property.getDefaultValue());
return bool;
case Count:
final StructrNumberProperty count=new StructrNumberProperty(parent,name);
count.setRequired(property.isRequired());
count.setUnique(property.isUnique());
count.setDefaultValue(property.getDefaultValue());
count.put(JsonSchema.KEY_SIZE_OF,"#/definitions/" + name + "/properties/"+ _format);
return count;
case Integer:
case Long:
case Double:
final StructrNumberProperty num=new StructrNumberProperty(parent,name);
num.setRequired(property.isRequired());
num.setUnique(property.isUnique());
num.setDefaultValue(property.getDefaultValue());
return num;
case Date:
final StructrStringProperty date=new StructrStringProperty(parent,name);
date.setRequired(property.isRequired());
date.setUnique(property.isUnique());
date.setDefaultValue(property.getDefaultValue());
date.setFormat(JsonSchema.FORMAT_DATE_TIME);
return date;
case Enum:
final StructrEnumProperty enumProperty=new StructrEnumProperty(parent,name);
enumProperty.setRequired(property.isRequired());
enumProperty.setUnique(property.isUnique());
enumProperty.setDefaultValue(property.getDefaultValue());
enumProperty.setEnums(property.getEnumDefinitions().toArray(new String[0]));
return enumProperty;
}
throw new IllegalStateException("Unknown type " + type);
}
