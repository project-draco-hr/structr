{
  super.deserialize(schemaNode);
  final SchemaNode sourceNode=schemaNode.getProperty(SchemaRelationshipNode.sourceNode);
  final SchemaNode targetNode=schemaNode.getProperty(SchemaRelationshipNode.targetNode);
  final String sourceNodeType=sourceNode.getClassName();
  final String targetNodeType=targetNode.getClassName();
  this.sourceType=root.getId().resolve("definitions/" + sourceNodeType);
  this.targetType=root.getId().resolve("definitions/" + targetNodeType);
  this.relationshipType=schemaNode.getProperty(SchemaRelationshipNode.relationshipType);
  this.sourcePropertyName=schemaNode.getProperty(SchemaRelationshipNode.sourceJsonName);
  this.targetPropertyName=schemaNode.getProperty(SchemaRelationshipNode.targetJsonName);
  this.aclResolution=schemaNode.getProperty(SchemaRelationshipNode.permissionPropagation).name();
  this.aclReadMask=schemaNode.getProperty(SchemaRelationshipNode.readPropagation).name();
  this.aclWriteMask=schemaNode.getProperty(SchemaRelationshipNode.writePropagation).name();
  this.aclDeleteMask=schemaNode.getProperty(SchemaRelationshipNode.deletePropagation).name();
  this.aclAccessControlMask=schemaNode.getProperty(SchemaRelationshipNode.accessControlPropagation).name();
  this.aclHiddenProperties=schemaNode.getProperty(SchemaRelationshipNode.propertyMask);
  if (sourcePropertyName == null) {
    sourcePropertyName=schemaNode.getPropertyName(sourceNodeType,root.getExistingPropertyNames(),true);
  }
  if (targetPropertyName == null) {
    targetPropertyName=schemaNode.getPropertyName(targetNodeType,root.getExistingPropertyNames(),false);
  }
  final Long cascadingDeleteFlag=schemaNode.getProperty(SchemaRelationshipNode.cascadingDeleteFlag);
  if (cascadingDeleteFlag != null) {
    this.cascadingDelete=getCascadingString(cascadingDeleteFlag.intValue());
  }
  final Long cascadingCreateFlag=schemaNode.getProperty(SchemaRelationshipNode.autocreationFlag);
  if (cascadingCreateFlag != null) {
    this.cascadingCreate=getCascadingString(cascadingCreateFlag.intValue());
  }
  final String sourceMultiplicity=schemaNode.getProperty(SchemaRelationship.sourceMultiplicity);
  final String targetMultiplicity=schemaNode.getProperty(SchemaRelationship.targetMultiplicity);
  if ("1".equals(sourceMultiplicity)) {
    if ("1".equals(targetMultiplicity)) {
      this.cardinality=Cardinality.OneToOne;
    }
 else {
      this.cardinality=Cardinality.OneToMany;
    }
  }
 else {
    if ("1".equals(targetMultiplicity)) {
      this.cardinality=Cardinality.ManyToOne;
    }
 else {
      this.cardinality=Cardinality.ManyToMany;
    }
  }
}
