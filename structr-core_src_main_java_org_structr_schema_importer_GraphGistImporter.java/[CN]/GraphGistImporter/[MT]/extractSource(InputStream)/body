{
  final List<String> sources=new LinkedList<>();
  final StringBuilder buf=new StringBuilder();
  try (final BufferedReader reader=new BufferedReader(new InputStreamReader(source))){
    String line=reader.readLine();
    boolean beforeCypher=false;
    boolean afterCypher=false;
    boolean inCypher=false;
    while (line != null) {
      final String trimmedLine=line.trim().replaceAll("[\\s]+","");
      if (afterCypher) {
        if ("//graph".equals(trimmedLine)) {
          sources.add(buf.toString());
          buf.setLength(0);
          afterCypher=false;
        }
        if ("//table".equals(trimmedLine)) {
          buf.setLength(0);
          afterCypher=false;
        }
      }
      if (!afterCypher) {
        if (inCypher && "----".equals(trimmedLine)) {
          inCypher=false;
          beforeCypher=false;
          afterCypher=true;
        }
        if (inCypher) {
          buf.append(line);
          buf.append("\n");
        }
        if ("[source,cypher]".equals(trimmedLine)) {
          beforeCypher=true;
        }
        if (beforeCypher && "----".equals(trimmedLine)) {
          inCypher=true;
          beforeCypher=false;
        }
      }
      line=reader.readLine();
    }
  }
 catch (  IOException ioex) {
    ioex.printStackTrace();
  }
  return sources;
}
