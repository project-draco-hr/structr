{
  final Iterable<Label> labels=node.getLabels();
  final Iterator<Label> iterator=labels.iterator();
  if (iterator.hasNext()) {
    return iterator.next().name();
  }
  if (node.hasProperty("type")) {
    final String type=node.getProperty("type").toString();
    return type.replaceAll("[\\W]+","");
  }
  final Set<String> incomingTypes=new LinkedHashSet<>();
  for (  final Relationship incoming : node.getRelationships(Direction.INCOMING)) {
    incomingTypes.add(incoming.getType().name());
  }
  if (incomingTypes.size() == 1) {
    return CaseHelper.toUpperCamelCase(incomingTypes.iterator().next().toLowerCase());
  }
  final Set<String> outgoingTypes=new LinkedHashSet<>();
  for (  final Relationship outgoing : node.getRelationships(Direction.OUTGOING)) {
    outgoingTypes.add(outgoing.getType().name());
  }
  if (outgoingTypes.size() == 1) {
    return CaseHelper.toUpperCamelCase(outgoingTypes.iterator().next().toLowerCase());
  }
  final StringBuilder buf=new StringBuilder("NodeWith");
  for (  final String key : properties.keySet()) {
    buf.append(StringUtils.capitalize(key));
  }
  return buf.toString();
}
