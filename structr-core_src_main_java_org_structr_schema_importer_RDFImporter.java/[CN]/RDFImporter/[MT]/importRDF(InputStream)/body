{
  final Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);
  final Set<HasSubclassRelationship> subclasses=new LinkedHashSet<>();
  final Map<String,String> comments=new LinkedHashMap<>();
  final Map<String,String> properties=new LinkedHashMap<>();
  final Map<String,String> classes=new LinkedHashMap<>();
  final Set<Triple> triples=new LinkedHashSet<>();
  final StringBuilder cypher=new StringBuilder();
  final List<String> cypherStatements=new LinkedList<>();
  for (Node node=doc.getElementsByTagName("rdfs:Class").item(0); node != null; node=node.getNextSibling()) {
    final String type=node.getNodeName();
    if ("rdfs:Class".equals(type)) {
      handleClass(classes,subclasses,comments,node);
    }
    if ("rdf:Property".equals(type)) {
      handleProperty(properties,triples,comments,node);
    }
  }
  for (  final Entry<String,String> entry : classes.entrySet()) {
    final Set<String> superclasses=new LinkedHashSet<>();
    final String id=entry.getKey();
    final String name=entry.getValue();
    superclasses.add(name);
    for (    final HasSubclassRelationship rel : subclasses) {
      if (rel.child.equals(id)) {
        superclasses.add(classes.get(rel.parent));
      }
    }
    cypher.append("CREATE (").append(id);
    for (    final String cl : superclasses) {
      cypher.append(" : ").append(cl.replaceAll("[\\W_]+",""));
    }
    cypher.append(" { name: '").append(id).append("_").append(name).append("'})\n");
  }
  for (  final Triple triple : triples) {
    if (!triple.relationship.endsWith("i") && !triple.target.startsWith("http")) {
      cypher.append("CREATE (").append(triple.source).append("-[:");
      final String relType=properties.get(triple.relationship);
      cypher.append(CaseHelper.toLowerCamelCase(relType).replaceAll("[\\W_]+",""));
      cypher.append("]->");
      cypher.append(triple.target);
      cypher.append(")\n");
    }
  }
  cypherStatements.add(cypher.toString());
  return cypherStatements;
}
