{
  final List<Set<TypeInfo>> listOfSetsOfTypes=new LinkedList<>();
  for (  String type : types) {
    final Set<TypeInfo> listOfTypes=new LinkedHashSet<>();
    String currentType=type;
    listOfSetsOfTypes.add(listOfTypes);
    while (currentType != null) {
      final TypeInfo typeInfo=typeInfos.get(currentType);
      if (typeInfo != null) {
        listOfTypes.add(typeInfo);
        currentType=typeInfo.getSuperclass(typeInfos);
      }
 else {
        currentType=null;
      }
    }
  }
  final Set<TypeInfo> intersection=new LinkedHashSet<>();
  boolean first=true;
  for (  final Set<TypeInfo> set : listOfSetsOfTypes) {
    if (first) {
      first=false;
      intersection.addAll(set);
    }
 else {
      intersection.retainAll(set);
    }
  }
  if (!intersection.isEmpty()) {
    final List<TypeInfo> typeInfoList=new LinkedList<>(intersection);
    Collections.sort(typeInfoList,new HierarchyComparator(false));
    return typeInfoList.get(0).getPrimaryType();
  }
  return null;
}
