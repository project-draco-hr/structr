{
  final StringBuilder buf=new StringBuilder();
  final String[] parts=expression.split("[, ]+");
  if (parts.length > 0) {
    final String baseProperty=parts[0];
    final String multiplicity=entity.getMultiplicity(baseProperty);
    if (multiplicity != null) {
      relatedType=entity.getRelatedType(baseProperty);
switch (multiplicity) {
case "1":
        propertyType=EntityNotionProperty.class.getSimpleName();
      break;
case "*":
    propertyType=CollectionNotionProperty.class.getSimpleName();
  break;
default :
break;
}
buf.append(", ");
buf.append(entity.getClassName());
buf.append(".");
buf.append(baseProperty);
buf.append("Property,");
final boolean isBoolean=(parts.length == 3 && ("true".equals(parts[2].toLowerCase())));
if (parts.length == 2 || isBoolean) {
buf.append(" new PropertyNotion(");
}
 else {
buf.append(" new PropertySetNotion(");
}
for (int i=1; i < parts.length; i++) {
String propertyName=parts[i];
if (!"true".equals(propertyName.toLowerCase())) {
buf.append(relatedType);
buf.append(".");
}
if (propertyName.startsWith("_")) {
propertyName=propertyName.substring(1) + "Property";
}
buf.append(propertyName);
if (i < parts.length - 1) {
buf.append(", ");
}
}
buf.append(")");
}
 else {
}
}
parameters=buf.toString();
}
