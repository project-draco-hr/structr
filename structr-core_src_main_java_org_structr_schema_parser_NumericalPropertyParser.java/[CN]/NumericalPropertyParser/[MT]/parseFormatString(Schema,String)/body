{
  if (StringUtils.isNotBlank(expression)) {
    if (expression.contains(",")) {
      if ((expression.startsWith("[") || expression.startsWith("]")) && (expression.endsWith("[") || expression.endsWith("]"))) {
        final String range=expression.substring(1,expression.length() - 1);
        final String[] parts=range.split("[, ]+");
        boolean error=false;
        if (parts.length == 2) {
          Number lowerBound=parseNumber(errorBuffer,parts[0],"lower");
          Number upperBound=parseNumber(errorBuffer,parts[1],"upper");
          if (lowerBound == null) {
            error=true;
          }
          if (upperBound == null) {
            error=true;
          }
        }
 else {
          errorBuffer.add(SchemaNode.class.getSimpleName(),new InvalidPropertySchemaToken(expression,"invalid_range_expression","Range must have exactly two bounds."));
          error=true;
        }
        if (error) {
          return;
        }
        globalValidators.add(new Validator("check" + getUnqualifiedValueType() + "inRangeError",className,propertyName));
      }
 else {
        errorBuffer.add(SchemaNode.class.getSimpleName(),new InvalidPropertySchemaToken(expression,"invalid_range_expression","Range expression must start and end with [ or ], e.g. [" + expression + "]."));
      }
    }
 else {
      errorBuffer.add(SchemaNode.class.getSimpleName(),new InvalidPropertySchemaToken(expression,"invalid_range_expression","Range expression must contain two values separated by a comma."));
    }
  }
}
