{
  boolean error=false;
  final String rangeFormatErrorMessage="Range expression must describe a (possibly open-ended) interval, e.g. [10,99] or ]9,100[ for all two-digit integers";
  if (StringUtils.isNotBlank(expression)) {
    if ((expression.startsWith("[") || expression.startsWith("]")) && (expression.endsWith("[") || expression.endsWith("]"))) {
      final String range=expression.substring(1,expression.length() - 1);
      final String[] parts=range.split(",+");
      if (parts.length == 2) {
        Number lowerBound=parseNumber(errorBuffer,parts[0].trim(),"lower");
        Number upperBound=parseNumber(errorBuffer,parts[1].trim(),"upper");
        if (lowerBound == null || upperBound == null) {
          error=true;
        }
      }
 else {
        error=true;
      }
      if (!error) {
        globalValidators.add(new Validator("check" + getUnqualifiedValueType() + "InRangeError",className,propertyName,expression));
      }
    }
 else {
      error=true;
    }
  }
  if (error) {
    errorBuffer.add(SchemaNode.class.getSimpleName(),new InvalidPropertySchemaToken(expression,"invalid_range_expression",rangeFormatErrorMessage));
  }
}
