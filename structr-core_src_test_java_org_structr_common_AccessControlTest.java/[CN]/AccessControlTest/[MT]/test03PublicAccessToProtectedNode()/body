{
  try {
    List<NodeInterface> users=createTestNodes(User.class,1);
    User user=(User)users.get(0);
    PropertyMap props=new PropertyMap();
    props.put(AbstractNode.visibleToPublicUsers,true);
    Class type=TestOne.class;
    TestOne t1=createTestNode(TestOne.class,props,user);
    props=new PropertyMap();
    props.put(AbstractNode.visibleToAuthenticatedUsers,true);
    TestOne t2=createTestNode(TestOne.class,props,user);
    SecurityContext publicContext=SecurityContext.getInstance(null,AccessMode.Frontend);
    List<SearchAttribute> searchAttributes=new LinkedList<>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=Services.command(publicContext,SearchNodeCommand.class).execute(searchAttributes);
    assertEquals(1,result.size());
    assertEquals(t1.getUuid(),result.get(0).getUuid());
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
