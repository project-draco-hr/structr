{
  try {
    List<NodeInterface> users=createTestNodes(User.class,2);
    User user1=(User)users.get(0);
    final User user2=(User)users.get(1);
    Class type=TestOne.class;
    final TestOne t1=createTestNode(TestOne.class,user1);
    try {
      app.beginTx();
      user2.grant(Permission.read,t1);
      app.commitTx();
    }
  finally {
      app.finishTx();
    }
    SecurityContext user2Context=SecurityContext.getInstance(user2,AccessMode.Backend);
    List<SearchAttribute> searchAttributes=new LinkedList<>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=Services.command(user2Context,SearchNodeCommand.class).execute(searchAttributes);
    assertEquals(1,result.size());
    assertEquals(t1.getUuid(),result.get(0).getUuid());
    try {
      app.beginTx();
      user2.revoke(Permission.read,t1);
      app.commitTx();
    }
  finally {
      app.finishTx();
    }
    result=Services.command(user2Context,SearchNodeCommand.class).execute(searchAttributes);
    assertTrue(result.isEmpty());
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
