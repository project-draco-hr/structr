{
  try {
    List<NodeInterface> users=createTestNodes(User.class,2);
    User user1=(User)users.get(0);
    User user2=(User)users.get(1);
    Result result=null;
    Class type=TestOne.class;
    final TestOne t1=createTestNode(TestOne.class,user1);
    try (final TransactionCommand cmd=app.beginTx()){
      user2.grant(Permission.read,t1);
      app.commitTx();
    }
     SecurityContext user2Context=SecurityContext.getInstance(user2,AccessMode.Backend);
    try (final TransactionCommand cmd=app.beginTx()){
      result=StructrApp.getInstance(user2Context).nodeQuery(type).getResult();
      assertEquals(1,result.size());
      assertEquals(t1.getUuid(),result.get(0).getUuid());
    }
     try (final TransactionCommand cmd=app.beginTx()){
      user2.revoke(Permission.read,t1);
      app.commitTx();
    }
     try (final TransactionCommand cmd=app.beginTx()){
      result=StructrApp.getInstance(user2Context).nodeQuery(type).getResult();
      assertTrue(result.isEmpty());
    }
   }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
