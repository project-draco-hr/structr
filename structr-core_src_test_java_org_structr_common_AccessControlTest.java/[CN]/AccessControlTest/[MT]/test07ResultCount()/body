{
  try {
    final List<NodeInterface> persons=createTestNodes(Person.class,1);
    final Class type=TestOne.class;
    final List<NodeInterface> nodes=createTestNodes(type,10);
    try {
      app.beginTx();
      nodes.get(3).setProperty(AbstractNode.visibleToPublicUsers,true);
      nodes.get(5).setProperty(AbstractNode.visibleToPublicUsers,true);
      nodes.get(7).setProperty(AbstractNode.visibleToPublicUsers,true);
      app.commitTx();
    }
  finally {
      app.finishTx();
    }
    SecurityContext publicContext=SecurityContext.getInstance(null,AccessMode.Frontend);
    List<SearchAttribute> searchAttributes=new LinkedList<>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=Services.command(publicContext,SearchNodeCommand.class).execute(searchAttributes);
    assertEquals(3,result.size());
    assertEquals(3,(int)result.getRawResultCount());
    assertEquals(nodes.get(3).getUuid(),result.get(0).getUuid());
    assertEquals(nodes.get(5).getUuid(),result.get(1).getUuid());
    assertEquals(nodes.get(7).getUuid(),result.get(2).getUuid());
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
