{
  try {
    List<AbstractNode> persons=createTestNodes(Person.class,1);
    Person user=(Person)persons.get(0);
    Class type=TestOne.class;
    final List<AbstractNode> nodes=createTestNodes(type,10);
    transactionCommand.execute(new StructrTransaction<Object>(){
      @Override public Object execute() throws FrameworkException {
        nodes.get(3).setProperty(AbstractNode.visibleToPublicUsers,true);
        nodes.get(5).setProperty(AbstractNode.visibleToPublicUsers,true);
        nodes.get(7).setProperty(AbstractNode.visibleToPublicUsers,true);
        nodes.get(9).setProperty(AbstractNode.visibleToPublicUsers,true);
        return null;
      }
    }
);
    SecurityContext publicContext=SecurityContext.getInstance(null,AccessMode.Frontend);
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    PropertyKey sortKey=AbstractNode.name;
    boolean sortDesc=false;
    int pageSize=2;
    int page=1;
    Result result=Services.command(publicContext,SearchNodeCommand.class).execute(false,false,searchAttributes,sortKey,sortDesc,pageSize,page);
    assertEquals(2,result.size());
    assertEquals(4,(int)result.getRawResultCount());
    assertEquals(nodes.get(3).getUuid(),result.get(0).getUuid());
    assertEquals(nodes.get(5).getUuid(),result.get(1).getUuid());
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
