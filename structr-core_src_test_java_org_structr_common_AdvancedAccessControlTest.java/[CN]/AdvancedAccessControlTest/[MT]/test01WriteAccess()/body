{
  clearResourceAccess();
  try {
    final TestUser owner=createTestNode(TestUser.class);
    final TestUser user=createTestNode(TestUser.class);
    final TestOne t1=createTestNode(TestOne.class,owner);
    final SecurityContext ownerContext=SecurityContext.getInstance(owner,AccessMode.Frontend);
    final SecurityContext userContext=SecurityContext.getInstance(user,AccessMode.Frontend);
    final App ownerAppContext=StructrApp.getInstance(ownerContext);
    final App userAppContext=StructrApp.getInstance(userContext);
    try (final Tx tx=ownerAppContext.tx()){
      final TestOne t=StructrApp.getInstance(ownerContext).nodeQuery(TestOne.class).getFirst();
      assertNotNull(t);
      t.setProperty(TestOne.aString,"aString");
      assertEquals("aString",t.getProperty(TestOne.aString));
      tx.success();
    }
     try (final Tx tx=userAppContext.tx()){
      assertNull(StructrApp.getInstance(userContext).nodeQuery(TestOne.class).getFirst());
      tx.success();
    }
     try (final Tx tx=ownerAppContext.tx()){
      t1.grant(Permission.read,user);
      tx.success();
    }
     try (final Tx tx=userAppContext.tx()){
      try {
        final TestOne t=StructrApp.getInstance(userContext).nodeQuery(TestOne.class).getFirst();
        t.grant(Permission.read,user);
        fail("Non-owner should not be allowed to change permissions on object");
      }
 catch (      FrameworkException fex) {
        assertEquals(fex.getStatus(),403);
      }
      tx.success();
    }
     try (final Tx tx=ownerAppContext.tx()){
      final TestOne t=StructrApp.getInstance(ownerContext).nodeQuery(TestOne.class).getFirst();
      t.grant(Permission.accessControl,user);
      tx.success();
    }
     try (final Tx tx=userAppContext.tx()){
      final TestOne t=StructrApp.getInstance(userContext).nodeQuery(TestOne.class).getFirst();
      assertNotNull(t);
      try {
        t.setProperty(TestOne.aString,"aString");
        fail("setProperty should not be allowed for non-owner on publicly visible nodes");
      }
 catch (      FrameworkException fex) {
        assertEquals(fex.getStatus(),403);
      }
      tx.success();
    }
     try (final Tx tx=app.tx()){
      t1.setProperty(GraphObject.visibleToPublicUsers,true);
      tx.success();
    }
   }
 catch (  FrameworkException ex) {
    ex.printStackTrace();
    fail("Unexpected exception");
  }
}
