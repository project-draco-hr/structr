{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    Class type=TestOne.class;
    int number=20;
    final List<NodeInterface> nodes=this.createTestNodes(type,number);
    final int offset=10;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        int i=offset;
        for (        NodeInterface node : nodes) {
          String _name="TestOne-" + i;
          i++;
          node.setProperty(AbstractNode.name,_name);
        }
        return null;
      }
    }
);
    List<SearchAttribute> searchAttributes=new LinkedList<>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=searchNodeCommand.execute(searchAttributes);
    assertTrue(result.size() == number);
    PropertyKey sortKey=AbstractNode.name;
    boolean sortDesc=false;
    int pageSize=2;
    int page=1;
    testPaging(pageSize,page,number,offset,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc);
    PropertyMap props=new PropertyMap();
    props.put(sortKey,"TestOne-09");
    this.createTestNode(type,props);
    testPaging(pageSize,page + 1,number + 1,offset - 1,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc);
    System.out.println("paging test finished");
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
