{
  try {
    Class type=TestOne.class;
    int number=8;
    final List<NodeInterface> nodes=this.createTestNodes(type,number);
    final int offset=0;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    try (final Tx tx=app.tx()){
      int i=offset;
      for (      NodeInterface node : nodes) {
        String _name="TestOne-" + i;
        i++;
        node.setProperty(AbstractNode.name,_name);
      }
      tx.success();
    }
     try (final Tx tx=app.tx()){
      List<NodeInterface> result=app.get(type);
      assertEquals(number,result.size());
      PropertyKey sortKey=AbstractNode.name;
      boolean sortDesc=false;
      int pageSize=2;
      int page=1;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-0",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-1",result.get(1).getProperty(AbstractNode.name));
      page=-1;
      result=app.nodeQuery(type).sort(AbstractNode.name).pageSize(pageSize).page(page).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-6",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-7",result.get(1).getProperty(AbstractNode.name));
      page=-2;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-4",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-5",result.get(1).getProperty(AbstractNode.name));
      page=-3;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-2",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-3",result.get(1).getProperty(AbstractNode.name));
      page=-4;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-0",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-1",result.get(1).getProperty(AbstractNode.name));
      page=1;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).offsetId(nodes.get(3).getUuid()).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-3",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-4",result.get(1).getProperty(AbstractNode.name));
      page=-1;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).offsetId(nodes.get(5).getUuid()).getAsList();
      assertEquals(2,result.size());
      assertEquals("TestOne-3",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-4",result.get(1).getProperty(AbstractNode.name));
    }
   }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
