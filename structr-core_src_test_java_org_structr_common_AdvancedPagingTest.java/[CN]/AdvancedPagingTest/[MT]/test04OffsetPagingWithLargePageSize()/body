{
  try {
    Class type=TestOne.class;
    int number=10;
    final List<NodeInterface> nodes=this.createTestNodes(type,number);
    final int offset=0;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    try (final Tx tx=app.tx()){
      int i=offset;
      for (      NodeInterface node : nodes) {
        String _name="TestOne-" + i;
        i++;
        node.setProperty(AbstractNode.name,_name);
      }
      tx.success();
    }
     try (final Tx tx=app.tx()){
      Result result=app.nodeQuery(type).getResult();
      assertEquals(number,result.size());
      PropertyKey sortKey=AbstractNode.name;
      boolean sortDesc=false;
      int pageSize=10;
      int page=1;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).offsetId(nodes.get(3).getUuid()).getResult();
      assertEquals(7,result.size());
      assertEquals("TestOne-3",result.get(0).getProperty(AbstractNode.name));
      assertEquals("TestOne-4",result.get(1).getProperty(AbstractNode.name));
      assertEquals("TestOne-5",result.get(2).getProperty(AbstractNode.name));
      assertEquals("TestOne-6",result.get(3).getProperty(AbstractNode.name));
      assertEquals("TestOne-7",result.get(4).getProperty(AbstractNode.name));
      assertEquals("TestOne-8",result.get(5).getProperty(AbstractNode.name));
      assertEquals("TestOne-9",result.get(6).getProperty(AbstractNode.name));
      tx.success();
    }
   }
 catch (  FrameworkException ex) {
    logger.log(Level.WARNING,"",ex);
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
