{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    Class type=TestOne.class;
    int number=8;
    List<AbstractNode> nodes=this.createTestNodes(type,number);
    int offset=0;
    int i=offset;
    String name;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    for (    AbstractNode node : nodes) {
      name="TestOne-" + i;
      i++;
      node.setProperty(AbstractNode.name,name);
    }
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes);
    assertEquals(number,result.size());
    PropertyKey sortKey=AbstractNode.name;
    boolean sortDesc=false;
    int pageSize=2;
    int page=-5;
    result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page);
    assertEquals(2,result.size());
    assertEquals("TestOne-0",result.get(0).getProperty(AbstractNode.name));
    assertEquals("TestOne-1",result.get(1).getProperty(AbstractNode.name));
    page=1;
    try {
      searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page,"00000000000000000000");
      fail("Should have failed with a FrameworkException with 'id not found' token");
    }
 catch (    FrameworkException fex) {
      logger.log(Level.INFO,"Exception logged",fex);
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
