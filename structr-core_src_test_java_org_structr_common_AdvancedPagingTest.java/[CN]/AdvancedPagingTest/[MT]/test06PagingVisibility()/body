{
  Principal tester1=null;
  Principal tester2=null;
  try (final Tx tx=app.tx()){
    tester1=app.create(TestUser.class,"tester1");
    tester2=app.create(TestUser.class,"tester2");
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"",fex);
    fail("Unexpected exception");
  }
  try {
    final SecurityContext tester1Context=SecurityContext.getInstance(tester1,AccessMode.Backend);
    final SecurityContext tester2Context=SecurityContext.getInstance(tester2,AccessMode.Backend);
    final App tester1App=StructrApp.getInstance(tester1Context);
    final App tester2App=StructrApp.getInstance(tester2Context);
    final Class type=TestOne.class;
    final int number=1000;
    final List<NodeInterface> allNodes=this.createTestNodes(type,number);
    final List<NodeInterface> tester1Nodes=new LinkedList<>();
    final List<NodeInterface> tester2Nodes=new LinkedList<>();
    final int offset=0;
    try (final Tx tx=app.tx()){
      int i=offset;
      for (      NodeInterface node : allNodes) {
        String _name="TestOne-" + StringUtils.leftPad(Integer.toString(i),5,"0");
        final double rand=Math.random();
        if (rand < 0.3) {
          node.setProperty(NodeInterface.owner,tester1);
          tester1Nodes.add(node);
        }
 else         if (rand < 0.6) {
          node.setProperty(NodeInterface.owner,tester2);
          tester2Nodes.add(node);
        }
        i++;
        node.setProperty(AbstractNode.name,_name);
      }
      tx.success();
    }
     final int tester1NodeCount=tester1Nodes.size();
    final int tester2NodeCount=tester2Nodes.size();
    try (final Tx tx=app.tx()){
      final PropertyKey sortKey=AbstractNode.name;
      final boolean sortDesc=false;
      final int pageSize=10;
      final int page=22;
      final Result result=tester1App.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getResult();
      assertEquals("Invalid paging result count with non-superuser security context",tester1NodeCount,(int)result.getRawResultCount());
      tx.success();
    }
     try (final Tx tx=app.tx()){
      final PropertyKey sortKey=AbstractNode.name;
      final boolean sortDesc=false;
      final int pageSize=10;
      final int page=22;
      final Result result=tester2App.nodeQuery(type).sort(sortKey).order(sortDesc).pageSize(pageSize).page(page).getResult();
      assertEquals("Invalid paging result count with non-superuser security context",tester2NodeCount,(int)result.getRawResultCount());
      tx.success();
    }
   }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
