{
  final PropertyMap properties=new PropertyMap();
  TestFive entity=null;
  Integer zero=0;
  Integer one=1;
  properties.put(GraphObject.type,TestFive.class.getSimpleName());
  try {
    entity=Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction<TestFive>(){
      @Override public TestFive execute() throws FrameworkException {
        return (TestFive)Services.command(securityContext,CreateNodeCommand.class).execute(properties);
      }
    }
);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  assertNotNull("Entity should have been created",entity);
  assertEquals("modifiedInBeforeCreation should have a value of 1: ",one,entity.getProperty(TestFive.modifiedInBeforeCreation));
  assertEquals("modifiedInAfterCreation should have a value of 1:  ",one,entity.getProperty(TestFive.modifiedInAfterCreation));
  assertEquals("modifiedInBeforeModification should have a value of 0: ",zero,entity.getProperty(TestFive.modifiedInBeforeModification));
  assertEquals("modifiedInAfterModification should have a value of 0:  ",zero,entity.getProperty(TestFive.modifiedInAfterModification));
  try {
    entity.setProperty(TestFive.intProperty,123);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  assertEquals("modifiedInBeforeCreation should have a value of 1: ",one,entity.getProperty(TestFive.modifiedInBeforeCreation));
  assertEquals("modifiedInAfterCreation should have a value of 1:  ",one,entity.getProperty(TestFive.modifiedInAfterCreation));
  assertEquals("modifiedInBeforeModification should have a value of 1: ",one,entity.getProperty(TestFive.modifiedInBeforeModification));
  assertEquals("modifiedInAfterModification should have a value of 1:  ",one,entity.getProperty(TestFive.modifiedInAfterModification));
}
