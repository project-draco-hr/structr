{
  final int count=100;
  try (final Tx tx=app.tx()){
    app.create(SchemaNode.class,new NodeAttribute(SchemaNode.name,"Item"),new NodeAttribute(new StringProperty("_name"),"+String!"));
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"",fex);
    fail("Unexpected exception.");
  }
  final Class type=StructrApp.getConfiguration().getNodeEntityClass("Item");
  assertNotNull(type);
  final PropertyKey name=StructrApp.getConfiguration().getPropertyKeyForJSONName(type,"name",false);
  assertNotNull(name);
  final Runnable tester=new Runnable(){
    @Override public void run(){
      for (int i=0; i < count; i++) {
        try (final Tx tx=app.tx()){
          app.create(type,"Item" + i);
          tx.success();
        }
 catch (        FrameworkException fex) {
        }
      }
    }
  }
;
  final ExecutorService executor=Executors.newCachedThreadPool();
  final Future f1=executor.submit(tester);
  final Future f2=executor.submit(tester);
  final Future f3=executor.submit(tester);
  try {
    f1.get();
    f2.get();
    f3.get();
  }
 catch (  Throwable ex) {
  }
  List<GraphObject> result=null;
  try (final Tx tx=app.tx()){
    result=app.nodeQuery(type).getAsList();
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"",fex);
    fail("Unexpected exception.");
  }
  assertEquals("Invalid concurrent validation result",count,result.size());
}
