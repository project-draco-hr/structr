{
  final PropertyMap props=new PropertyMap();
  try (final Tx tx=app.tx()){
    List<Class> entityList=Collections.EMPTY_LIST;
    try {
      entityList=getClasses("org.structr.core.entity");
    }
 catch (    IOException|ClassNotFoundException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
    assertTrue(entityList.contains(AbstractNode.class));
    assertTrue(entityList.contains(Cache.class));
    assertTrue(entityList.contains(GenericNode.class));
    assertTrue(entityList.contains(Location.class));
    assertTrue(entityList.contains(Person.class));
    assertTrue(entityList.contains(ResourceAccess.class));
    assertTrue(entityList.contains(PropertyAccess.class));
    entityList.remove(TestTwo.class);
    entityList.remove(TestNine.class);
    entityList.remove(PropertyDefinition.class);
    entityList.remove(MailTemplate.class);
    entityList.remove(SchemaNode.class);
    for (    Class type : entityList) {
      if (AbstractNode.class.isAssignableFrom(type)) {
        if (type.equals(TestSeven.class)) {
          props.put(TestSeven.name,"TestSeven-0");
        }
        if (type.equals(ResourceAccess.class)) {
          props.put(ResourceAccess.signature,"/");
          props.put(ResourceAccess.flags,6L);
        }
        if (type.equals(DynamicResourceAccess.class)) {
          props.put(DynamicResourceAccess.signature,"/");
          props.put(DynamicResourceAccess.flags,6L);
        }
        if (type.equals(PropertyAccess.class)) {
          props.put(PropertyAccess.flags,6L);
        }
        if (type.equals(Location.class)) {
          props.put(Location.latitude,12.34);
          props.put(Location.longitude,56.78);
        }
        logger.log(Level.INFO,"Creating node of type {0}",type);
        NodeInterface node=app.create(type,props);
        assertTrue(type.getSimpleName().equals(node.getProperty(AbstractNode.type)));
        if (type.equals(ResourceAccess.class)) {
          props.remove(ResourceAccess.signature);
          props.remove(ResourceAccess.flags);
        }
      }
    }
    tx.success();
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    ex.printStackTrace();
    fail("Unexpected exception");
  }
}
