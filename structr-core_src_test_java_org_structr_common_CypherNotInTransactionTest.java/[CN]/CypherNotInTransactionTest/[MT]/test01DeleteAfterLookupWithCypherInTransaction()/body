{
  try {
    final TestSix testSix=this.createTestNode(TestSix.class);
    final TestOne testOne=this.createTestNode(TestOne.class);
    SixOneOneToOne rel=null;
    assertNotNull(testSix);
    assertNotNull(testOne);
    try (final Tx tx=app.tx()){
      rel=app.create(testSix,testOne,SixOneOneToOne.class);
      tx.success();
    }
     assertNotNull(rel);
    DatabaseService graphDb=graphDbCommand.execute();
    try (final Tx tx=app.tx()){
      NativeResult<Relationship> result=graphDb.execute("start n = node(*) match (n)<-[r:ONE_TO_ONE]-() return r");
      final Iterator<Relationship> rels=result.columnAs("r");
      assertTrue(rels.hasNext());
      rels.next().delete();
      tx.success();
    }
     try (final Tx tx=app.tx()){
      rel.getUuid();
      fail("Accessing a deleted relationship should thow an exception.");
      tx.success();
    }
 catch (    NotFoundException iex) {
    }
  }
 catch (  FrameworkException ex) {
    logger.error(ex.toString());
    fail("Unexpected exception");
  }
}
