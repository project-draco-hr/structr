{
  try {
    final List<NodeInterface> testNodes=this.createTestNodes(GenericNode.class,2);
    AbstractRelationship rel=null;
    assertNotNull(testNodes);
    assertTrue(testNodes.size() == 2);
    try {
      app.beginTx();
      rel=app.create(testNodes.get(0),testNodes.get(1),SixOneOneToOne.class);
      app.commitTx();
    }
  finally {
      app.finishTx();
    }
    assertNotNull(rel);
    GraphDatabaseService graphDb=graphDbCommand.execute();
    GraphObject searchRes=app.get(testNodes.get(0).getUuid());
    assertNotNull(searchRes);
    Transaction tx=graphDb.beginTx();
    try {
      ((AbstractNode)searchRes).getRelationships().iterator().next().getRelationship().delete();
      tx.success();
    }
  finally {
      tx.finish();
    }
    String uuid=rel.getUuid();
    assertNull("UUID of deleted relationship should be null",uuid);
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
