{
  try {
    List<NodeInterface> testNodes=this.createTestNodes(GenericNode.class,2);
    assertNotNull(testNodes);
    assertTrue(testNodes.size() == 2);
    app.beginTx();
    AbstractRelationship rel=app.create(testNodes.get(0),testNodes.get(1),SixOneOneToOne.class);
    app.commitTx();
    assertNotNull(rel);
    GraphDatabaseService graphDb=graphDbCommand.execute();
    List<NodeInterface> searchRes=app.nodeQuery(NodeInterface.class).uuid(testNodes.get(0).getUuid()).getAsList();
    assertTrue(searchRes.size() == 1);
    Transaction tx=graphDb.beginTx();
    try {
      searchRes.get(0).getRelationships().iterator().next().getRelationship().delete();
      tx.success();
    }
  finally {
      tx.finish();
    }
    String uuid=rel.getUuid();
    assertNull("UUID of deleted relationship should be null",uuid);
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
