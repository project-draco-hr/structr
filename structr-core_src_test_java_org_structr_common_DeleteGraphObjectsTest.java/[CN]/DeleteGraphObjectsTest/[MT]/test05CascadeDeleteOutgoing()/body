{
  try {
    AbstractRelationship rel=cascadeRel(TestOne.class,TestTwo.class,Relation.SOURCE_TO_TARGET);
    NodeInterface sourceNode;
    NodeInterface targetNode;
    String startNodeId;
    String endNodeId;
    try (final TransactionCommand cmd=app.beginTx()){
      startNodeId=rel.getSourceNode().getUuid();
      endNodeId=rel.getTargetNode().getUuid();
      sourceNode=rel.getSourceNode();
    }
     deleteCascade(sourceNode);
    try (final TransactionCommand cmd=app.beginTx()){
      assertNodeNotFound(startNodeId);
      assertNodeNotFound(endNodeId);
    }
     rel=cascadeRel(TestOne.class,TestTwo.class,Relation.SOURCE_TO_TARGET);
    try (final TransactionCommand cmd=app.beginTx()){
      startNodeId=rel.getSourceNode().getUuid();
      endNodeId=rel.getTargetNode().getUuid();
      targetNode=rel.getTargetNode();
    }
     deleteCascade(targetNode);
    try (final TransactionCommand cmd=app.beginTx()){
      assertNodeNotFound(endNodeId);
      assertNodeExists(startNodeId);
    }
   }
 catch (  FrameworkException ex) {
    ex.printStackTrace();
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
