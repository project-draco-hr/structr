{
  try {
    AbstractRelationship rel=cascadeRel(TestOne.class,TestTwo.class,Relation.CONSTRAINT_BASED);
    final String startNodeId=rel.getSourceNode().getUuid();
    final String endNodeId=rel.getTargetNode().getUuid();
    deleteCascade(rel.getSourceNode());
    assertNodeNotFound(startNodeId);
    assertNodeNotFound(endNodeId);
    rel=cascadeRel(TestOne.class,TestThree.class,Relation.CONSTRAINT_BASED);
    final String startNodeId2=rel.getSourceNode().getUuid();
    final String endNodeId2=rel.getTargetNode().getUuid();
    deleteCascade(rel.getSourceNode());
    assertNodeNotFound(startNodeId2);
    assertNodeExists(endNodeId2);
    rel=cascadeRel(TestOne.class,TestFour.class,Relation.CONSTRAINT_BASED);
    final String startNodeId3=rel.getSourceNode().getUuid();
    final String endNodeId3=rel.getTargetNode().getUuid();
    deleteCascade(rel.getSourceNode());
    assertNodeNotFound(startNodeId3);
    assertNodeExists(endNodeId3);
  }
 catch (  FrameworkException ex) {
    ex.printStackTrace();
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
