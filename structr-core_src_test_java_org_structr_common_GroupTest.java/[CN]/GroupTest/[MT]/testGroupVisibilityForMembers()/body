{
  TestUser user1=null;
  TestUser user2=null;
  Group group=null;
  try (final Tx tx=app.tx()){
    user1=createTestNode(TestUser.class,"user1");
    user2=createTestNode(TestUser.class,"user2");
    tx.success();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail("Unexpected exception.");
  }
  final SecurityContext user1Context=SecurityContext.getInstance(user1,AccessMode.Backend);
  final SecurityContext user2Context=SecurityContext.getInstance(user2,AccessMode.Backend);
  final App user1App=StructrApp.getInstance(user1Context);
  final App user2App=StructrApp.getInstance(user2Context);
  try (final Tx tx=user1App.tx()){
    group=user1App.create(Group.class,"group");
    assertEquals("Invalid group owner",user1,group.getOwnerNode());
    group.addMember(user2);
    tx.success();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail("Unexpected exception.");
  }
  try (final Tx tx=user2App.tx()){
    final Group testGroup=user2App.nodeQuery(Group.class).andName("group").getFirst();
    assertNotNull(testGroup);
    assertEquals("Group name should be readable for members","group",testGroup.getName());
    tx.success();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail("Unexpected exception.");
  }
  try (final Tx tx=user2App.tx()){
    final Group testGroup=user2App.nodeQuery(Group.class).andName("group").getFirst();
    assertNotNull(testGroup);
    assertEquals("Group name should be readable for members","group",testGroup.getName());
    testGroup.setProperty(Group.name,"dontchangeme");
    fail("Griup name should not be writable for members");
    tx.success();
  }
 catch (  FrameworkException t) {
    assertEquals(403,t.getStatus());
    assertEquals("Modification not permitted.",t.getMessage());
  }
}
