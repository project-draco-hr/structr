{
  try {
    final PropertyMap props=new PropertyMap();
    final String type="UnknownTestType";
    final String name="GenericNode-name";
    props.put(AbstractNode.type,type);
    props.put(AbstractNode.name,name);
    final AbstractNode node=(AbstractNode)transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        return (AbstractNode)createNodeCommand.execute(props);
      }
    }
);
    assertTrue(node.getProperty(AbstractNode.type).equals(type));
    assertTrue(node.getProperty(AbstractNode.name).equals(name));
    assertTrue(!node.getProperty(AbstractNode.hidden));
    assertTrue(!node.getProperty(AbstractNode.deleted));
    assertTrue(!node.getProperty(AbstractNode.visibleToAuthenticatedUsers));
    assertTrue(!node.getProperty(AbstractNode.visibleToPublicUsers));
    final String name2="GenericNode-name-????????";
    transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        node.setProperty(AbstractNode.name,name2);
        node.setProperty(AbstractNode.hidden,true);
        node.setProperty(AbstractNode.deleted,true);
        node.setProperty(AbstractNode.visibleToAuthenticatedUsers,true);
        node.setProperty(AbstractNode.visibleToPublicUsers,true);
        return null;
      }
    }
);
    assertTrue(node.getProperty(AbstractNode.name).equals(name2));
    assertTrue(node.getProperty(AbstractNode.hidden));
    assertTrue(node.getProperty(AbstractNode.deleted));
    assertTrue(node.getProperty(AbstractNode.visibleToAuthenticatedUsers));
    assertTrue(node.getProperty(AbstractNode.visibleToPublicUsers));
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
