{
  try {
    final PropertyMap props=new PropertyMap();
    final String type="Group";
    final String name="TestGroup-1";
    NodeInterface node=null;
    props.put(AbstractNode.type,type);
    props.put(AbstractNode.name,name);
    try (final Tx tx=app.tx()){
      node=app.create(Group.class,props);
      tx.success();
    }
     try (final Tx tx=app.tx()){
      assertEquals(Group.class.getSimpleName(),node.getProperty(AbstractNode.type));
      assertTrue(node.getProperty(AbstractNode.name).equals(name));
      assertTrue(node.getProperty(Group.isGroup));
    }
     final String name2="TestGroup-2";
    try (final Tx tx=app.tx()){
      node.setProperty(AbstractNode.name,name2);
      node.setProperty(Group.isGroup,false);
      fail("Should have failed with an exception: Group.isGroup is_read_only_property");
      tx.success();
    }
 catch (    FrameworkException expected) {
    }
  }
 catch (  FrameworkException ex) {
    logger.error(ex.toString());
    fail("Unexpected exception");
  }
}
