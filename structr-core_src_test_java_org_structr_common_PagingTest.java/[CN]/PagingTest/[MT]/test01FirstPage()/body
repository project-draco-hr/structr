{
  try {
    boolean includeDeletedAndHidden=true;
    boolean publicOnly=false;
    Class type=TestOne.class;
    int number=43;
    this.createTestNodes(type,number);
    Result result=app.nodeQuery().type(type).getResult();
    assertTrue(result.size() == number);
    PropertyKey sortKey=AbstractNode.name;
    boolean sortDesc=false;
    int pageSize=10;
    int page=1;
    result=app.nodeQuery().type(type).sort(sortKey).order(sortDesc).page(page).pageSize(pageSize).getResult();
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == pageSize);
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
