{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    Class type=TestOne.class;
    int number=89;
    final int offset=10;
    final List<NodeInterface> nodes=this.createTestNodes(type,number);
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        int i=offset;
        for (        NodeInterface node : nodes) {
          String _name="TestOne-" + i;
          i++;
          node.setProperty(AbstractNode.name,_name);
        }
        return null;
      }
    }
);
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == number);
    PropertyKey sortKey=AbstractNode.name;
    boolean sortDesc=false;
    for (int ps=0; ps < 10; ps++) {
      for (int p=0; p < (number / Math.max(1,ps)) + 1; p++) {
        testPaging(ps,p,number,offset,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc);
      }
    }
  }
 catch (  FrameworkException ex) {
    ex.printStackTrace();
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
