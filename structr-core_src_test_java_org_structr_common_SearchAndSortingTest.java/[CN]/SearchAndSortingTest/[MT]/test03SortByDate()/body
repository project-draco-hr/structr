{
  try {
    Class type=TestOne.class;
    int number=97;
    final List<NodeInterface> nodes=this.createTestNodes(type,number);
    final int offset=10;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    try (final Tx tx=app.tx()){
      int i=offset;
      String name;
      for (      NodeInterface node : nodes) {
        name=Integer.toString(i);
        i++;
        node.setProperty(AbstractNode.name,"TestOne-" + name);
        node.setProperty(TestOne.aDate,new Date());
        try {
          Thread.sleep(2);
        }
 catch (        Throwable t) {
        }
      }
      tx.success();
    }
     try (final Tx tx=app.tx()){
      Result result=app.nodeQuery(type).getResult();
      assertEquals(number,result.size());
      PropertyKey sortKey=TestOne.aDate;
      boolean sortDesc=false;
      int pageSize=10;
      int page=1;
      result=app.nodeQuery(type).sort(sortKey).order(sortDesc).page(page).pageSize(pageSize).getResult();
      logger.info("Raw result size: {}, expected: {}",new Object[]{result.getRawResultCount(),number});
      assertTrue(result.getRawResultCount() == number);
      logger.info("Result size: {}, expected: {}",new Object[]{result.size(),pageSize});
      assertTrue(result.size() == Math.min(number,pageSize));
      for (int j=0; j < Math.min(result.size(),pageSize); j++) {
        String expectedName="TestOne-" + (offset + j);
        String gotName=result.get(j).getProperty(AbstractNode.name);
        System.out.println(expectedName + ", got: " + gotName);
        assertEquals(expectedName,gotName);
      }
      tx.success();
    }
   }
 catch (  FrameworkException ex) {
    logger.error(ex.toString());
    fail("Unexpected exception");
  }
}
