{
  try {
    final Date date=new Date();
    final TestOne test=createTestNode(TestOne.class,new NodeAttribute(TestOne.name,"TestOne"),new NodeAttribute(TestOne.aBoolean,true),new NodeAttribute(TestOne.aDate,date),new NodeAttribute(TestOne.aDouble,1.234),new NodeAttribute(TestOne.aLong,12345L),new NodeAttribute(TestOne.anEnum,TestOne.Status.One),new NodeAttribute(TestOne.anInt,123));
    try (final Tx tx=app.tx()){
      assertEquals("Invalid inexact search result for type String",test,app.nodeQuery(TestOne.class).and(TestOne.name,"TestOne",false).getFirst());
      assertEquals("Invalid inexact search result for type Boolean",test,app.nodeQuery(TestOne.class).and(TestOne.aBoolean,true,false).getFirst());
      assertEquals("Invalid inexact search result for type Date",test,app.nodeQuery(TestOne.class).and(TestOne.aDate,date,false).getFirst());
      assertEquals("Invalid inexact search result for type Double",test,app.nodeQuery(TestOne.class).and(TestOne.aDouble,1.234,false).getFirst());
      assertEquals("Invalid inexact search result for type Long",test,app.nodeQuery(TestOne.class).and(TestOne.aLong,12345L,false).getFirst());
      assertEquals("Invalid inexact search result for type String",test,app.nodeQuery(TestOne.class).and(TestOne.anEnum,TestOne.Status.One,false).getFirst());
      assertEquals("Invalid inexact search result for type Enum",test,app.nodeQuery(TestOne.class).and(TestOne.anInt,123,false).getFirst());
      tx.success();
    }
   }
 catch (  FrameworkException ex) {
    logger.error(ex.toString());
    fail("Unexpected exception");
  }
}
