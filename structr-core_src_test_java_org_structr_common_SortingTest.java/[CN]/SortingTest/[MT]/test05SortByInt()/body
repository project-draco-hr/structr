{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    Class type=TestOne.class;
    int number=61;
    final List<AbstractNode> nodes=this.createTestNodes(type,number);
    final PropertyKey key=TestOne.anInt;
    final int offset=10;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        int i=offset;
        for (        AbstractNode node : nodes) {
          node.setProperty(AbstractNode.name,Integer.toString(i));
          node.setProperty(key,i);
          i++;
        }
        return null;
      }
    }
);
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andExactType(type));
    Result result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes);
    assertEquals(number,result.size());
    PropertyKey sortKey=key;
    boolean sortDesc=false;
    int pageSize=5;
    int page=1;
    result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page,null);
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == Math.min(number,pageSize));
    for (int j=0; j < pageSize; j++) {
      int expectedNumber=offset + j;
      int gotNumber=(Integer)result.get(j).getProperty(key);
      System.out.println("expected: " + expectedNumber + ", got: "+ gotNumber);
      assertEquals(expectedNumber,gotNumber);
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
