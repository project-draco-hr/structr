{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    String type=TestOne.class.getSimpleName();
    int number=12;
    final List<AbstractNode> nodes=this.createTestNodes(type,number,1000);
    final int offset=10;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        int i=offset;
        String name;
        for (        AbstractNode node : nodes) {
          name=Integer.toString(i);
          i++;
          node.setName("TestOne-" + name);
          node.setProperty(TestOne.aString,name);
        }
        return null;
      }
    }
);
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andType(type));
    Result result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes);
    assertEquals(number,result.size());
    PropertyKey sortKey=TestOne.createdDate;
    boolean sortDesc=false;
    int pageSize=10;
    int page=1;
    result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page,null);
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == Math.min(number,pageSize));
    Date date=new Date(0);
    for (int j=0; j < Math.min(result.size(),pageSize); j++) {
      Date nextDate=result.get(j).getProperty(TestOne.createdDate);
      System.out.println(nextDate);
      assertTrue(date.before(nextDate));
      date=nextDate;
    }
    result.get(5).setProperty(TestOne.aString,"Foo Bar");
    result=null;
    result=searchNodeCommand.execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page,null);
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == Math.min(number,pageSize));
    date=new Date(0);
    for (int j=0; j < Math.min(result.size(),pageSize); j++) {
      Date nextDate=result.get(j).getProperty(TestOne.createdDate);
      System.out.println(nextDate);
      assertTrue(date.before(nextDate));
      date=nextDate;
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
