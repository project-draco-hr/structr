{
  Date now=new Date();
  long timestamp=now.getTime();
  context.put(Services.CONFIGURED_SERVICES,"ModuleService NodeService LogService");
  context.put(Services.APPLICATION_TITLE,"structr unit test app" + timestamp);
  context.put(Services.TMP_PATH,"/tmp/");
  context.put(Services.BASE_PATH,"/tmp/structr-test-" + timestamp);
  context.put(Services.DATABASE_PATH,"/tmp/structr-test-" + timestamp + "/db");
  context.put(Services.FILES_PATH,"/tmp/structr-test-" + timestamp + "/files");
  context.put(Services.LOG_DATABASE_PATH,"/tmp/structr-test-" + timestamp + "/logDb.dat");
  context.put(Services.TCP_PORT,"13465");
  context.put(Services.SERVER_IP,"127.0.0.1");
  context.put(Services.UDP_PORT,"13466");
  context.put(Services.SUPERUSER_USERNAME,"superadmin");
  context.put(Services.SUPERUSER_PASSWORD,"sehrgeheim");
  Services.initialize(context);
  securityContext=SecurityContext.getSuperUserInstance();
  createNodeCommand=Services.command(securityContext,CreateNodeCommand.class);
  createRelationshipCommand=Services.command(securityContext,CreateRelationshipCommand.class);
  deleteNodeCommand=Services.command(securityContext,DeleteNodeCommand.class);
  deleteRelationshipCommand=Services.command(securityContext,DeleteRelationshipCommand.class);
  transactionCommand=Services.command(securityContext,TransactionCommand.class);
  graphDbCommand=Services.command(securityContext,GraphDatabaseCommand.class);
  findNodeCommand=Services.command(securityContext,FindNodeCommand.class);
  searchNodeCommand=Services.command(securityContext,SearchNodeCommand.class);
  searchRelationshipCommand=Services.command(securityContext,SearchRelationshipCommand.class);
  writeLogCommand=Services.command(securityContext,WriteLogCommand.class);
  readLogCommand=Services.command(securityContext,ReadLogCommand.class);
  do {
    try {
      Thread.sleep(10);
    }
 catch (    Throwable t) {
    }
  }
 while (!Services.isInitialized());
}
