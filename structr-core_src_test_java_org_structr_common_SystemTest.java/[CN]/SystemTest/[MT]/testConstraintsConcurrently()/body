{
  try (Tx tx=app.tx()){
    app.create(SchemaNode.class,new NodeAttribute(SchemaNode.name,"Item"),new NodeAttribute(SchemaNode.schemaProperties,Arrays.asList(app.create(SchemaProperty.class,new NodeAttribute(SchemaProperty.name,"name"),new NodeAttribute(SchemaProperty.propertyType,"String"),new NodeAttribute(SchemaProperty.unique,true),new NodeAttribute(SchemaProperty.indexed,true)))));
    tx.success();
  }
 catch (  FrameworkException ex) {
    fail("Error creating schema node");
  }
  final Class itemType=StructrApp.getConfiguration().getNodeEntityClass("Item");
  assertNotNull("Error creating schema node",itemType);
  final Runnable worker=new Runnable(){
    @Override public void run(){
      int i=0;
      while (i < 1000) {
        try (final Tx tx=app.tx()){
          for (int j=0; j < 10 && i < 1000; j++) {
            app.create(itemType,"Item" + StringUtils.leftPad(Integer.toString(i++),5,"0"));
          }
          tx.success();
        }
 catch (        FrameworkException expected) {
        }
      }
    }
  }
;
  final ExecutorService service=Executors.newFixedThreadPool(10);
  final List<Future> futures=new LinkedList<>();
  for (int i=0; i < 10; i++) {
    futures.add(service.submit(worker));
  }
  for (  final Future future : futures) {
    try {
      future.get();
    }
 catch (    Throwable t) {
      logger.warn("",t);
      fail("Unexpected exception");
    }
  }
  try (final Tx tx=app.tx()){
    final List<NodeInterface> items=app.nodeQuery(itemType).sort(AbstractNode.name).getAsList();
    int i=0;
    assertEquals("Invalid concurrent constraint test result",1000,items.size());
    for (    final NodeInterface item : items) {
      assertEquals("Invalid name detected","Item" + StringUtils.leftPad(Integer.toString(i++),5,"0"),item.getName());
    }
    tx.success();
  }
 catch (  FrameworkException ex) {
    fail("Unexpected exception");
  }
  service.shutdownNow();
}
