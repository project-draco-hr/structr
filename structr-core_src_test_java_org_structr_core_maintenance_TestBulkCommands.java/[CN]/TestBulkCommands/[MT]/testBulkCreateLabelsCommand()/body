{
  try {
    final GraphDatabaseService graphDb=app.getGraphDatabaseService();
    final Set<Label> expectedLabels=new LinkedHashSet<>();
    expectedLabels.add(DynamicLabel.label("Principal"));
    expectedLabels.add(DynamicLabel.label("Group"));
    expectedLabels.add(DynamicLabel.label("AccessControllable"));
    expectedLabels.add(DynamicLabel.label("AbstractUser"));
    try (Transaction tx=graphDb.beginTx()){
      for (int i=0; i < 100; i++) {
        final Node test=graphDb.createNode();
        test.setProperty("type","Group");
        test.setProperty("id",UUID.randomUUID().toString().replace("-",""));
      }
      tx.success();
    }
     try (final Tx tx=app.tx()){
      assertEquals(0,app.nodeQuery(Group.class).getResult().size());
    }
     app.command(BulkRebuildIndexCommand.class).execute(new LinkedHashMap<String,Object>());
    app.command(BulkCreateLabelsCommand.class).execute(new LinkedHashMap<String,Object>());
    try (final Tx tx=app.tx()){
      assertEquals(100,app.nodeQuery(Group.class).getResult().size());
      for (      final Group group : app.nodeQuery(Group.class)) {
        final Set<Label> labels=Iterables.toSet(group.getNode().getLabels());
        assertEquals(6,labels.size());
        assertTrue(labels.containsAll(expectedLabels));
      }
    }
   }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception.");
  }
}
