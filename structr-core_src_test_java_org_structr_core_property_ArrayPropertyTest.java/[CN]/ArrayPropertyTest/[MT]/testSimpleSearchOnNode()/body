{
  try {
    final PropertyMap properties=new PropertyMap();
    final PropertyKey<String[]> key=TestFour.stringArrayProperty;
    final String[] arr1=new String[]{"one"};
    final String[] arr5=new String[]{"one","two","three","four","five"};
    properties.put(key,arr1);
    TestFour testEntity=null;
    try (final Tx tx=app.tx()){
      testEntity=createTestNode(TestFour.class,properties);
      tx.success();
    }
     assertNotNull(testEntity);
    Result<TestFour> result=null;
    try (final Tx tx=app.tx()){
      result=app.nodeQuery(TestFour.class).and(key,new String[]{"one"}).getResult();
      assertEquals(1,result.size());
      assertEquals(result.get(0),testEntity);
    }
     try (final Tx tx=app.tx()){
      testEntity.setProperty(key,arr5);
      tx.success();
    }
     try (final Tx tx=app.tx()){
      result=app.nodeQuery(TestFour.class).and(key,new String[]{"one"}).getResult();
      assertEquals(1,result.size());
      assertEquals(result.get(0),testEntity);
    }
     try (final Tx tx=app.tx()){
      result=app.nodeQuery(TestFour.class).and(key,new String[]{"one","two"}).getResult();
      assertEquals(1,result.size());
      assertEquals(result.get(0),testEntity);
    }
     try (final Tx tx=app.tx()){
      result=app.nodeQuery(TestFour.class).and(key,new String[]{"one","foo"}).getResult();
      assertEquals(0,result.size());
    }
     try (final Tx tx=app.tx()){
      result=app.nodeQuery(TestFour.class).and(key,new String[]{"one","foo"},false).getResult();
      assertEquals(1,result.size());
      assertEquals(result.get(0),testEntity);
    }
   }
 catch (  FrameworkException fex) {
    fail("Unable to store array");
  }
}
