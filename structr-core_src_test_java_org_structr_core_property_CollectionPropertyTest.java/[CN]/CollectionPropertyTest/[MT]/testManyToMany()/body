{
  CollectionProperty instance=TestSix.manyToManyTestOnes;
  TestSix testSix1=null;
  TestSix testSix2=null;
  TestOne testOne1=null;
  TestOne testOne2=null;
  try {
    testSix1=createTestNode(TestSix.class);
    testSix2=createTestNode(TestSix.class);
    testOne1=createTestNode(TestOne.class);
    testOne2=createTestNode(TestOne.class);
  }
 catch (  FrameworkException fex) {
    fail("Unable to create test nodes");
  }
  assertNotNull(testSix1);
  assertNotNull(testSix2);
  assertNotNull(testOne1);
  assertNotNull(testOne2);
  List<TestOne> twoTestOnesList=new LinkedList<TestOne>();
  twoTestOnesList.add(testOne1);
  twoTestOnesList.add(testOne2);
  instance.setProperty(securityContext,testSix1,twoTestOnesList);
  instance.setProperty(securityContext,testSix2,twoTestOnesList);
  List<TestOne> testOnesFromTestSix1=instance.getProperty(securityContext,testSix1,true);
  List<TestOne> testOnesFromTestSix2=instance.getProperty(securityContext,testSix2,true);
  assertNotNull(testOnesFromTestSix1);
  assertNotNull(testOnesFromTestSix2);
  assertEquals(2,testOnesFromTestSix1.size());
  assertEquals(2,testOnesFromTestSix2.size());
  List<TestOne> oneTestOneList=new LinkedList<TestOne>();
  oneTestOneList.add(testOne1);
  instance.setProperty(securityContext,testSix1,oneTestOneList);
  List<TestOne> oneTestOnesFromTestSix1=instance.getProperty(securityContext,testSix1,true);
  assertNotNull(oneTestOnesFromTestSix1);
  assertEquals(1,oneTestOnesFromTestSix1.size());
  assertEquals(oneTestOnesFromTestSix1.get(0).getUuid(),testOne1.getUuid());
}
