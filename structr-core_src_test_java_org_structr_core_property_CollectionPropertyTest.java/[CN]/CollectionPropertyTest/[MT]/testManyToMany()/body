{
  try {
    Property<List<TestOne>> instance=TestSix.manyToManyTestOnes;
    TestSix testSix1=null;
    TestSix testSix2=null;
    TestOne testOne1=null;
    TestOne testOne2=null;
    testSix1=createTestNode(TestSix.class);
    testSix2=createTestNode(TestSix.class);
    testOne1=createTestNode(TestOne.class);
    testOne2=createTestNode(TestOne.class);
    assertNotNull(testSix1);
    assertNotNull(testSix2);
    assertNotNull(testOne1);
    assertNotNull(testOne2);
    List<TestOne> twoTestOnesList=new LinkedList<>();
    twoTestOnesList.add(testOne1);
    twoTestOnesList.add(testOne2);
    try (final TransactionCommand cmd=app.beginTx()){
      instance.setProperty(securityContext,testSix1,twoTestOnesList);
      instance.setProperty(securityContext,testSix2,twoTestOnesList);
      app.commitTx();
    }
     try (final TransactionCommand cmd=app.beginTx()){
      List<TestOne> testOnesFromTestSix1=instance.getProperty(securityContext,testSix1,true);
      List<TestOne> testOnesFromTestSix2=instance.getProperty(securityContext,testSix2,true);
      assertNotNull(testOnesFromTestSix1);
      assertNotNull(testOnesFromTestSix2);
      assertEquals(2,testOnesFromTestSix1.size());
      assertEquals(2,testOnesFromTestSix2.size());
    }
     List<TestOne> oneTestOneList=new LinkedList<>();
    oneTestOneList.add(testOne1);
    try (final TransactionCommand cmd=app.beginTx()){
      instance.setProperty(securityContext,testSix1,oneTestOneList);
      app.commitTx();
    }
     try (final TransactionCommand cmd=app.beginTx()){
      List<TestOne> oneTestOnesFromTestSix1=instance.getProperty(securityContext,testSix1,true);
      assertNotNull(oneTestOnesFromTestSix1);
      assertEquals(1,oneTestOnesFromTestSix1.size());
      assertEquals(oneTestOnesFromTestSix1.get(0).getUuid(),testOne1.getUuid());
    }
   }
 catch (  FrameworkException fex) {
  }
}
