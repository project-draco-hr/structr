{
  try {
    final TestSix s1=createTestNode(TestSix.class);
    final PropertyMap props=new PropertyMap();
    props.put(TestNine.oneToManyTestSixConstraint,s1);
    final TestNine n1=createTestNode(TestNine.class,props);
    final TestNine n2=createTestNode(TestNine.class,props);
    final TestNine n3=createTestNode(TestNine.class,props);
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        s1.setProperty(AbstractNode.name,"s1");
        n1.setProperty(AbstractNode.name,"n1");
        n2.setProperty(AbstractNode.name,"n2");
        n3.setProperty(AbstractNode.name,"n3");
        return null;
      }
    }
);
    final List<TestNine> result1=s1.getProperty(TestSix.oneToManyTestNinesCascadeConstraint);
    assertEquals("Result has wrong size.",3,result1.size());
    assertEquals(n1,result1.get(0));
    assertEquals(n2,result1.get(1));
    assertEquals(n3,result1.get(2));
{
      Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          Services.command(securityContext,DeleteNodeCommand.class).execute(n2);
          return null;
        }
      }
);
      try {
        s1.setPropertyTransactional(TestSix.name,"s1");
      }
 catch (      FrameworkException fex) {
        fail("Node s1 has not been deleted, accessing it should not throw an exception.");
      }
      try {
        n1.setPropertyTransactional(TestThree.name,"n1");
      }
 catch (      FrameworkException fex) {
        fail("Node n1 has not been deleted, accessing it should not throw an exception.");
      }
      try {
        n2.setPropertyTransactional(TestThree.name,"n2");
        fail("Node n2 has been deleted, accessing it should throw an exception.");
      }
 catch (      FrameworkException fex) {
      }
      try {
        n3.setPropertyTransactional(TestThree.name,"n3");
      }
 catch (      FrameworkException fex) {
        fail("Node n3 has not been deleted, accessing it should not throw an exception.");
      }
    }
{
      Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          Services.command(securityContext,DeleteNodeCommand.class).execute(s1);
          return null;
        }
      }
);
      try {
        s1.setPropertyTransactional(TestSix.name,"s1");
        fail("Node s1 has been deleted, accessing it should throw an exception.");
      }
 catch (      FrameworkException fex) {
      }
      try {
        n1.setPropertyTransactional(TestThree.name,"n1");
        fail("Node n1 has been deleted, accessing it should throw an exception.");
      }
 catch (      FrameworkException fex) {
      }
      try {
        n2.setPropertyTransactional(TestThree.name,"n2");
        fail("Node n2 has been deleted, accessing it should throw an exception.");
      }
 catch (      FrameworkException fex) {
      }
      try {
        n3.setPropertyTransactional(TestThree.name,"n3");
        fail("Node n3 has been deleted, accessing it should throw an exception.");
      }
 catch (      FrameworkException fex) {
      }
    }
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
}
