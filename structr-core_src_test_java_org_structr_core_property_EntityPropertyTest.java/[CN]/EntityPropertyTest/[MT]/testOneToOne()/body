{
  final TestSix a=createTestNode(TestSix.class);
  final TestSix c=createTestNode(TestSix.class);
  final TestThree b=createTestNode(TestThree.class);
  final TestThree d=createTestNode(TestThree.class);
  try {
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        a.setProperty(AbstractNode.name,"a");
        c.setProperty(AbstractNode.name,"c");
        b.setProperty(AbstractNode.name,"b");
        d.setProperty(AbstractNode.name,"d");
        return null;
      }
    }
);
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unable to create test nodes");
  }
  assertNotNull(a);
  assertNotNull(c);
  assertNotNull(b);
  assertNotNull(d);
  try {
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        a.setProperty(TestSix.oneToOneTestThree,b);
        c.setProperty(TestSix.oneToOneTestThree,d);
        return null;
      }
    }
);
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unable to link test nodes");
  }
  TestThree verifyB=a.getProperty(TestSix.oneToOneTestThree);
  TestThree verifyD=c.getProperty(TestSix.oneToOneTestThree);
  assertTrue(verifyB != null && verifyB.equals(b));
  assertTrue(verifyD != null && verifyD.equals(d));
  try {
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        a.setProperty(TestSix.oneToOneTestThree,d);
        return null;
      }
    }
);
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unable to link test nodes");
  }
  TestThree verifyD2=a.getProperty(TestSix.oneToOneTestThree);
  assertTrue(verifyD2 != null && verifyD2.equals(d));
  TestThree vrfy4=c.getProperty(TestSix.oneToOneTestThree);
  assertNull(vrfy4);
}
