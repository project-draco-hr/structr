{
  final DatabaseService db=StructrApp.getInstance().getDatabaseService();
  final Set<Label> labelsBefore=new LinkedHashSet<>();
  final Set<Label> labelsAfter=new LinkedHashSet<>();
  String id=null;
  labelsBefore.add(db.forName(Label.class,AccessControllable.class.getSimpleName()));
  labelsBefore.add(db.forName(Label.class,TestFour.class.getSimpleName()));
  labelsAfter.add(db.forName(Label.class,AccessControllable.class.getSimpleName()));
  labelsAfter.add(db.forName(Label.class,TestFive.class.getSimpleName()));
  try (final Tx tx=app.tx()){
    final TestFour testEntity=createTestNode(TestFour.class);
    assertNotNull(testEntity);
    assertTrue(Iterables.toSet(testEntity.getNode().getLabels()).containsAll(labelsBefore));
    id=testEntity.getUuid();
    testEntity.unlockSystemPropertiesOnce();
    testEntity.setProperty(GraphObject.type,TestFive.class.getSimpleName());
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    final TestFive testEntity=app.get(TestFive.class,id);
    assertNotNull(testEntity);
    assertTrue(Iterables.toSet(testEntity.getNode().getLabels()).containsAll(labelsAfter));
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
}
