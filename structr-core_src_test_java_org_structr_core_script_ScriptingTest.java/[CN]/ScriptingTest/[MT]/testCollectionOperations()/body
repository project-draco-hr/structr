{
  Group group=null;
  TestUser user1=null;
  TestUser user2=null;
  TestOne testOne=null;
  try (final Tx tx=app.tx()){
    group=app.create(Group.class,"Group");
    user1=app.create(TestUser.class,"Tester1");
    user2=app.create(TestUser.class,"Tester2");
    group.setProperty(Group.members,Arrays.asList(new Principal[]{user1}));
    testOne=app.create(TestOne.class);
    createTestNodes(TestSix.class,10);
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.warn("",fex);
    fail("Unexpected exception.");
  }
  try (final Tx tx=app.tx()){
    final ActionContext actionContext=new ActionContext(securityContext);
    assertEquals("Invalid prerequisite",1,group.getProperty(Group.members).size());
    assertEquals("Invalid prerequisite",user2,Scripting.evaluate(actionContext,group,"${{ return Structr.find('TestUser', { name: 'Tester2' })[0]; }}"));
    Scripting.evaluate(actionContext,group,"${{ var group = Structr.find('Group')[0]; var users = group.members; users.push(Structr.find('TestUser', { name: 'Tester2' })[0]); }}");
    assertEquals("Invalid scripted array operation result",2,group.getProperty(Group.members).size());
    group.setProperty(Group.members,Arrays.asList(new Principal[]{user1}));
    assertEquals("Invalid prerequisite",1,group.getProperty(Group.members).size());
    Scripting.evaluate(actionContext,group,"${{ var group = Structr.find('Group')[0]; group.members.push(Structr.find('TestUser', { name: 'Tester2' })[0]); }}");
    assertEquals("Invalid scripted array operation result",2,group.getProperty(Group.members).size());
    Scripting.evaluate(actionContext,group,"${{ var test = Structr.find('TestOne')[0]; var testSixs = test.manyToManyTestSixs; testSixs.push(Structr.find('TestSix')[0]); }}");
    assertEquals("Invalid scripted array operation result",1,testOne.getProperty(TestOne.manyToManyTestSixs).size());
    Scripting.evaluate(actionContext,group,"${{ var test = Structr.find('TestOne')[0]; var testSixs = test.manyToManyTestSixs.push(Structr.find('TestSix')[1]); }}");
    assertEquals("Invalid scripted array operation result",2,testOne.getProperty(TestOne.manyToManyTestSixs).size());
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.warn("",fex);
    fail("Unexpected exception.");
  }
}
