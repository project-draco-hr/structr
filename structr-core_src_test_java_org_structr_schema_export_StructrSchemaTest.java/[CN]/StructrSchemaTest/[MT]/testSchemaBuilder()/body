{
  try {
    final JsonSchema sourceSchema=StructrSchema.createFromDatabase(app);
    final JsonType task=sourceSchema.addType("Task");
    final JsonProperty title=task.addStringProperty("title","public","ui").setRequired(true);
    final JsonProperty desc=task.addStringProperty("description","public","ui").setRequired(true);
    task.addScriptProperty("displayName","public","ui").setSource("this.name").setContentType("text/structrscript");
    task.addScriptProperty("javascript","public","ui").setSource("{ var x = 'test'; return x; }").setContentType("text/javascript");
    final JsonType project=sourceSchema.addType("Project");
    project.addStringProperty("name","public","ui").setRequired(true);
    project.addArrayReference("tasks",task).setDirection("out");
    task.addReference("project",project).setDirection("in");
    project.addEnumProperty("status","ui").setEnums("active","planned","finished");
    final JsonType worker=sourceSchema.addType("Worker");
    final JsonArrayProperty tasksProperty=worker.addArrayReference("tasks",task,"public","ui").setDirection("in");
    final JsonObjectProperty workerProperty=task.addReference("worker",worker,"public","ui").setDirection("out");
    worker.addArrayReference("taskNames",tasksProperty,"public","ui").setProperties("name");
    worker.addArrayReference("taskInfos",tasksProperty,"public","ui").setProperties("id","name");
    worker.addArrayReference("taskErrors",tasksProperty,"public","ui");
    task.addReference("workerName",workerProperty,"public","ui").setProperties("name");
    task.addReference("workerNotion",workerProperty,"public","ui");
    assertEquals("Invalid schema URI","https://structr.org/schema#",sourceSchema.getId().toString());
    assertEquals("Invalid schema URI","https://structr.org/definitions/Task",task.getId().toString());
    assertEquals("Invalid schema URI","https://structr.org/definitions/Task/properties/title",title.getId().toString());
    assertEquals("Invalid schema URI","https://structr.org/definitions/Task/properties/description",desc.getId().toString());
    compareSchemaRoundtrip(sourceSchema);
  }
 catch (  FrameworkException|InvalidSchemaException|URISyntaxException ex) {
    ex.printStackTrace();
    fail("Unexpected exception.");
  }
}
