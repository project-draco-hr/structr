{
  final RelationshipDataContainer receivedRelationshipData=(RelationshipDataContainer)receivedData;
  final String sourceStartNodeId=receivedRelationshipData.getSourceStartNodeId();
  final String sourceEndNodeId=receivedRelationshipData.getSourceEndNodeId();
  final String uuid=receivedRelationshipData.getRelationshipId();
  String targetStartNodeId=idMap.get(sourceStartNodeId);
  if (targetStartNodeId == null) {
    targetStartNodeId=sourceStartNodeId;
  }
  String targetEndNodeId=idMap.get(sourceEndNodeId);
  if (targetEndNodeId == null) {
    targetEndNodeId=sourceEndNodeId;
  }
  if (targetStartNodeId != null && targetEndNodeId != null) {
    final SecurityContext securityContext=SecurityContext.getSuperUserInstance();
    final NodeInterface targetStartNode=app.getNodeById(targetStartNodeId);
    final NodeInterface targetEndNode=app.getNodeById(targetEndNodeId);
    final String typeName=receivedRelationshipData.getType();
    final Class relType=config.getRelationshipEntityClass(typeName);
    if (targetStartNode != null && targetEndNode != null) {
      final RelationshipInterface existingCandidate=app.relationshipQuery().and(GraphObject.id,uuid).includeDeletedAndHidden().getFirst();
      count++;
      total++;
      if (existingCandidate != null) {
        existingCandidate.updateFromPropertyMap(receivedRelationshipData.getProperties());
        return existingCandidate;
      }
 else {
        final PropertyMap properties=PropertyMap.databaseTypeToJavaType(securityContext,relType,receivedRelationshipData.getProperties());
        return app.create(targetStartNode,targetEndNode,relType,properties);
      }
    }
 else {
      logger.warn("Could not store relationship {} -> {}",new Object[]{targetStartNode,targetEndNode});
    }
  }
  logger.warn("Could not store relationship {} -> {}",new Object[]{sourceStartNodeId,sourceEndNodeId});
  return null;
}
