{
  active="true".equals(config.getProperty("sync.enabled","false"));
  if (active) {
    role=SyncRole.valueOf(config.getProperty("sync.role","master"));
    allowedMaster=config.getProperty("sync.master",null);
    if (allowedMaster == null && SyncRole.slave.equals(role)) {
      throw new IllegalStateException("no master address set for this slave, please set sync.master in structr.conf.");
    }
    final String minimum=config.getProperty("sync.minimum","1");
    final String retry=config.getProperty("sync.retry","60");
    final String hosts=config.getProperty("sync.hosts");
    final String users=config.getProperty("sync.users");
    final String pwds=config.getProperty("sync.passwords");
    final String ports=config.getProperty("sync.ports");
    if (SyncRole.master.equals(role)) {
      if (StringUtils.isEmpty(hosts)) {
        throw new IllegalStateException("no slave hosts set for this master, please set sync.hosts in structr.conf.");
      }
      if (StringUtils.isEmpty(users)) {
        throw new IllegalStateException("no slave users set for this master, please set sync.users in structr.conf.");
      }
      if (StringUtils.isEmpty(pwds)) {
        throw new IllegalStateException("no slave passwords set for this master, please set sync.passwords in structr.conf.");
      }
      if (StringUtils.isEmpty(ports)) {
        throw new IllegalStateException("no slave ports set for this master, please set sync.ports in structr.conf.");
      }
      final String[] remoteHosts=hosts != null ? hosts.split("[, ]+") : new String[0];
      final String[] remoteUsers=users != null ? users.split("[, ]+") : new String[0];
      final String[] remotePwds=pwds != null ? pwds.split("[, ]+") : new String[0];
      final String[] remotePorts=ports != null ? ports.split("[, ]+") : new String[0];
      String previousUser=null;
      String previousPwd=null;
      String previousPort=null;
      for (int i=0; i < remoteHosts.length; i++) {
        final String host=remoteHosts[i];
        final String user=remoteUsers.length > i ? remoteUsers[i] : previousUser;
        final String pwd=remotePwds.length > i ? remotePwds[i] : previousPwd;
        final String port=remotePorts.length > i ? remotePorts[i] : previousPort;
        previousUser=user;
        previousPwd=pwd;
        previousPort=port;
        if (StringUtils.isEmpty(user)) {
          throw new IllegalStateException("no sync user found for remote host " + host + ", please set sync.users in structr.conf.");
        }
        if (StringUtils.isEmpty(pwd)) {
          throw new IllegalStateException("no sync password found for remote host " + host + ", please set sync.passwords in structr.conf.");
        }
        if (StringUtils.isEmpty(port)) {
          throw new IllegalStateException("no sync port found for remote host " + host + ", please set sync.ports in structr.conf.");
        }
        final SyncHostInfo syncHostInfo=new SyncHostInfo(host,user,pwd,port);
        syncHosts.add(syncHostInfo);
        logger.info("Adding slave host {}, user {}",new Object[]{syncHostInfo,port,user});
      }
      try {
        initializeSyncHosts(minimum);
      }
 catch (      FrameworkException fex) {
        logger.warn("",fex);
      }
    }
    if (StringUtils.isNotBlank(retry)) {
      this.retryInterval=Integer.valueOf(retry);
    }
    logger.info("Retry interval is set to {} seconds",retryInterval);
  }
}
