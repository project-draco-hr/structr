{
  return new DirectoryStream(){
    boolean closed=false;
    @Override public Iterator iterator(){
      if (!closed) {
        final App app=StructrApp.getInstance(fs.getSecurityContext());
        final List<StructrPath> components=new LinkedList<>();
        int pos=0;
        try (final Tx tx=app.tx()){
          final ShadowDocument doc=app.nodeQuery(ShadowDocument.class).includeDeletedAndHidden().getFirst();
          if (doc != null) {
            for (            final DOMNode node : doc.getProperty(Page.elements)) {
              if (!node.hasIncomingRelationships(DOMChildren.class)) {
                components.add(new StructrDOMNodePath(fs,StructrComponentsPath.this,doc,null,node,createComponentName(node,pos++)));
              }
            }
          }
          tx.success();
          return components.iterator();
        }
 catch (        FrameworkException fex) {
          logger.warn("Unable to create directory stream",fex);
        }
      }
      return Collections.emptyIterator();
    }
    @Override public void close() throws IOException {
      closed=true;
    }
  }
;
}
