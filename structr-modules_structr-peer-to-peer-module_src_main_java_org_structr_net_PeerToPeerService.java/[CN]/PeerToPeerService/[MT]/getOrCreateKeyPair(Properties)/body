{
  final String privateKeyFileName=config.getProperty(PRIVATE_KEY_CONFIG_KEY);
  final String publicKeyFileName=config.getProperty(PUBLIC_KEY_CONFIG_KEY);
  if (privateKeyFileName == null) {
    logger.warn("No private key file name set for PeerToPeerService, aborting. Please set a value for {} in structr.conf.",PRIVATE_KEY_CONFIG_KEY);
    return null;
  }
  if (publicKeyFileName == null) {
    logger.warn("No public key file name set for PeerToPeerService, aborting. Please set  value for {} in structr.conf.",PUBLIC_KEY_CONFIG_KEY);
    return null;
  }
  try {
    final File privateKeyFile=new File(privateKeyFileName);
    final File publicKeyFile=new File(publicKeyFileName);
    if (!privateKeyFile.exists()) {
      logger.warn("Private key file {} not found, aborting.",privateKeyFileName);
      return null;
    }
    if (!publicKeyFile.exists()) {
      logger.warn("Public key file {} not found, aborting.",publicKeyFileName);
      return null;
    }
    final String privkeyBase64=getKey(Files.readAllLines(privateKeyFile.toPath()));
    final String pubkeyBase64=getKey(Files.readAllLines(publicKeyFile.toPath()));
    if (privkeyBase64 == null || privkeyBase64.isEmpty()) {
      logger.warn("No private key found in file {}, aborting",privateKeyFileName);
      return null;
    }
    if (pubkeyBase64 == null || pubkeyBase64.isEmpty()) {
      logger.warn("No public key found in file {}, aborting",publicKeyFileName);
      return null;
    }
    final Decoder decoder=Base64.getDecoder();
    return KeyHelper.fromBytes("RSA",decoder.decode(privkeyBase64),decoder.decode(pubkeyBase64));
  }
 catch (  IOException ex) {
    logger.error("",ex);
  }
  return null;
}
