{
  long t0=System.nanoTime();
  JsonObject result=new JsonObject();
  List<? extends GraphObject> results=src.getResults();
  Integer page=src.getPage();
  Integer pageCount=src.getPageCount();
  Integer pageSize=src.getPageSize();
  String queryTime=src.getQueryTime();
  Integer resultCount=src.getRawResultCount();
  String searchString=src.getSearchString();
  String sortKey=src.getSortKey();
  String sortOrder=src.getSortOrder();
  if (page != null) {
    result.add("page",new JsonPrimitive(page));
  }
  if (pageCount != null) {
    result.add("page_count",new JsonPrimitive(pageCount));
  }
  if (pageSize != null) {
    result.add("page_size",new JsonPrimitive(pageSize));
  }
  if (queryTime != null) {
    result.add("query_time",new JsonPrimitive(queryTime));
  }
  if (resultCount != null) {
    result.add("result_count",new JsonPrimitive(resultCount));
  }
  if (results != null) {
    if (results.isEmpty()) {
      result.add("result",new JsonArray());
    }
 else     if (src.isPrimitiveArray()) {
      JsonArray resultArray=new JsonArray();
      for (      GraphObject graphObject : results) {
        Object value=graphObject.getProperty(AbstractNode.uuid);
        if (value != null) {
          resultArray.add(new JsonPrimitive(value.toString()));
        }
      }
      result.add("result",resultArray);
    }
 else {
      if (results.size() > 1 && !src.isCollection()) {
        throw new IllegalStateException(src.getClass().getSimpleName() + " is not a collection resource, but result set has size " + results.size());
      }
      long startTime=System.currentTimeMillis();
      if (src.isCollection()) {
        JsonArray resultArray=new JsonArray();
        for (        GraphObject graphObject : results) {
          JsonElement element=graphObjectGsonAdapter.serialize(graphObject,startTime);
          if (element != null) {
            resultArray.add(element);
          }
 else {
            result.add("status",new JsonPrimitive("Serialization aborted due to timeout"));
            src.setHasPartialContent(true);
            break;
          }
        }
        result.add("result",resultArray);
      }
 else {
        result.add("result",graphObjectGsonAdapter.serialize(results.get(0),startTime));
      }
    }
  }
  if (searchString != null) {
    result.add("search_string",new JsonPrimitive(searchString));
  }
  if (sortKey != null) {
    result.add("sort_key",new JsonPrimitive(sortKey));
  }
  if (sortOrder != null) {
    result.add("sort_order",new JsonPrimitive(sortOrder));
  }
  result.add("serialization_time",new JsonPrimitive(decimalFormat.format((System.nanoTime() - t0) / 1000000000.0)));
  return result;
}
