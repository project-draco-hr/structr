{
  final ResourceAccess resourceAccess=ResourceAccess.findGrant(securityContext,rawResourceSignature);
  final Method method=methods.get(request.getMethod());
  final Principal user=getUser(request,true);
  final boolean validUser=(user != null);
  if (validUser && (user instanceof SuperUser || user.getProperty(Principal.isAdmin))) {
    return;
  }
  if (resourceAccess == null) {
    logger.log(Level.INFO,"No resource access grant found for signature {0}.",rawResourceSignature);
    throw new UnauthorizedException("Forbidden");
  }
 else {
switch (method) {
case GET:
      if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_GET)) {
        return;
      }
    if (validUser && resourceAccess.hasFlag(AUTH_USER_GET)) {
      return;
    }
  break;
case PUT:
if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_PUT)) {
  return;
}
if (validUser && resourceAccess.hasFlag(AUTH_USER_PUT)) {
return;
}
break;
case POST:
if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_POST)) {
return;
}
if (validUser && resourceAccess.hasFlag(AUTH_USER_POST)) {
return;
}
break;
case DELETE:
if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_DELETE)) {
return;
}
if (validUser && resourceAccess.hasFlag(AUTH_USER_DELETE)) {
return;
}
break;
case OPTIONS:
if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_OPTIONS)) {
return;
}
if (validUser && resourceAccess.hasFlag(AUTH_USER_OPTIONS)) {
return;
}
break;
case HEAD:
if (!validUser && resourceAccess.hasFlag(NON_AUTH_USER_HEAD)) {
return;
}
if (validUser && resourceAccess.hasFlag(AUTH_USER_HEAD)) {
return;
}
break;
}
}
logger.log(Level.INFO,"Resource access grant found for signature {0}, but method {1} not allowed for {2}.",new Object[]{rawResourceSignature,method,validUser ? "authenticated users" : "public users"});
throw new UnauthorizedException("Forbidden");
}
