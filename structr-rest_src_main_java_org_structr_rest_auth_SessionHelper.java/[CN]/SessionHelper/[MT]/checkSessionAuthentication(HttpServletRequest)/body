{
  String requestedSessionId=request.getRequestedSessionId();
  HttpSession session=request.getSession(false);
  boolean sessionValid=false;
  if (requestedSessionId == null) {
    SessionHelper.newSession(request);
    request.setAttribute(SESSION_IS_NEW,true);
    return null;
  }
 else {
    if (session != null) {
      if (session.getId().equals(requestedSessionId)) {
        if (SessionHelper.isSessionTimedOut(session)) {
          sessionValid=false;
          SessionHelper.clearSession(requestedSessionId);
        }
 else {
          sessionValid=true;
        }
      }
    }
 else {
      session=SessionHelper.newSession(request);
      SessionHelper.clearSession(requestedSessionId);
    }
  }
  if (sessionValid) {
    final Principal user=AuthHelper.getPrincipalForSessionId(session.getId());
    logger.debug("Valid session found: {}, last accessed {}, authenticated with user {}",new Object[]{session,session.getLastAccessedTime(),user});
    return user;
  }
 else {
    final Principal user=AuthHelper.getPrincipalForSessionId(requestedSessionId);
    logger.debug("Invalid session: {}, last accessed {}, authenticated with user {}",new Object[]{session,(session != null ? session.getLastAccessedTime() : ""),user});
    if (user != null) {
      AuthHelper.doLogout(request,user);
    }
    try {
      request.logout();
      request.changeSessionId();
    }
 catch (    Throwable t) {
    }
  }
  return null;
}
