{
  List<GraphObjectMap> resultList=new LinkedList<>();
  GraphObjectMap info=new GraphObjectMap();
  final String classPath=System.getProperty("java.class.path");
  final Pattern outerPattern=Pattern.compile("(structr-.+?(?=.jar))");
  Matcher outerMatcher=outerPattern.matcher(classPath);
  Map<String,Map<String,String>> modules=new HashMap<>();
  while (outerMatcher.find()) {
    final String g=outerMatcher.group();
    final Pattern innerPattern=Pattern.compile("(structr-core|structr-rest|structr-ui)-([^-]*(?:-SNAPSHOT){0,1})-{0,1}(?:([0-9]{0,12})\\.{0,1}([0-9a-f]{0,5})).*");
    final Matcher innerMatcher=innerPattern.matcher(g);
    final Map<String,String> module=new HashMap<>();
    if (innerMatcher.matches()) {
      module.put("version",innerMatcher.group(2));
      module.put("date",innerMatcher.group(3));
      module.put("build",innerMatcher.group(4));
      modules.put(innerMatcher.group(1),module);
    }
  }
  info.setProperty(new GenericProperty("modules"),modules);
  info.setProperty(new StringProperty("classPath"),classPath);
  info.setProperty(new StringProperty("instanceName"),StructrApp.getConfigurationValue(Services.APPLICATION_INSTANCE_NAME,""));
  info.setProperty(new StringProperty("instanceStage"),StructrApp.getConfigurationValue(Services.APPLICATION_INSTANCE_STAGE,""));
  resultList.add(info);
  return new Result(resultList,resultList.size(),false,false);
}
