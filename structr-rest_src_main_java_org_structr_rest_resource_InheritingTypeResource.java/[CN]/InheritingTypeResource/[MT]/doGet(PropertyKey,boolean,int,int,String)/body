{
  final List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  final boolean includeDeletedAndHidden=false;
  final boolean publicOnly=false;
  if (rawType != null) {
    searchAttributes.add(Search.andExactTypeAndSubtypes(EntityContext.normalizeEntityName(rawType)));
    searchAttributes.addAll(extractSearchableAttributesFromRequest(securityContext));
    if (sortKey == null) {
      try {
        final GraphObject templateEntity=(GraphObject)entityClass.newInstance();
        final PropertyKey sortKeyProperty=templateEntity.getDefaultSortKey();
        sortDescending=GraphObjectComparator.DESCENDING.equals(templateEntity.getDefaultSortOrder());
        if (sortKeyProperty != null) {
          sortKey=sortKeyProperty;
        }
      }
 catch (      final Throwable t) {
        sortKey=AbstractNode.name;
      }
    }
    final Result results=Services.command(securityContext,SearchNodeCommand.class).execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDescending,pageSize,page,offsetId);
    return results;
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  final List emptyList=Collections.emptyList();
  return new Result(emptyList,null,isCollectionResource(),isPrimitiveArray());
}
