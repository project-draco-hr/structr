{
  if (correlations.isEmpty()) {
    return true;
  }
  LinkedList<LogEvent> correlationEntries;
  if (correlationOp != null && correlationPattern != null) {
    final Matcher matcher=correlationPattern.matcher(message);
    if (matcher.matches()) {
      final String value=matcher.group(1);
switch (correlationOp) {
case "and":
        return correlations.containsKey(value);
case "andSubject":
      correlationEntries=correlations.get(value);
    if (correlationEntries != null) {
      for (      LogEvent correlationEntry : correlationEntries) {
        if (correlationEntry.getSubjectId().equals(pathSubjectId)) {
          return true;
        }
      }
    }
  return false;
case "andObject":
correlationEntries=correlations.get(value);
if (correlationEntries != null) {
for (LogEvent correlationEntry : correlationEntries) {
  if (correlationEntry.getObjectId().equals(pathObjectId)) {
    return true;
  }
}
}
return false;
case "not":
return !correlations.containsKey(value);
default :
return false;
}
}
return "not".equals(correlationOp);
}
 else {
return correlations.containsKey(key(pathSubjectId,pathObjectId));
}
}
