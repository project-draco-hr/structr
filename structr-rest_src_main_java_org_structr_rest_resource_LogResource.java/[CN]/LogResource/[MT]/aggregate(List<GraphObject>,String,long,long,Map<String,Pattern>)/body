{
  final GraphObjectMap result=new GraphObjectMap();
  final long interval=findInterval(dateFormat);
  final long start=alignDateOnFormat(dateFormat,startTimestamp);
  final TreeMap<Long,GraphObject> countMap=toCountMap(entries,aggregationPatterns);
  final Set<IntProperty> countProperties=getCountProperties(countMap);
  for (long current=start; current <= endTimestamp; current+=interval) {
    final Map<Long,GraphObject> counts=countMap.subMap(current,true,current + interval,false);
    final GraphObject sum=new GraphObjectMap();
    for (    final IntProperty key : countProperties) {
      sum.setProperty(key,0);
    }
    for (    final GraphObject count : counts.values()) {
      for (      final IntProperty key : countProperties) {
        Integer sumValue=sum.getProperty(key);
        if (sumValue == null) {
          sumValue=0;
        }
        Integer entryValue=count.getProperty(key);
        if (entryValue == null) {
          entryValue=0;
        }
        sum.setProperty(key,sumValue + entryValue);
      }
    }
    result.put(new GenericProperty(Long.toString(current)),sum);
  }
  return new Result(result,false);
}
