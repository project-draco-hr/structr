{
  final HttpServletRequest request=securityContext.getRequest();
  if (request != null) {
    final String subjectId=request.getParameter(subjectProperty.jsonName());
    final String objectId=request.getParameter(objectProperty.jsonName());
    final GraphObjectMap overviewMap=new GraphObjectMap();
    final LogState logState=new LogState(request);
    if (StringUtils.isNotEmpty(subjectId) && StringUtils.isNotEmpty(objectId)) {
      processData(logState,StructrApp.getInstance(securityContext).nodeQuery(LogEvent.class).and(LogEvent.subjectProperty,subjectId).and(LogEvent.objectProperty,objectId).and(LogEvent.actionProperty,logState.logAction).andRange(LogEvent.timestampProperty,new Date(logState.beginTimestamp),new Date(logState.endTimestamp)).getAsList());
    }
 else     if (StringUtils.isNotEmpty(subjectId) && StringUtils.isEmpty(objectId)) {
      processData(logState,StructrApp.getInstance(securityContext).nodeQuery(LogEvent.class).and(LogEvent.subjectProperty,subjectId).and(LogEvent.actionProperty,logState.logAction).andRange(LogEvent.timestampProperty,new Date(logState.beginTimestamp),new Date(logState.endTimestamp)).getAsList());
    }
 else     if (StringUtils.isEmpty(subjectId) && StringUtils.isNotEmpty(objectId)) {
      logState.inverse(true);
      processData(logState,StructrApp.getInstance(securityContext).nodeQuery(LogEvent.class).and(LogEvent.objectProperty,objectId).and(LogEvent.actionProperty,logState.logAction).andRange(LogEvent.timestampProperty,new Date(logState.beginTimestamp),new Date(logState.endTimestamp)).getAsList());
    }
 else     if (logState.doActionQuery()) {
      processData(logState);
    }
 else {
      logState.overview(true);
      processData(logState,StructrApp.getInstance(securityContext).nodeQuery(LogEvent.class).getAsList());
    }
    if (logState.overview()) {
      overviewMap.put(actionsProperty,logState.actions());
      overviewMap.put(entryCountProperty,logState.actionCount());
      overviewMap.put(firstEntryProperty,new Date(logState.beginTimestamp()));
      overviewMap.put(lastEntryProperty,new Date(logState.endTimestamp()));
      return new Result(overviewMap,false);
    }
 else     if (logState.doHistogram()) {
      return histogram(logState);
    }
 else     if (logState.doAggregate()) {
      return aggregate(logState);
    }
 else {
      logState.sortEntries();
      return new Result(wrap(logState.entries()),logState.size(),true,false);
    }
  }
  throw new FrameworkException(500,"No request object present, aborting.");
}
