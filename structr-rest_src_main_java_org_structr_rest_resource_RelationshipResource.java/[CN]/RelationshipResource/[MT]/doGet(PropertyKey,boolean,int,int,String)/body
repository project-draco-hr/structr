{
  final App app=StructrApp.getInstance();
  List<? extends GraphObject> results=wrappedResource.doGet(sortKey,sortDescending,pageSize,page,offsetId).getResults();
  if (results != null && !results.isEmpty()) {
    try {
      List<GraphObject> resultList=new LinkedList<>();
      for (      GraphObject obj : results) {
        if (obj instanceof AbstractNode) {
          final List<? extends RelationshipInterface> relationships=Direction.INCOMING.equals(direction) ? (sortDescending ? app.relationshipQuery().and(AbstractRelationship.targetId,obj.getUuid()).sortDescending(sortKey).pageSize(pageSize).page(page).offsetId(offsetId).getAsList() : app.relationshipQuery().and(AbstractRelationship.targetId,obj.getUuid()).sortAscending(sortKey).pageSize(pageSize).page(page).offsetId(offsetId).getAsList()) : (sortDescending ? app.relationshipQuery().and(AbstractRelationship.sourceId,obj.getUuid()).sortDescending(sortKey).pageSize(pageSize).page(page).offsetId(offsetId).getAsList() : app.relationshipQuery().and(AbstractRelationship.sourceId,obj.getUuid()).sortAscending(sortKey).pageSize(pageSize).page(page).offsetId(offsetId).getAsList());
          if (relationships != null) {
            boolean filterInternalRelationshipTypes=false;
            if (securityContext != null && securityContext.getRequest() != null) {
              final String filterInternal=securityContext.getRequest().getParameter(REQUEST_PARAMETER_FILTER_INTERNAL_RELATIONSHIP_TYPES);
              if (filterInternal != null) {
                filterInternalRelationshipTypes="true".equals(filterInternal);
              }
            }
            if (filterInternalRelationshipTypes) {
              for (              final RelationshipInterface rel : relationships) {
                if (!rel.isInternal()) {
                  resultList.add(rel);
                }
              }
            }
 else {
              resultList.addAll(relationships);
            }
          }
        }
      }
      return new Result(resultList,null,isCollectionResource(),isPrimitiveArray());
    }
 catch (    Throwable t) {
      logger.warn("Exception while fetching relationships",t);
    }
  }
 else {
    logger.info("No results from parent..");
  }
  throw new IllegalPathException(getResourceSignature() + " can only be applied to a non-empty resource");
}
