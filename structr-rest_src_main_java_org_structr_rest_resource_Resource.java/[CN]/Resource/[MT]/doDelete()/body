{
  final DeleteNodeCommand deleteNode=Services.command(securityContext,DeleteNodeCommand.class);
  final DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  Iterable<? extends GraphObject> results=null;
  try {
    results=doGet(null,false,NodeFactory.DEFAULT_PAGE_SIZE,NodeFactory.DEFAULT_PAGE,null).getResults();
  }
 catch (  final NoResultsException nre) {
    results=null;
  }
  if (results != null) {
    final Iterable<? extends GraphObject> finalResults=results;
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        for (        final GraphObject obj : finalResults) {
          if (obj instanceof AbstractRelationship) {
            deleteRel.execute((AbstractRelationship)obj);
          }
 else           if (obj instanceof AbstractNode) {
            if (!securityContext.isAllowed((AbstractNode)obj,Permission.delete)) {
              throw new NotAllowedException();
            }
            deleteNode.execute((AbstractNode)obj,true);
          }
        }
        return null;
      }
    }
);
  }
  return new RestMethodResult(HttpServletResponse.SC_OK);
}
