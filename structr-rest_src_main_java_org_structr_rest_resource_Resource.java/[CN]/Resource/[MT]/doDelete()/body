{
  final DeleteNodeCommand deleteNode=Services.command(securityContext,DeleteNodeCommand.class);
  final DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  Iterable<? extends GraphObject> results=null;
  try {
    results=doGet(null,false,NodeFactory.DEFAULT_PAGE_SIZE,NodeFactory.DEFAULT_PAGE,null).getResults();
  }
 catch (  final NoResultsException nre) {
    results=null;
  }
  if (results != null) {
    final Iterable<? extends GraphObject> finalResults=results;
    final App app=StructrApp.getInstance(securityContext);
    app.beginTx();
    for (    final GraphObject obj : finalResults) {
      if (obj instanceof AbstractRelationship) {
        deleteRel.execute((AbstractRelationship)obj);
      }
 else       if (obj instanceof AbstractNode) {
        if (!securityContext.isAllowed((AbstractNode)obj,Permission.delete)) {
          logger.log(Level.WARNING,"Could not delete {0} because {1} has no delete permission",new Object[]{obj,securityContext.getUser(true)});
          throw new NotAllowedException();
        }
        deleteNode.execute((AbstractNode)obj);
      }
    }
    app.commitTx();
  }
  return new RestMethodResult(HttpServletResponse.SC_OK);
}
