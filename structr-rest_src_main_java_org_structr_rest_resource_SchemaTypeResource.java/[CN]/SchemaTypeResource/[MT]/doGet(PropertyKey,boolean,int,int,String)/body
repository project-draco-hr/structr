{
  List<GraphObjectMap> resultList=new LinkedList<>();
  Class type=typeResource.getEntityClass();
  if (type != null) {
    if (propertyView != null) {
      for (      final Map.Entry<String,Object> entry : getPropertiesForView(type,propertyView).entrySet()) {
        final GraphObjectMap property=new GraphObjectMap();
        for (        final Map.Entry<String,Object> prop : ((Map<String,Object>)entry.getValue()).entrySet()) {
          property.setProperty(new StringProperty(prop.getKey()),prop.getValue());
        }
        resultList.add(property);
      }
    }
 else {
      final GraphObjectMap schema=new GraphObjectMap();
      resultList.add(schema);
      String url="/".concat(CaseHelper.toUnderscore(rawType,false));
      schema.setProperty(new StringProperty("url"),url);
      schema.setProperty(new StringProperty("type"),type.getSimpleName());
      schema.setProperty(new StringProperty("className"),type.getName());
      schema.setProperty(new BooleanProperty("isRel"),AbstractRelationship.class.isAssignableFrom(type));
      schema.setProperty(new LongProperty("flags"),SecurityContext.getResourceFlags(rawType));
      Set<String> propertyViews=new LinkedHashSet<>(StructrApp.getConfiguration().getPropertyViews());
      Map<String,Map<String,Object>> views=new TreeMap();
      schema.setProperty(new GenericProperty("views"),views);
      for (      String view : propertyViews) {
        views.put(view,getPropertiesForView(type,view));
      }
    }
  }
  return new Result(resultList,resultList.size(),false,false);
}
