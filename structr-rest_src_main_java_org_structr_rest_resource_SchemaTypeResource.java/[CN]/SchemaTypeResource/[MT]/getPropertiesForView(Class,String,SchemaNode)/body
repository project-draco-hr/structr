{
  final Set<PropertyKey> properties=new LinkedHashSet<>(StructrApp.getConfiguration().getPropertySet(type,view));
  final Map<String,Object> propertyConverterMap=new LinkedHashMap<>();
  List<SchemaProperty> schemaProperties=getSchemaProperties(schemaNode);
  for (  PropertyKey property : properties) {
    final Map<String,Object> propProperties=new LinkedHashMap();
    propProperties.put("dbName",property.dbName());
    propProperties.put("jsonName",property.jsonName());
    propProperties.put("className",property.getClass().getName());
    final Class declaringClass=property.getDeclaringClass();
    propProperties.put("declaringClass",declaringClass.getSimpleName());
    propProperties.put("defaultValue",property.defaultValue());
    if (property instanceof StringProperty) {
      propProperties.put("contentType",((StringProperty)property).contentType());
    }
    propProperties.put("format",property.format());
    propProperties.put("readOnly",property.isReadOnly());
    propProperties.put("system",property.isUnvalidated());
    propProperties.put("indexed",property.isIndexed());
    propProperties.put("indexedWhenEmpty",property.isIndexedWhenEmpty());
    propProperties.put("unique",property.isUnique());
    propProperties.put("notNull",property.isNotNull());
    propProperties.put("dynamic",property.isDynamic());
    if ((schemaProperties == null || schemaProperties.isEmpty()) && !declaringClass.equals(type)) {
      schemaProperties=getSchemaProperties(StructrApp.getInstance().nodeQuery(SchemaNode.class).andName(declaringClass.getSimpleName()).getFirst());
    }
    if (property.isDynamic() && schemaProperties != null) {
      for (      final SchemaProperty sProp : schemaProperties) {
        if (sProp.getName().equals(property.jsonName())) {
          final List<SchemaPropertyLocalization> propertyLocalizations=sProp.localizations.getProperty(securityContext,sProp,false);
          final List<GraphObjectMap> localizationsMap=new ArrayList<>(propertyLocalizations.size());
          for (          final SchemaPropertyLocalization loc : propertyLocalizations) {
            final GraphObjectMap tmpMap=new GraphObjectMap();
            tmpMap.setProperty(new UuidProperty(),loc.getProperty(SchemaPropertyLocalization.id));
            tmpMap.setProperty(new StringProperty("locale"),loc.getProperty(SchemaPropertyLocalization.locale));
            tmpMap.setProperty(new StringProperty("name"),loc.getProperty(SchemaPropertyLocalization.name));
            localizationsMap.add(tmpMap);
          }
          propProperties.put("localizations",localizationsMap);
          break;
        }
      }
    }
    final Class<? extends GraphObject> relatedType=property.relatedType();
    if (relatedType != null) {
      propProperties.put("relatedType",relatedType.getName());
      propProperties.put("type",relatedType.getSimpleName());
    }
 else {
      propProperties.put("type",property.typeName());
    }
    propProperties.put("isCollection",property.isCollection());
    final PropertyConverter databaseConverter=property.databaseConverter(securityContext,null);
    final PropertyConverter inputConverter=property.inputConverter(securityContext);
    if (databaseConverter != null) {
      propProperties.put("databaseConverter",databaseConverter.getClass().getName());
    }
    if (inputConverter != null) {
      propProperties.put("inputConverter",inputConverter.getClass().getName());
    }
    if (declaringClass != null && property instanceof RelationProperty) {
      Relation relation=((RelationProperty)property).getRelation();
      if (relation != null) {
        propProperties.put("relationshipType",relation.name());
      }
    }
    propertyConverterMap.put(property.jsonName(),propProperties);
  }
  return propertyConverterMap;
}
