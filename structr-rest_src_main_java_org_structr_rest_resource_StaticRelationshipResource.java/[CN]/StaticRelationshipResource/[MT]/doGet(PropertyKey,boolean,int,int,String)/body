{
  final GraphObject sourceEntity=typedIdResource.getEntity();
  if (sourceEntity != null) {
    if (!typeResource.isNode && sourceEntity instanceof NodeInterface) {
      final NodeInterface source=(NodeInterface)sourceEntity;
      final Node sourceNode=source.getNode();
      final Class relationshipType=typeResource.entityClass;
      final Relation relation=AbstractNode.getRelationshipForType(relationshipType);
      final Class destNodeType=relation.getOtherType(typedIdResource.getEntityClass());
      final List<GraphObject> list=Iterables.toList(Iterables.filter(new OtherNodeTypeRelationFilter(securityContext,sourceNode,destNodeType),source.getRelationships(relationshipType)));
      applyDefaultSorting(list,sortKey,sortDescending);
      return new Result(PagingHelper.subList(list,pageSize,page,offsetId),list.size(),isCollectionResource(),isPrimitiveArray());
    }
    if (propertyKey != null) {
      final Object value=sourceEntity.getProperty(propertyKey);
      if (value != null) {
        if (value instanceof List) {
          final List<GraphObject> list=(List<GraphObject>)value;
          applyDefaultSorting(list,sortKey,sortDescending);
          return new Result(PagingHelper.subList(list,pageSize,page,offsetId),list.size(),isCollectionResource(),isPrimitiveArray());
        }
 else         if (value instanceof Iterable) {
          final List<GraphObject> propertyListResult=new LinkedList<>();
          final Iterable sourceIterable=(Iterable)value;
          for (          final Object o : sourceIterable) {
            if (o instanceof GraphObject) {
              propertyListResult.add((GraphObject)o);
            }
          }
          applyDefaultSorting(propertyListResult,sortKey,sortDescending);
          return new Result(PagingHelper.subList(propertyListResult,pageSize,page,offsetId),propertyListResult.size(),isCollectionResource(),isPrimitiveArray());
        }
      }
    }
  }
  return Result.EMPTY_RESULT;
}
