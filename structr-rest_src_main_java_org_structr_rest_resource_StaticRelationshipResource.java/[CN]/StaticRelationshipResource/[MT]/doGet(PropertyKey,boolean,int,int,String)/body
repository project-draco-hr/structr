{
  final GraphObject sourceEntity=typedIdResource.getEntity();
  if (sourceEntity != null) {
    if (propertyKey == null) {
      if (sourceEntity instanceof NodeInterface) {
        if (!typeResource.isNode) {
          final NodeInterface source=(NodeInterface)sourceEntity;
          final Node sourceNode=source.getNode();
          final Class relationshipType=typeResource.entityClass;
          final Relation relation=AbstractNode.getRelationshipForType(relationshipType);
          final Class destNodeType=relation.getOtherType(typedIdResource.getEntityClass());
          final Set partialResult=new LinkedHashSet<>(typeResource.doGet(sortKey,sortDescending,NodeFactory.DEFAULT_PAGE_SIZE,NodeFactory.DEFAULT_PAGE,null).getResults());
          final Set<GraphObject> set=Iterables.toSet(Iterables.filter(new OtherNodeTypeRelationFilter(securityContext,sourceNode,destNodeType),source.getRelationships(relationshipType)));
          set.retainAll(partialResult);
          final List<GraphObject> finalResult=new LinkedList<>(set);
          applyDefaultSorting(finalResult,sortKey,sortDescending);
          return new Result(PagingHelper.subList(finalResult,pageSize,page,offsetId),finalResult.size(),isCollectionResource(),isPrimitiveArray());
        }
 else {
          throw new NotFoundException("Cannot access relationship collection " + typeResource.getRawType());
        }
      }
    }
 else {
      Query query=typeResource.query;
      if (query == null) {
        query=StructrApp.getInstance(securityContext).nodeQuery();
      }
      typeResource.collectSearchAttributes(query);
      final Predicate<GraphObject> predicate=query.toPredicate();
      final Object value=sourceEntity.getProperty(propertyKey,predicate);
      if (value != null) {
        if (value instanceof Iterable) {
          final Set<GraphObject> propertyResults=new LinkedHashSet<>();
          boolean iterableContainsGraphObject=false;
          Iterator<Object> iter=((Iterable<Object>)value).iterator();
          while (iter.hasNext()) {
            Object obj=iter.next();
            if (obj != null) {
              if (iterableContainsGraphObject) {
                propertyResults.add((GraphObject)obj);
              }
 else               if (!iterableContainsGraphObject) {
                if (obj instanceof GraphObject) {
                  iterableContainsGraphObject=true;
                  propertyResults.add((GraphObject)obj);
                }
 else {
                  logger.log(Level.INFO,"Found object {0} of type iterable, but contained elements are not of type GraphObject.",value);
                  break;
                }
              }
            }
          }
          final List<GraphObject> finalResult=new LinkedList<>(propertyResults);
          applyDefaultSorting(finalResult,sortKey,sortDescending);
          return new Result(PagingHelper.subList(finalResult,pageSize,page,offsetId),finalResult.size(),isCollectionResource(),isPrimitiveArray());
        }
 else         if (value instanceof GraphObject) {
          return new Result((GraphObject)value,isPrimitiveArray());
        }
 else {
          logger.log(Level.INFO,"Found object {0}, but will not return as it is no graph object or iterable",value);
        }
      }
    }
  }
  return Result.EMPTY_RESULT;
}
