{
  final GraphObject sourceEntity=typedIdResource.getEntity();
  if (sourceEntity != null) {
    if (propertyKey == null) {
      if (sourceEntity instanceof NodeInterface) {
        final NodeInterface source=(NodeInterface)sourceEntity;
        final Node sourceNode=source.getNode();
        final Class relationshipType=typeResource.entityClass;
        final Relation relation=AbstractNode.getRelationshipForType(relationshipType);
        final Class destNodeType=relation.getOtherType(typedIdResource.getEntityClass());
        final Set<GraphObject> set=new LinkedHashSet<>();
        typeResource.collectSearchAttributes(typeResource.query);
        final Predicate predicate=Predicates.and(typeResource.query.toPredicate(),new OtherNodeTypeRelationFilter(securityContext,sourceNode,destNodeType));
        if (!typeResource.isNode) {
          set.addAll(Iterables.toSet(Iterables.filter(predicate,source.getRelationships(relationshipType))));
        }
 else {
        }
        final List<GraphObject> finalResult=new LinkedList<>(set);
        applyDefaultSorting(finalResult,sortKey,sortDescending);
        return new Result(PagingHelper.subList(finalResult,pageSize,page,offsetId),finalResult.size(),isCollectionResource(),isPrimitiveArray());
      }
    }
 else {
      Query query=typeResource.query;
      if (query == null) {
        query=StructrApp.getInstance(securityContext).nodeQuery();
      }
      typeResource.collectSearchAttributes(query);
      final Predicate<GraphObject> predicate=query.toPredicate();
      final Object value=sourceEntity.getProperty(propertyKey,predicate);
      if (value != null) {
        if (value instanceof Iterable) {
          final Set<GraphObject> propertyResults=new LinkedHashSet<>();
          for (          final GraphObject obj : ((Iterable<GraphObject>)value)) {
            propertyResults.add(obj);
          }
          final List<GraphObject> finalResult=new LinkedList<>(propertyResults);
          applyDefaultSorting(finalResult,sortKey,sortDescending);
          return new Result(PagingHelper.subList(finalResult,pageSize,page,offsetId),finalResult.size(),isCollectionResource(),isPrimitiveArray());
        }
      }
    }
  }
  return Result.EMPTY_RESULT;
}
