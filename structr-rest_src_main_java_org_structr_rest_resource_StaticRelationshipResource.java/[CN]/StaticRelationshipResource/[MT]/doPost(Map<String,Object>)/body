{
  final GraphObject sourceNode=typedIdResource.getEntity();
  RestMethodResult result=null;
  if (sourceNode != null && propertyKey != null && propertyKey instanceof RelationProperty) {
    final RelationProperty relationProperty=(RelationProperty)propertyKey;
    final Class sourceNodeType=sourceNode.getClass();
    NodeInterface newNode=null;
    if (propertyKey.isReadOnly()) {
      logger.info("Read-only property on {}: {}",new Object[]{sourceNodeType,typeResource.getRawType()});
      return null;
    }
    final Notion notion=relationProperty.getNotion();
    final PropertyKey primaryPropertyKey=notion.getPrimaryPropertyKey();
    if (primaryPropertyKey != null && propertySet.containsKey(primaryPropertyKey.jsonName()) && propertySet.size() == 1) {
    }
 else {
      newNode=typeResource.createNode(propertySet);
      if (newNode != null) {
        relationProperty.addSingleElement(securityContext,sourceNode,newNode);
      }
    }
    if (newNode != null) {
      result=new RestMethodResult(HttpServletResponse.SC_CREATED);
      result.addHeader("Location",buildLocationHeader(newNode));
      return result;
    }
  }
 else {
    final Class entityType=typedIdResource.getTypeResource().getEntityClass();
    final String methodName=typeResource.getRawType();
    final String source=SchemaMethodResource.findMethodSource(entityType,methodName);
    result=SchemaMethodResource.invoke(securityContext,typedIdResource.getEntity(),source,propertySet);
  }
  if (result == null) {
    throw new IllegalPathException("Illegal path");
  }
 else {
    return result;
  }
}
