{
  final GraphObject sourceNode=typedIdResource.getEntity();
  final PropertyKey propertyKey=findPropertyKey(typedIdResource,typeResource);
  if (sourceNode != null && propertyKey != null && propertyKey instanceof RelationProperty) {
    final StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        final RelationProperty relationProperty=(RelationProperty)propertyKey;
        final Class sourceNodeType=sourceNode.getClass();
        if (propertyKey.isReadOnly()) {
          logger.log(Level.INFO,"Read-only property on {0}: {1}",new Object[]{sourceNodeType,typeResource.getRawType()});
          return null;
        }
        final Notion notion=relationProperty.getNotion();
        final PropertyKey primaryPropertyKey=notion.getPrimaryPropertyKey();
        if (primaryPropertyKey != null && propertySet.containsKey(primaryPropertyKey.jsonName()) && propertySet.size() == 1) {
        }
 else {
          final AbstractNode otherNode=typeResource.createNode(propertySet);
          if (otherNode != null) {
            relationProperty.addSingleElement(securityContext,sourceNode,otherNode);
            return otherNode;
          }
        }
        return null;
      }
    }
;
    AbstractNode newNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (newNode != null) {
      RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_CREATED);
      result.addHeader("Location",buildLocationHeader(newNode));
      return result;
    }
  }
 else {
    GraphObject entity=typedIdResource.getEntity();
    Class entityType=typedIdResource.getEntityClass();
    String methodName=typeResource.getRawType();
    boolean success=false;
    if (entityType != null && methodName != null) {
      for (      Method method : EntityContext.getExportedMethodsForType(entityType)) {
        if (methodName.equals(method.getName())) {
          if (method.getAnnotation(Export.class) != null) {
            if (method.getReturnType().equals(Void.TYPE)) {
              try {
                Object[] parameters=extractParameters(propertySet,method.getParameterTypes());
                method.invoke(entity,parameters);
                success=true;
                break;
              }
 catch (              Throwable t) {
                logger.log(Level.WARNING,"Unable to call RPC method {0}: {1}",new Object[]{methodName,t.getMessage()});
              }
            }
 else {
              logger.log(Level.WARNING,"Unable to call RPC method {0}: method has wrong return type (must be void).",methodName);
            }
          }
        }
      }
    }
    if (success) {
      return new RestMethodResult(HttpServletResponse.SC_OK);
    }
  }
  throw new IllegalPathException();
}
