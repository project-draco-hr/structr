{
  final GraphObject sourceNode=typedIdResource.getEntity();
  final App app=StructrApp.getInstance(securityContext);
  if (sourceNode != null && propertyKey != null && propertyKey instanceof RelationProperty) {
    final RelationProperty relationProperty=(RelationProperty)propertyKey;
    final Class sourceNodeType=sourceNode.getClass();
    NodeInterface newNode=null;
    if (propertyKey.isReadOnly()) {
      logger.log(Level.INFO,"Read-only property on {0}: {1}",new Object[]{sourceNodeType,typeResource.getRawType()});
      return null;
    }
    final Notion notion=relationProperty.getNotion();
    final PropertyKey primaryPropertyKey=notion.getPrimaryPropertyKey();
    if (primaryPropertyKey != null && propertySet.containsKey(primaryPropertyKey.jsonName()) && propertySet.size() == 1) {
    }
 else {
      newNode=typeResource.createNode(propertySet);
      if (newNode != null) {
        relationProperty.addSingleElement(securityContext,sourceNode,newNode);
      }
    }
    if (newNode != null) {
      RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_CREATED);
      result.addHeader("Location",buildLocationHeader(newNode));
      return result;
    }
  }
 else {
    GraphObject entity=typedIdResource.getIdResource().getEntity();
    Class entityType=typedIdResource.getEntityClass();
    String methodName=typeResource.getRawType();
    if (entity != null && entityType != null && methodName != null) {
      for (      Method method : StructrApp.getConfiguration().getExportedMethodsForType(entityType)) {
        if (methodName.equals(method.getName())) {
          if (method.getAnnotation(Export.class) != null) {
            try {
              Object[] parameters=extractParameters(propertySet,method.getParameterTypes());
              return (RestMethodResult)method.invoke(entity,parameters);
            }
 catch (            IllegalAccessException|IllegalArgumentException|InvocationTargetException t) {
              if (t instanceof FrameworkException) {
                throw (FrameworkException)t;
              }
 else               if (t.getCause() instanceof FrameworkException) {
                throw (FrameworkException)t.getCause();
              }
 else {
                logger.log(Level.WARNING,"Unable to call RPC method {0}: {1}",new Object[]{methodName,t.getMessage()});
              }
            }
          }
        }
      }
    }
  }
  throw new IllegalPathException();
}
