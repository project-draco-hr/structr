{
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  PropertyKey actualSortKey=sortKey;
  boolean actualSortOrder=sortDescending;
  if (transformation != null) {
    return transformation.doGet(sortKey,sortDescending,pageSize,page,offsetId);
  }
  if (rawType != null) {
    if (entityClass == null) {
      throw new NotFoundException("Type " + rawType + " does not exist");
    }
    collectSearchAttributes(query);
    if (actualSortKey == null) {
      try {
        GraphObject templateEntity=((GraphObject)entityClass.newInstance());
        PropertyKey sortKeyProperty=templateEntity.getDefaultSortKey();
        actualSortOrder=GraphObjectComparator.DESCENDING.equals(templateEntity.getDefaultSortOrder());
        if (sortKeyProperty != null) {
          actualSortKey=sortKeyProperty;
        }
 else {
          actualSortKey=AbstractNode.name;
        }
      }
 catch (      Throwable t) {
        actualSortKey=AbstractNode.name;
      }
    }
    return query.includeDeletedAndHidden(includeDeletedAndHidden).publicOnly(publicOnly).sort(actualSortKey).order(actualSortOrder).pageSize(pageSize).page(page).offsetId(offsetId).getResult();
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  List emptyList=Collections.emptyList();
  return new Result(emptyList,null,isCollectionResource(),isPrimitiveArray());
}
