{
  boolean inexactSearch=parseInteger(request.getParameter(JsonRestServlet.REQUEST_PARAMETER_LOOSE_SEARCH)) == 1;
  List<SearchAttribute> searchAttributes=new LinkedList<>();
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  PropertyKey actualSortKey=sortKey;
  boolean actualSortOrder=sortDescending;
  if (rawType != null) {
    if (entityClass == null) {
      throw new NotFoundException();
    }
    final List<SearchAttribute> validAttributes=extractSearchableAttributes(securityContext,entityClass,request);
    final DistanceSearchAttribute distanceSearch=getDistanceSearch(request,keys(validAttributes));
    if (distanceSearch != null) {
      searchAttributes.add(distanceSearch);
    }
    searchAttributes.add(Search.andTypeAndSubtypes(entityClass,!inexactSearch));
    searchAttributes.addAll(validAttributes);
    if (actualSortKey == null) {
      try {
        GraphObject templateEntity=((GraphObject)entityClass.newInstance());
        PropertyKey sortKeyProperty=templateEntity.getDefaultSortKey();
        actualSortOrder=GraphObjectComparator.DESCENDING.equals(templateEntity.getDefaultSortOrder());
        if (sortKeyProperty != null) {
          actualSortKey=sortKeyProperty;
        }
 else {
          actualSortKey=AbstractNode.name;
        }
      }
 catch (      Throwable t) {
        actualSortKey=AbstractNode.name;
      }
    }
    Result results=Services.command(securityContext,searchCommandType).execute(includeDeletedAndHidden,publicOnly,searchAttributes,actualSortKey,actualSortOrder,pageSize,page,offsetId);
    return results;
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  List emptyList=Collections.emptyList();
  return new Result(emptyList,null,isCollectionResource(),isPrimitiveArray());
}
