{
  List<SearchAttribute> searchAttributes=new LinkedList();
  List<SearchAttribute> validAttributes=null;
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  if (rawType != null) {
    if (entityClass == null) {
      throw new NotFoundException();
    }
    validAttributes=extractSearchableAttributes(securityContext,entityClass,request);
    DistanceSearchAttribute distanceSearch=getDistanceSearch(request,keys(validAttributes));
    if (distanceSearch != null) {
      searchAttributes.add(distanceSearch);
    }
    searchAttributes.add(Search.andExactTypeAndSubtypes(EntityContext.normalizeEntityName(rawType)));
    searchAttributes.addAll(validAttributes);
    if (sortKey == null) {
      try {
        GraphObject templateEntity=((GraphObject)entityClass.newInstance());
        PropertyKey sortKeyProperty=templateEntity.getDefaultSortKey();
        sortDescending=GraphObjectComparator.DESCENDING.equals(templateEntity.getDefaultSortOrder());
        if (sortKeyProperty != null) {
          sortKey=sortKeyProperty;
        }
 else {
          sortKey=AbstractNode.name;
        }
      }
 catch (      Throwable t) {
        sortKey=AbstractNode.name;
      }
    }
    Result results=Services.command(securityContext,SearchNodeCommand.class).execute(includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDescending,pageSize,page,offsetId);
    return results;
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  List emptyList=Collections.emptyList();
  return new Result(emptyList,null,isCollectionResource(),isPrimitiveArray());
}
