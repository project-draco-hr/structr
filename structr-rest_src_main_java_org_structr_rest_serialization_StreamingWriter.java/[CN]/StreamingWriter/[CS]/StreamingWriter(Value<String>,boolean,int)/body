{
  this.outputNestingDepth=outputNestingDepth;
  this.propertyView=propertyView;
  this.indent=indent;
  serializers.put(GraphObject.class.getName(),root);
  serializers.put(PropertyMap.class.getName(),new PropertyMapSerializer());
  serializers.put(Iterable.class.getName(),new IterableSerializer());
  serializers.put(Map.class.getName(),new MapSerializer());
  nonSerializerClasses.add(Object.class.getName());
  nonSerializerClasses.add(String.class.getName());
  nonSerializerClasses.add(Integer.class.getName());
  nonSerializerClasses.add(Long.class.getName());
  nonSerializerClasses.add(Double.class.getName());
  nonSerializerClasses.add(Float.class.getName());
  nonSerializerClasses.add(Byte.class.getName());
  nonSerializerClasses.add(Character.class.getName());
  nonSerializerClasses.add(StringBuffer.class.getName());
  nonSerializerClasses.add(Boolean.class.getName());
  try {
    this.reduceRedundancy=Boolean.valueOf(Services.getInstance().getConfigurationValue(Services.JSON_REDUNDANCY_REDUCTION,"false"));
  }
 catch (  Throwable t) {
    logger.warn("Unable to parse value for {}: {}",new Object[]{Services.JSON_REDUNDANCY_REDUCTION,t.getMessage()});
  }
}
