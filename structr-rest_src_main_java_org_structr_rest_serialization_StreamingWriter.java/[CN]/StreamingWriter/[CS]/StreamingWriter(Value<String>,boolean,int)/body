{
  this.outputNestingDepth=outputNestingDepth;
  this.propertyView=propertyView;
  this.indent=indent;
  serializers.put(GraphObject.class,root);
  serializers.put(PropertyMap.class,new PropertyMapSerializer());
  serializers.put(Iterable.class,new IterableSerializer());
  serializers.put(Map.class,new MapSerializer());
  nonSerializerClasses.add(Object.class);
  nonSerializerClasses.add(String.class);
  nonSerializerClasses.add(Integer.class);
  nonSerializerClasses.add(Long.class);
  nonSerializerClasses.add(Double.class);
  nonSerializerClasses.add(Float.class);
  nonSerializerClasses.add(Byte.class);
  nonSerializerClasses.add(Character.class);
  nonSerializerClasses.add(StringBuffer.class);
  nonSerializerClasses.add(Boolean.class);
  try {
    this.reduceRedundancy=Boolean.valueOf(Services.getInstance().getConfigurationValue(Services.JSON_REDUNDANCY_REDUCTION,"false"));
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Unable to parse value for {0} from configuration file, invalid value.",Services.JSON_REDUNDANCY_REDUCTION);
  }
}
