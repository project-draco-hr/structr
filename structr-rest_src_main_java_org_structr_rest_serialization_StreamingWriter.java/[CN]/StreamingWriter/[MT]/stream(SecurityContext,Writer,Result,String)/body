{
  long t0=System.nanoTime();
  RestWriter writer=getRestWriter(securityContext,output);
  if (indent) {
    writer.setIndent("   ");
  }
  List<? extends GraphObject> results=result.getResults();
  Integer page=result.getPage();
  Integer pageCount=result.getPageCount();
  Integer pageSize=result.getPageSize();
  String queryTime=result.getQueryTime();
  Integer resultCount=result.getRawResultCount();
  String searchString=result.getSearchString();
  String sortKey=result.getSortKey();
  String sortOrder=result.getSortOrder();
  GraphObject metaData=result.getMetaData();
  writer.beginDocument(baseUrl,propertyView.get(securityContext));
  writer.beginObject();
  if (page != null) {
    writer.name("page").value(page);
  }
  if (pageCount != null) {
    writer.name("page_count").value(pageCount);
  }
  if (pageSize != null) {
    writer.name("page_size").value(pageSize);
  }
  if (queryTime != null) {
    writer.name("query_time").value(queryTime);
  }
  if (resultCount != null && renderResultCount) {
    writer.name("result_count").value(resultCount);
  }
  if (results != null) {
    if (results.isEmpty()) {
      writer.name(resultKeyName).beginArray().endArray();
    }
 else     if (result.isPrimitiveArray()) {
      writer.name(resultKeyName).beginArray();
      for (      GraphObject graphObject : results) {
        Object value=graphObject.getProperty(GraphObject.id);
        if (value != null) {
          writer.value(value.toString());
        }
      }
      writer.endArray();
    }
 else {
      if (results.size() > 1 && !result.isCollection()) {
        throw new IllegalStateException(result.getClass().getSimpleName() + " is not a collection resource, but result set has size " + results.size());
      }
      long startTime=System.currentTimeMillis();
      String localPropertyView=propertyView.get(null);
      if (result.isCollection()) {
        writer.name(resultKeyName).beginArray();
        for (        GraphObject graphObject : results) {
          root.serialize(writer,graphObject,localPropertyView,0);
          if (System.currentTimeMillis() > startTime + MAX_SERIALIZATION_TIME) {
            logger.log(Level.SEVERE,"JSON serialization took more than {0} ms, aborted. Please review output view size or adjust timeout.",MAX_SERIALIZATION_TIME);
            break;
          }
        }
        writer.endArray();
      }
 else {
        writer.name(resultKeyName);
        root.serialize(writer,results.get(0),localPropertyView,0);
      }
    }
  }
  if (searchString != null) {
    writer.name("search_string").value(searchString);
  }
  if (sortKey != null) {
    writer.name("sort_key").value(sortKey);
  }
  if (sortOrder != null) {
    writer.name("sort_order").value(sortOrder);
  }
  if (metaData != null) {
    String localPropertyView=propertyView.get(null);
    writer.name("meta_data");
    root.serialize(writer,metaData,localPropertyView,0);
  }
  if (renderSerializationTime) {
    writer.name("serialization_time").value(decimalFormat.format((System.nanoTime() - t0) / 1000000000.0));
  }
  writer.endObject();
  writer.endDocument();
}
