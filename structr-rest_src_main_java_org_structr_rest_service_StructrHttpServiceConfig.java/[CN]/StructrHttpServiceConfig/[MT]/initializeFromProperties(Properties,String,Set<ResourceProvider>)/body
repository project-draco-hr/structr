{
  final String resourceProviderKeyName=servletName.concat(".resourceprovider");
  final String authenticatorKeyName=servletName.concat(".authenticator");
  final String userAutoCreateKeyName=servletName.concat(".user.autocreate");
  final String userAutoLoginKeyName=servletName.concat(".user.autologin");
  final String defaultPropertyKeyName=servletName.concat(".defaultview");
  final String nestingDepthKeyName=servletName.concat(".outputdepth");
  final String resourceProviderValue=properties.getProperty(resourceProviderKeyName);
  final String authenticatorValue=properties.getProperty(authenticatorKeyName);
  final String userAutoCreateValue=properties.getProperty(userAutoCreateKeyName);
  final String userAutoLoginValue=properties.getProperty(userAutoLoginKeyName);
  final String defaultPropertyKeyValue=properties.getProperty(defaultPropertyKeyName);
  final String outputDepthValue=properties.getProperty(nestingDepthKeyName);
  if (StringUtils.isBlank(resourceProviderValue)) {
    logger.error("Missing resource provider key {}.resourceprovider in configuration file.",servletName);
    throw new IllegalStateException("No resource provider set for servlet " + servletName);
  }
 else {
    final Class<ResourceProvider> providerClass=loadClass(resourceProviderValue);
    if (providerClass != null) {
      resourceProvider=providerClass.newInstance();
      resourceProviders.add(resourceProvider);
    }
 else {
      logger.error("Unable to initialize resource provider for servlet {}, no resource provider found. Please check structr.conf for a valid resource provider class.",servletName);
      throw new IllegalStateException("No resource provider available for servlet " + servletName);
    }
  }
  if (StringUtils.isBlank(authenticatorValue)) {
    logger.error("Missing authenticator key {}.authenticator in configuration file.",servletName);
  }
 else {
    authenticatorClass=loadClass(authenticatorValue);
    if (authenticatorClass == null) {
      logger.error("Unable	 to instantiate authenticator {}",authenticatorValue);
    }
  }
  if (StringUtils.isNotBlank(userAutoCreateValue)) {
    userAutoCreate=Services.parseBoolean(userAutoCreateValue,false);
  }
  if (StringUtils.isNotBlank(userAutoLoginValue)) {
    userAutoLogin=Services.parseBoolean(userAutoLoginValue,false);
  }
  if (StringUtils.isNotBlank(defaultPropertyKeyValue)) {
    this.defaultPropertyView=defaultPropertyKeyValue;
  }
  if (StringUtils.isNotBlank(outputDepthValue)) {
    this.outputNestingDepth=Services.parseInt(outputDepthValue,3);
  }
}
