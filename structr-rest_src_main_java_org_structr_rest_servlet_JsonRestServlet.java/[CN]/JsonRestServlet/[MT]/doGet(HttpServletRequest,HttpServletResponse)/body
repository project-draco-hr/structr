{
  SecurityContext securityContext=getSecurityContext(request,response);
  try {
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=utf-8");
    securityContext.initializeAndExamineRequest(request,response);
    propertyView.set(securityContext,defaultPropertyView);
    double queryTimeStart=System.nanoTime();
    Resource resource=ResourceHelper.applyViewTransformation(request,securityContext,ResourceHelper.optimizeConstraintChain(ResourceHelper.parsePath(securityContext,request,resourceMap,propertyView,defaultIdProperty),defaultIdProperty),propertyView);
    securityContext.examineRequest(request,resource.getResourceSignature(),resource.getGrant(request,response),propertyView.get(securityContext));
    String pageSizeParameter=request.getParameter(REQUEST_PARAMETER_PAGE_SIZE);
    String pageParameter=request.getParameter(REQUEST_PARAMETER_PAGE_NUMBER);
    String offsetId=request.getParameter(REQUEST_PARAMETER_OFFSET_ID);
    String sortOrder=request.getParameter(REQUEST_PARAMETER_SORT_ORDER);
    String sortKeyName=request.getParameter(REQUEST_PARAMETER_SORT_KEY);
    boolean sortDescending=(sortOrder != null && "desc".equals(sortOrder.toLowerCase()));
    int pageSize=parseInt(pageSizeParameter,NodeFactory.DEFAULT_PAGE_SIZE);
    int page=parseInt(pageParameter,NodeFactory.DEFAULT_PAGE);
    PropertyKey sortKey=null;
    if (sortKeyName != null) {
      Class<? extends GraphObject> type=resource.getEntityClass();
      sortKey=EntityContext.getPropertyKeyForDatabaseName(type,sortKeyName);
    }
    Result result=resource.doGet(sortKey,sortDescending,pageSize,page,offsetId);
    result.setIsCollection(resource.isCollectionResource());
    result.setIsPrimitiveArray(resource.isPrimitiveArray());
    PagingHelper.addPagingParameter(result,pageSize,page);
    double queryTimeEnd=System.nanoTime();
    if (result != null) {
      result.setPropertyView(propertyView.get(securityContext));
      resource.postProcessResultSet(result);
      DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
      result.setQueryTime(decimalFormat.format((queryTimeEnd - queryTimeStart) / 1000000000.0));
      Writer writer=response.getWriter();
      gson.toJson(result,writer);
      response.setStatus(HttpServletResponse.SC_OK);
      writer.append("\n");
    }
 else {
      logger.log(Level.WARNING,"Result was null!");
      int code=HttpServletResponse.SC_NO_CONTENT;
      response.setStatus(code);
      Writer writer=response.getWriter();
      writer.append(jsonError(code,"Result was null!"));
    }
  }
 catch (  FrameworkException frameworkException) {
    response.setStatus(frameworkException.getStatus());
    gson.toJson(frameworkException,response.getWriter());
    response.getWriter().println();
  }
catch (  JsonSyntaxException jsex) {
    logger.log(Level.WARNING,"JsonSyntaxException in GET",jsex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in GET: " + jsex.getMessage()));
  }
catch (  JsonParseException jpex) {
    logger.log(Level.WARNING,"JsonParseException in GET",jpex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in GET: " + jpex.getMessage()));
  }
catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception in GET",t);
    int code=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in GET: " + t.getMessage()));
  }
 finally {
    try {
      response.getWriter().flush();
      response.getWriter().close();
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to flush and close response: {0}",t.getMessage());
    }
    securityContext.cleanUp();
  }
}
