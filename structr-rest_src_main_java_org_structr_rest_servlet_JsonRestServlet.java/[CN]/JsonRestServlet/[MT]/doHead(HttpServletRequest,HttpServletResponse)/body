{
  SecurityContext securityContext=null;
  Authenticator authenticator=null;
  Resource resource=null;
  try {
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=utf-8");
    try (final Tx tx=StructrApp.getInstance().tx()){
      authenticator=config.getAuthenticator();
      securityContext=authenticator.initializeAndExamineRequest(request,response);
      tx.success();
    }
     final App app=StructrApp.getInstance(securityContext);
    propertyView.set(securityContext,config.getDefaultPropertyView());
    try (final Tx tx=app.tx()){
      resource=ResourceHelper.applyViewTransformation(request,securityContext,ResourceHelper.optimizeNestedResourceChain(ResourceHelper.parsePath(securityContext,request,resourceMap,propertyView,config.getDefaultIdProperty()),config.getDefaultIdProperty()),propertyView);
      authenticator.checkResourceAccess(request,resource.getResourceSignature(),propertyView.get(securityContext));
      tx.success();
    }
     String pageSizeParameter=request.getParameter(REQUEST_PARAMETER_PAGE_SIZE);
    String pageParameter=request.getParameter(REQUEST_PARAMETER_PAGE_NUMBER);
    String offsetId=request.getParameter(REQUEST_PARAMETER_OFFSET_ID);
    String sortOrder=request.getParameter(REQUEST_PARAMETER_SORT_ORDER);
    String sortKeyName=request.getParameter(REQUEST_PARAMETER_SORT_KEY);
    boolean sortDescending=(sortOrder != null && "desc".equals(sortOrder.toLowerCase()));
    int pageSize=HttpService.parseInt(pageSizeParameter,NodeFactory.DEFAULT_PAGE_SIZE);
    int page=HttpService.parseInt(pageParameter,NodeFactory.DEFAULT_PAGE);
    PropertyKey sortKey=null;
    if (sortKeyName != null) {
      Class<? extends GraphObject> type=resource.getEntityClass();
      if (type == null) {
        type=AbstractNode.class;
      }
      sortKey=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(type,sortKeyName);
    }
    boolean retry=true;
    while (retry) {
      try (final Tx tx=app.tx()){
        resource.doGet(sortKey,sortDescending,pageSize,page,offsetId);
        tx.success();
        retry=false;
      }
 catch (      DeadlockDetectedException ddex) {
        retry=true;
      }
    }
    response.setStatus(HttpServletResponse.SC_OK);
  }
 catch (  FrameworkException frameworkException) {
    response.setStatus(frameworkException.getStatus());
    gson.get().toJson(frameworkException,response.getWriter());
    response.getWriter().println();
  }
catch (  JsonSyntaxException jsex) {
    logger.log(Level.WARNING,"JsonSyntaxException in HEAD",jsex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"Json syntax exception in HEAD: " + jsex.getMessage()));
  }
catch (  JsonParseException jpex) {
    logger.log(Level.WARNING,"JsonParseException in HEAD",jpex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"Parser exception in HEAD: " + jpex.getMessage()));
  }
catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception in HEAD",t);
    int code=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"Exception in HEAD: " + t.getMessage()));
  }
 finally {
    try {
      response.getWriter().close();
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to flush and close response: {0}",t.getMessage());
    }
  }
}
