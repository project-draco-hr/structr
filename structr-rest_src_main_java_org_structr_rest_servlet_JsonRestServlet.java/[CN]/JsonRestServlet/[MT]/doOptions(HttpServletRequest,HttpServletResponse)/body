{
  final SecurityContext securityContext;
  final Authenticator authenticator;
  final Resource resource;
  RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_BAD_REQUEST);
  try {
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=utf-8");
    try (final Tx tx=StructrApp.getInstance().tx()){
      authenticator=config.getAuthenticator();
      securityContext=authenticator.initializeAndExamineRequest(request,response);
      tx.success();
    }
     final App app=StructrApp.getInstance(securityContext);
    try (final Tx tx=app.tx()){
      resource=ResourceHelper.applyViewTransformation(request,securityContext,ResourceHelper.optimizeNestedResourceChain(ResourceHelper.parsePath(securityContext,request,resourceMap,propertyView,config.getDefaultIdProperty()),config.getDefaultIdProperty()),propertyView);
      authenticator.checkResourceAccess(securityContext,request,resource.getResourceSignature(),propertyView.get(securityContext));
      tx.success();
    }
     boolean retry=true;
    while (retry) {
      try (final Tx tx=app.tx()){
        result=resource.doOptions();
        tx.success();
        retry=false;
      }
 catch (      DeadlockDetectedException ddex) {
        retry=true;
      }
    }
    try (final Tx tx=app.tx()){
      result.commitResponse(gson.get(),response);
      tx.success();
    }
   }
 catch (  FrameworkException frameworkException) {
    response.setStatus(frameworkException.getStatus());
    gson.get().toJson(frameworkException,response.getWriter());
    response.getWriter().println();
  }
catch (  JsonSyntaxException jsex) {
    logger.log(Level.WARNING,"JsonSyntaxException in OPTIONS",jsex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"JsonSyntaxException in OPTIONS: " + jsex.getMessage()));
  }
catch (  JsonParseException jpex) {
    logger.log(Level.WARNING,"JsonParseException in OPTIONS",jpex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"JsonSyntaxException in OPTIONS: " + jpex.getMessage()));
  }
catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception in OPTIONS",t);
    int code=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    response.setStatus(code);
    response.getWriter().append(RestMethodResult.jsonError(code,"JsonSyntaxException in OPTIONS: " + t.getMessage()));
  }
 finally {
    try {
      response.getWriter().close();
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to flush and close response: {0}",t.getMessage());
    }
  }
}
