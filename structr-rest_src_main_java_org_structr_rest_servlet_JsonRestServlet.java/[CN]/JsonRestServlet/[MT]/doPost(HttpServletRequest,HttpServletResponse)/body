{
  SecurityContext securityContext=null;
  Authenticator authenticator=null;
  RestMethodResult result=null;
  JsonInput propertySet=null;
  try {
    try (final Tx tx=StructrApp.getInstance().tx()){
      authenticator=getAuthenticator();
      securityContext=authenticator.initializeAndExamineRequest(request,response);
      tx.success();
    }
     request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=UTF-8");
    try (final Tx tx=StructrApp.getInstance().tx()){
      propertySet=gson.get().fromJson(request.getReader(),JsonInput.class);
      tx.success();
    }
     if (securityContext != null) {
      List<Resource> chain=ResourceHelper.parsePath(securityContext,request,resourceMap,propertyView,defaultIdProperty);
      Resource resource=ResourceHelper.optimizeNestedResourceChain(chain,defaultIdProperty);
      Map<String,Object> properties=convertPropertySetToMap(propertySet);
      String resourceSignature=resource.getResourceSignature();
      try (final Tx tx=StructrApp.getInstance().tx()){
        authenticator.checkResourceAccess(request,resourceSignature,propertyView.get(securityContext));
        tx.success();
      }
       try (final Tx tx=StructrApp.getInstance().tx()){
        result=resource.doPost(properties);
        tx.success();
      }
       propertyView.set(securityContext,defaultPropertyView);
      try (final Tx tx=StructrApp.getInstance().tx()){
        result.commitResponse(gson.get(),response);
        tx.success();
      }
     }
 else {
      try (final Tx tx=StructrApp.getInstance().tx()){
        result=new RestMethodResult(HttpServletResponse.SC_FORBIDDEN);
        result.commitResponse(gson.get(),response);
        tx.success();
      }
     }
  }
 catch (  FrameworkException frameworkException) {
    response.setStatus(frameworkException.getStatus());
    gson.get().toJson(frameworkException,response.getWriter());
    response.getWriter().println();
  }
catch (  JsonSyntaxException jsex) {
    logger.log(Level.WARNING,"JsonSyntaxException in POST",jsex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in POST: " + jsex.getMessage()));
  }
catch (  JsonParseException jpex) {
    logger.log(Level.WARNING,"JsonParseException in POST",jpex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonParseException in POST: " + jpex.getMessage()));
  }
catch (  UnsupportedOperationException uoe) {
    logger.log(Level.WARNING,"POST not supported",uoe);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"POST not supported: " + uoe.getMessage()));
  }
catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception in POST",t);
    int code=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in POST: " + t.getMessage()));
  }
 finally {
    try {
      response.getWriter().flush();
      response.getWriter().close();
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to flush and close response: {0}",t.getMessage());
    }
    securityContext.cleanUp();
  }
}
