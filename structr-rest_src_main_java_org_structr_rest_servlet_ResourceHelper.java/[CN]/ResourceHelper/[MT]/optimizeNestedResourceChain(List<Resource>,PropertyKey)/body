{
  ViewFilterResource view=null;
  int num=resourceChain.size();
  boolean found=false;
  do {
    for (Iterator<Resource> it=resourceChain.iterator(); it.hasNext(); ) {
      Resource constr=it.next();
      if (constr instanceof ViewFilterResource) {
        view=(ViewFilterResource)constr;
        it.remove();
      }
    }
    found=false;
    try {
      for (int i=0; i < num; i++) {
        Resource firstElement=resourceChain.get(i);
        Resource secondElement=resourceChain.get(i + 1);
        Resource combinedConstraint=firstElement.tryCombineWith(secondElement);
        if (combinedConstraint != null) {
          resourceChain.remove(firstElement);
          resourceChain.remove(secondElement);
          resourceChain.add(i,combinedConstraint);
          found=true;
          if (combinedConstraint instanceof RelationshipFollowingResource) {
            break;
          }
        }
      }
    }
 catch (    Throwable t) {
    }
  }
 while (found);
  if (resourceChain.size() == 1) {
    Resource finalResource=resourceChain.get(0);
    if (view != null) {
      finalResource=finalResource.tryCombineWith(view);
    }
    if (finalResource == null) {
      finalResource=resourceChain.get(0);
    }
    finalResource.configureIdProperty(defaultIdProperty);
    return finalResource;
  }
  throw new IllegalPathException();
}
