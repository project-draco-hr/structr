{
  final String projectNodeId=createSchemaNode("Project",new Pair("_name","+String!"));
  final String taskNodeId=createSchemaNode("Task",new Pair("_name","+String"));
  final String workerNodeId=createSchemaNode("Worker",new Pair("_name","+String!"));
  final String companyNodeId=createSchemaNode("Company",new Pair("_name","+String!"));
  createSchemaRelationships(projectNodeId,taskNodeId,"TASK","1","*","project","tasks",Relation.ALWAYS,Relation.SOURCE_TO_TARGET);
  createSchemaRelationships(taskNodeId,taskNodeId,"SUBTASK","1","*","parentTask","subtasks",Relation.ALWAYS,Relation.SOURCE_TO_TARGET);
  createSchemaRelationships(workerNodeId,taskNodeId,"WORKS_ON","1","*","worker","tasks",Relation.ALWAYS,Relation.SOURCE_TO_TARGET);
  createSchemaRelationships(workerNodeId,companyNodeId,"WORKS_AT","*","1","workers","company",Relation.ALWAYS,Relation.SOURCE_TO_TARGET);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _tasks\" }").expect().statusCode(200).when().put("/schema_nodes/" + projectNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _subtasks, _worker\" }").expect().statusCode(200).when().put("/schema_nodes/" + taskNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _tasks, _company\" }").expect().statusCode(200).when().put("/schema_nodes/" + workerNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _workers\" }").expect().statusCode(200).when().put("/schema_nodes/" + companyNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{" + "	name: Project1," + "	tasks: ["+ "		{"+ "			name: Task1,"+ "			worker: {"+ "				name: Worker1,"+ "				company: { "+ "					name: Company1"+ "				}"+ "			},"+ "			subtasks: ["+ "				{"+ "					name: Subtask1.1,"+ "					worker: {"+ "						name: Worker1,"+ "						company: { "+ "							name: Company1"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask1.2,"+ "					worker: {"+ "						name: Worker2,"+ "						company: { "+ "							name: Company1"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask1.3,"+ "					worker: {"+ "						name: Worker2,"+ "						company: { "+ "							name: Company1"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask1.4,"+ "					worker: {"+ "						name: Worker3,"+ "						company: { "+ "							name: Company2"+ "						}"+ "					}"+ "				}"+ "			]"+ "		},"+ "		{"+ "			name: Task2,"+ "			worker: {"+ "				name: Worker2,"+ "				company: { "+ "					name: Company1"+ "				}"+ "			}"+ "		},"+ "		{"+ "			name: Task3,"+ "			worker: {"+ "				name: Worker3,"+ "				company: { "+ "					name: Company2"+ "				}"+ "			}"+ "		},"+ "		{"+ "			name: Task4,"+ "			worker: {"+ "				name: Worker4,"+ "				company: { "+ "					name: Company3"+ "				}"+ "			},"+ "			subtasks: ["+ "				{"+ "					name: Subtask4.1,"+ "					worker: {"+ "						name: Worker4,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask4.2,"+ "					worker: {"+ "						name: Worker4,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask4.3,"+ "					worker: {"+ "						name: Worker4,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					}"+ "				},"+ "				{"+ "					name: Subtask4.4,"+ "					worker: {"+ "						name: Worker5,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					}"+ "				}"+ "			]"+ "		},"+ "		{"+ "			name: Task5,"+ "			worker: {"+ "				name: Worker5,"+ "				company: { "+ "					name: Company3"+ "				}"+ "			},"+ "			subtasks: ["+ "				{"+ "					name: Subtask5.1,"+ "					worker: {"+ "						name: Worker4,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					},"+ "					subtasks: ["+ "						{"+ "							name: Subtask5.1.1,"+ "							worker: {"+ "								name: Worker4,"+ "								company: { "+ "									name: Company3"+ "								}"+ "							}"+ "						},"+ "						{"+ "							name: Subtask5.1.2,"+ "							worker: {"+ "								name: Worker4,"+ "								company: { "+ "									name: Company3"+ "								}"+ "							}"+ "						}"+ "					]"+ "				},"+ "				{"+ "					name: Subtask5.2,"+ "					worker: {"+ "						name: Worker4,"+ "						company: { "+ "							name: Company3"+ "						}"+ "					},"+ "					subtasks: ["+ "						{"+ "							name: Subtask5.2.1,"+ "							worker: {"+ "								name: Worker4,"+ "								company: { "+ "									name: Company3"+ "								}"+ "							}"+ "						},"+ "						{"+ "							name: Subtask5.2.2,"+ "							worker: {"+ "								name: Worker4,"+ "								company: { "+ "									name: Company3"+ "								}"+ "							}"+ "						}"+ "					]"+ "				}"+ "			]"+ "		}"+ "	]"+ "}").expect().statusCode(201).when().post("/projects");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Project1")).body("result[0].tasks[0].name",equalTo("Task1")).body("result[0].tasks[0].worker.name",equalTo("Worker1")).body("result[0].tasks[1].name",equalTo("Task2")).body("result[0].tasks[1].worker.name",equalTo("Worker2")).body("result[0].tasks[2].name",equalTo("Task3")).body("result[0].tasks[2].worker.name",equalTo("Worker3")).body("result[0].tasks[3].name",equalTo("Task4")).body("result[0].tasks[3].worker.name",equalTo("Worker4")).body("result[0].tasks[4].name",equalTo("Task5")).body("result[0].tasks[4].worker.name",equalTo("Worker5")).when().get("/projects/test?name=Project1");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Task1")).body("result[0].worker.name",equalTo("Worker1")).body("result[0].worker.company.name",equalTo("Company1")).body("result[0].subtasks[0].name",equalTo("Subtask1.1")).body("result[0].subtasks[0].worker.name",equalTo("Worker1")).body("result[0].subtasks[0].worker.company.name",equalTo("Company1")).body("result[0].subtasks[1].name",equalTo("Subtask1.2")).body("result[0].subtasks[1].worker.name",equalTo("Worker2")).body("result[0].subtasks[1].worker.company.name",equalTo("Company1")).body("result[0].subtasks[2].name",equalTo("Subtask1.3")).body("result[0].subtasks[2].worker.name",equalTo("Worker2")).body("result[0].subtasks[2].worker.company.name",equalTo("Company1")).body("result[0].subtasks[3].name",equalTo("Subtask1.4")).body("result[0].subtasks[3].worker.name",equalTo("Worker3")).body("result[0].subtasks[3].worker.company.name",equalTo("Company2")).when().get("/tasks/test?name=Task1");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Task2")).body("result[0].worker.name",equalTo("Worker2")).body("result[0].worker.company.name",equalTo("Company1")).when().get("/tasks/test?name=Task2");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Task3")).body("result[0].worker.name",equalTo("Worker3")).body("result[0].worker.company.name",equalTo("Company2")).when().get("/tasks/test?name=Task3");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Task4")).body("result[0].worker.name",equalTo("Worker4")).body("result[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[0].name",equalTo("Subtask4.1")).body("result[0].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[1].name",equalTo("Subtask4.2")).body("result[0].subtasks[1].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].worker.company.name",equalTo("Company3")).body("result[0].subtasks[2].name",equalTo("Subtask4.3")).body("result[0].subtasks[2].worker.name",equalTo("Worker4")).body("result[0].subtasks[2].worker.company.name",equalTo("Company3")).body("result[0].subtasks[3].name",equalTo("Subtask4.4")).body("result[0].subtasks[3].worker.name",equalTo("Worker5")).body("result[0].subtasks[3].worker.company.name",equalTo("Company3")).when().get("/tasks/test?name=Task4");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(200)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Task5")).body("result[0].worker.name",equalTo("Worker5")).body("result[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[0].name",equalTo("Subtask5.1")).body("result[0].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[0].subtasks[0].name",equalTo("Subtask5.1.1")).body("result[0].subtasks[0].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[0].subtasks[1].name",equalTo("Subtask5.1.2")).body("result[0].subtasks[0].subtasks[1].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].name",equalTo("Subtask5.2")).body("result[0].subtasks[1].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].worker.company.name",equalTo("Company3")).body("result[0].subtasks[1].subtasks[0].name",equalTo("Subtask5.2.1")).body("result[0].subtasks[1].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].subtasks[1].name",equalTo("Subtask5.2.2")).body("result[0].subtasks[1].subtasks[1].worker.name",equalTo("Worker4")).when().get("/tasks/test?name=Task5");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Subtask5.1")).body("result[0].worker.name",equalTo("Worker4")).body("result[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[0].name",equalTo("Subtask5.1.1")).body("result[0].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[1].name",equalTo("Subtask5.1.2")).body("result[0].subtasks[1].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].worker.company.name",equalTo("Company3")).when().get("/tasks/test?name=Subtask5.1");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Subtask5.2")).body("result[0].worker.name",equalTo("Worker4")).body("result[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[0].name",equalTo("Subtask5.2.1")).body("result[0].subtasks[0].worker.name",equalTo("Worker4")).body("result[0].subtasks[0].worker.company.name",equalTo("Company3")).body("result[0].subtasks[1].name",equalTo("Subtask5.2.2")).body("result[0].subtasks[1].worker.name",equalTo("Worker4")).body("result[0].subtasks[1].worker.company.name",equalTo("Company3")).when().get("/tasks/test?name=Subtask5.2");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(3)).body("result_count",equalTo(3)).body("result[0].name",equalTo("Company1")).body("result[1].name",equalTo("Company2")).body("result[2].name",equalTo("Company3")).when().get("/companies/test");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(5)).body("result_count",equalTo(5)).body("result[0].name",equalTo("Worker1")).body("result[0].company.name",equalTo("Company1")).body("result[1].name",equalTo("Worker2")).body("result[1].company.name",equalTo("Company1")).body("result[2].name",equalTo("Worker3")).body("result[2].company.name",equalTo("Company2")).body("result[3].name",equalTo("Worker4")).body("result[3].company.name",equalTo("Company3")).body("result[4].name",equalTo("Worker5")).body("result[4].company.name",equalTo("Company3")).when().get("/workers/test");
}
