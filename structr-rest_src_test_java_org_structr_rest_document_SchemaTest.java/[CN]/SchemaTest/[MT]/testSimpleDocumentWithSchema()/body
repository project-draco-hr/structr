{
  final String projectNodeId=createSchemaNode("Project",new Pair("_name","+String!"));
  final String taskNodeId=createSchemaNode("Task",new Pair("_name","+String"));
  final String workerNodeId=createSchemaNode("Worker",new Pair("_name","+String!"));
  createSchemaRelationships(projectNodeId,taskNodeId,"TASK","1","*","project","tasks",Relation.SOURCE_TO_TARGET,Relation.SOURCE_TO_TARGET);
  createSchemaRelationships(taskNodeId,taskNodeId,"SUBTASK","1","*","parentTask","subtasks",Relation.SOURCE_TO_TARGET,Relation.SOURCE_TO_TARGET);
  createSchemaRelationships(workerNodeId,taskNodeId,"WORKS","1","*","worker","tasks",Relation.ALWAYS,Relation.SOURCE_TO_TARGET);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _tasks\" }").expect().statusCode(200).when().put("/schema_nodes/" + projectNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _project, _subtasks, _parentTask, _worker\" }").expect().statusCode(200).when().put("/schema_nodes/" + taskNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{ \"__test\": \"_name, _tasks\" }").expect().statusCode(200).when().put("/schema_nodes/" + workerNodeId);
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{\"name\":\"Project1\",\"tasks\":[{\"name\":\"Task1\",\"worker\":{\"name\":\"Worker1\"},\"subtasks\":[{\"name\":\"Subtask1.1\",\"worker\":{\"name\":\"Worker1\"}},{\"name\":\"Subtask1.2\",\"worker\":{\"name\":\"Worker2\"}}]}]}").expect().statusCode(201).when().post("/projects");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Project1")).body("result[0].tasks[0].name",equalTo("Task1")).body("result[0].tasks[0].worker.name",equalTo("Worker1")).body("result[0].tasks[0].subtasks[0].name",equalTo("Subtask1.1")).body("result[0].tasks[0].subtasks[0].worker.name",equalTo("Worker1")).body("result[0].tasks[0].subtasks[1].name",equalTo("Subtask1.2")).body("result[0].tasks[0].subtasks[1].worker.name",equalTo("Worker2")).when().get("/projects/test?name=Project1");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body("{\"name\":\"Project2\",\"tasks\":[{\"name\":\"Task2\",\"worker\":{\"name\":\"Worker2\"},\"subtasks\":[{\"name\":\"Subtask2.1\",\"worker\":{\"name\":\"Worker2\"}},{\"name\":\"Subtask2.2\",\"worker\":{\"name\":\"Worker3\"}}]}]}").expect().statusCode(201).when().post("/projects");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Project2")).body("result[0].tasks[0].name",equalTo("Task2")).body("result[0].tasks[0].worker.name",equalTo("Worker2")).body("result[0].tasks[0].subtasks[0].name",equalTo("Subtask2.1")).body("result[0].tasks[0].subtasks[0].worker.name",equalTo("Worker2")).body("result[0].tasks[0].subtasks[1].name",equalTo("Subtask2.2")).body("result[0].tasks[0].subtasks[1].worker.name",equalTo("Worker3")).when().get("/projects/test?name=Project2");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result",hasSize(1)).body("result_count",equalTo(1)).body("result[0].name",equalTo("Worker2")).body("result[0].tasks",hasSize(3)).body("result[0].tasks[0].name",equalTo("Subtask1.2")).body("result[0].tasks[1].name",equalTo("Subtask2.1")).body("result[0].tasks[2].name",equalTo("Task2")).when().get("/workers/test?name=Worker2");
}
