{
  try {
    final List<TestUser> users=createTestNodes(TestUser.class,3);
    final List<TestThree> testThrees=new LinkedList<>();
    final Random random=new Random();
    String uuid=null;
    int count=0;
    try (final Tx tx=app.tx()){
      for (      final TestUser user : users) {
        for (int i=0; i < 20; i++) {
          testThrees.add(app.create(TestThree.class,new NodeAttribute(AbstractNode.name,"test" + count++),new NodeAttribute(AbstractNode.owner,user),new NodeAttribute(TestThree.enumProperty,TestEnum.values()[random.nextInt(TestEnum.values().length)])));
        }
      }
      uuid=users.get(0).getUuid();
      tx.success();
    }
     try (final Tx tx=app.tx()){
      for (      final TestUser user : users) {
        for (        final TestThree test : app.nodeQuery(TestThree.class).and(AbstractNode.owner,user).and(TestThree.enumProperty,TestEnum.Status1).getAsList()) {
          assertEquals("Invalid enum query result",TestEnum.Status1,test.getProperty(TestThree.enumProperty));
        }
      }
      tx.success();
    }
     RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).when().get(concat("/test_threes?sort=createdDate&owner=" + uuid + "&enumProperty="+ TestEnum.Status1));
  }
 catch (  FrameworkException ex) {
    logger.log(Level.WARNING,"",ex);
    fail("Unexpected exception");
  }
}
