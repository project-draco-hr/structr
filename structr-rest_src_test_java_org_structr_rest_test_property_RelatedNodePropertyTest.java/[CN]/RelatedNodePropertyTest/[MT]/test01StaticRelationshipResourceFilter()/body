{
  String test01=createEntity("/test_sixs","{ name: test01, aString: string01, anInt: 1 }");
  String test02=createEntity("/test_sixs","{ name: test02, aString: string02, anInt: 2 }");
  String test03=createEntity("/test_sixs","{ name: test03, aString: string03, anInt: 3 }");
  String test04=createEntity("/test_sixs","{ name: test04, aString: string04, anInt: 4 }");
  String test09=createEntity("/test_sevens","{ name: test09, testSixIds: [",test01,",",test02,"] }");
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(200)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(201)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(404)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result.testSixIds[0]",equalTo(test01)).body("result.testSixIds[1]",equalTo(test02)).when().get(concat("/test_sevens/",test09));
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(200)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(201)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(404)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).body(" { testSixIds: [" + test03 + ","+ test04+ "] } ").expect().statusCode(200).when().put(concat("/test_sevens/",test09));
  RestAssured.given().contentType("application/json; charset=UTF-8").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(200)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(201)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(404)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().statusCode(200).body("result.testSixIds",containsInAnyOrder(test03,test04)).when().get(concat("/test_sevens/",test09));
}
