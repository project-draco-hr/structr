{
  final boolean isDeclaration=isJavascript() && "var".equals(previousToken);
  final boolean isAssignment=isJavascript() && "=".equals(previousToken);
  final boolean isDotNotationRequest=".".equals(currentToken);
  final ConfigurationProvider config=StructrApp.getConfiguration();
  final Map<String,DataKey> dataKeys=new TreeMap<>();
  final List<Hint> hints=new LinkedList<>();
  final List<Hint> local=new LinkedList<>();
  Class currentObjectType=null;
  if (currentNode != null) {
    recursivelyFindDataKeys(currentNode,dataKeys);
  }
switch (previousToken) {
case "current":
    currentObjectType=AbstractNode.class;
  break;
case "this":
currentObjectType=DOMNode.class;
break;
case "me":
currentObjectType=User.class;
break;
case "page":
currentObjectType=Page.class;
break;
case "link":
currentObjectType=File.class;
break;
case "template":
currentObjectType=Template.class;
break;
case "parent":
currentObjectType=DOMElement.class;
break;
default :
DataKey key=dataKeys.get(previousToken);
if (key != null) {
currentObjectType=key.identifyType(config);
}
 else if (StringUtils.isNotBlank(thirdToken)) {
key=dataKeys.get(thirdToken);
if (key != null) {
currentObjectType=key.identifyType(config);
final PropertyKey nestedKey=config.getPropertyKeyForJSONName(currentObjectType,previousToken,false);
if (nestedKey != null) {
currentObjectType=nestedKey.relatedType();
}
}
}
break;
}
if (!keywords.contains(previousToken) && !isDotNotationRequest && !dataKeys.containsKey(previousToken)) {
if (!isAssignment) {
for (final Function<Object,Object> func : Functions.functions.values()) {
hints.add(func);
}
}
Collections.sort(hints,comparator);
local.add(createHint("current","","Current data object",!isJavascript() ? null : "get('current')"));
local.add(createHint("request","","Current request object",!isJavascript() ? null : "get('request')"));
local.add(createHint("this","","Current object",!isJavascript() ? null : "get('this')"));
local.add(createHint("element","","Current object",!isJavascript() ? null : "get('element')"));
local.add(createHint("page","","Current page",!isJavascript() ? null : "get('page')"));
local.add(createHint("link","","Current link",!isJavascript() ? null : "get('link')"));
local.add(createHint("template","","Closest template node",!isJavascript() ? null : "get('template')"));
local.add(createHint("parent","","Parent node",!isJavascript() ? null : "get('parent')"));
local.add(createHint("children","","Collection of child nodes",!isJavascript() ? null : "get('children')"));
local.add(createHint("host","","Client's host name",!isJavascript() ? null : "get('host')"));
local.add(createHint("port","","Client's port",!isJavascript() ? null : "get('port')"));
local.add(createHint("path_info","","URL path",!isJavascript() ? null : "get('path_info')"));
local.add(createHint("now","","Current date",!isJavascript() ? null : "get('now')"));
local.add(createHint("me","","Current user",!isJavascript() ? null : "get('me)"));
local.add(createHint("locale","","Current locale",!isJavascript() ? null : "get('locale')"));
}
Collections.sort(local,comparator);
hints.addAll(0,local);
if (currentObjectType == null && !dataKeys.containsKey(previousToken) && !isDotNotationRequest || isAssignment) {
for (final DataKey dataKey : dataKeys.values()) {
final String replacement=isJavascript() && !isDeclaration ? "get('" + dataKey.getDataKey() + "')" : null;
final Hint dataKeyHint=createHint(dataKey.getDataKey(),"",dataKey.getDescription(),replacement);
dataKeyHint.allowNameModification(!isDeclaration);
hints.add(0,dataKeyHint);
}
}
collectHintsForType(hints,config,currentObjectType);
return hints;
}
