{
  final CloudContext cloudContext=new CloudContext();
  client.send(new PullNodeRequestContainer(rootNodeId,recursive));
  context.progress();
  final Message msg=client.waitForMessage();
  if (msg instanceof PullNodeRequestContainer) {
    final PullNodeRequestContainer response=(PullNodeRequestContainer)msg;
    final int numNodes=response.getNumNodes();
    final int numRels=response.getNumRels();
    final String key=response.getKey();
    context.increaseTotal(numNodes + numRels);
    for (int i=0; i < numNodes; i++) {
      client.send(new PullNode(key,i));
      final Message nodeMessage=client.waitForMessage();
      if (nodeMessage instanceof PullNode) {
        final PullNode pullNode=(PullNode)nodeMessage;
        if (File.class.isAssignableFrom(pullNode.getType())) {
          context.progress();
          client.send(new PullFile(key,i));
          final Message fileMessage=client.waitForMessage();
          if (fileMessage instanceof PullFile) {
            final PullFile pullFile=(PullFile)fileMessage;
            Message chunkMessage=null;
            int sequenceNumber=0;
            context.increaseTotal((Long.valueOf(pullFile.getFileSize() / CloudService.CHUNK_SIZE).intValue() + 2));
            cloudContext.beginFile(pullFile);
            do {
              for (int j=0; j < CloudService.LIVE_PACKET_COUNT; j++) {
                client.send(new PullChunk(pullFile.getSourceNodeId(),sequenceNumber++,pullFile.getFileSize()));
              }
              for (int j=0; j < CloudService.LIVE_PACKET_COUNT; j++) {
                chunkMessage=client.waitForMessage();
                if (chunkMessage instanceof FileNodeChunk) {
                  cloudContext.fileChunk((FileNodeChunk)chunkMessage);
                  context.progress();
                }
 else {
                  break;
                }
              }
            }
 while (!(chunkMessage instanceof FileNodeEndChunk));
            if (chunkMessage instanceof FileNodeEndChunk) {
              cloudContext.finishFile((FileNodeEndChunk)chunkMessage);
              context.progress();
            }
          }
        }
 else {
          cloudContext.storeNode(pullNode);
          context.progress();
        }
      }
    }
    for (int i=0; i < numRels; i++) {
      client.send(new PullRelationship(key,i));
      final Message relMessage=client.waitForMessage();
      if (relMessage instanceof PullRelationship) {
        cloudContext.storeRelationship((PullRelationship)relMessage);
        context.progress();
      }
    }
  }
  return true;
}
