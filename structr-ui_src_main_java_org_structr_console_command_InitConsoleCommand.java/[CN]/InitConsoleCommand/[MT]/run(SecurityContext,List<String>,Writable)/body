{
  final Principal user=securityContext.getUser(false);
  final int paramCount=parameters.size();
  if (user != null && user.isAdmin()) {
    NodeServiceCommand command=null;
    boolean isCreateLabels=false;
    boolean isIndex=false;
    boolean isIds=false;
    boolean hasCommand=false;
    boolean hasFor=false;
    boolean error=false;
    String type=null;
    String typeKey=null;
    String mode=null;
    for (int i=1; i < paramCount && !error; i++) {
      final String param=getParameter(parameters,i);
switch (param) {
case "index":
        if (hasCommand) {
          writable.println("Syntax error, too many parameters.");
          error=true;
        }
 else {
          command=StructrApp.getInstance(securityContext).command(BulkRebuildIndexCommand.class);
          command.setLogBuffer(writable);
          isIndex=true;
          hasCommand=true;
        }
      break;
case "ids":
    if (hasCommand) {
      writable.println("Syntax error, too many parameters.");
      error=true;
    }
 else {
      command=StructrApp.getInstance(securityContext).command(BulkSetUuidCommand.class);
      command.setLogBuffer(writable);
      isIds=true;
      hasCommand=true;
    }
  break;
case "labels":
if (hasCommand) {
  writable.println("Syntax error, too many parameters.");
  error=true;
}
 else {
  if ("relsOnly".equals(mode)) {
    writable.println("Cannot set labels on relationships.");
    error=true;
  }
 else {
    command=StructrApp.getInstance(securityContext).command(BulkCreateLabelsCommand.class);
    command.setLogBuffer(writable);
    isCreateLabels=true;
    hasCommand=true;
  }
}
break;
case "node":
if (hasCommand) {
if (isIndex) {
writable.println("Index type must be specified before the 'index' keyword.");
error=true;
}
 else if (isIds) {
writable.println("Entity type must be specified before the 'ids' keyword.");
error=true;
}
}
 else {
mode="nodesOnly";
typeKey="type";
}
break;
case "rel":
case "relationship":
if (hasCommand) {
if (isIndex) {
writable.println("Index type must be specified before the 'index' keyword.");
error=true;
}
 else if (isIds) {
writable.println("Entity type must be specified before the 'ids' keyword.");
error=true;
}
}
 else {
if (isCreateLabels) {
writable.println("Cannot set labels on relationships.");
error=true;
}
mode="relsOnly";
typeKey="relType";
}
break;
case "for":
if (!hasCommand) {
writable.println("Unknown init mode 'for'.");
error=true;
}
hasFor=true;
break;
default :
if (hasCommand && hasFor) {
if (StringUtils.isNotBlank(type)) {
writable.println("Syntax error, too many parameters.");
error=true;
break;
}
type=param;
if (typeKey == null) {
typeKey="type";
}
}
 else {
if (!hasCommand) {
writable.println("Unknown init mode '" + param + "'.");
error=true;
}
 else {
writable.println("Syntax error, please specify something like 'init node index for User'.");
error=true;
}
}
}
if (error) {
break;
}
}
if (!error && !hasCommand) {
writable.println("Please specify what to initialize.");
error=true;
}
if (!error && hasCommand && hasFor&& StringUtils.isEmpty(type)) {
writable.println("Missing type specification, please specify something like 'init node index for User'.");
error=true;
}
if (!error) {
if (command instanceof MaintenanceCommand) {
((MaintenanceCommand)command).execute(toMap("mode",mode,typeKey,type));
}
 else {
writable.println("Cannot execute command '" + command.getClass().getSimpleName() + "', wrong type.");
}
}
}
 else {
writable.println("You must be admin user to use this command.");
}
}
