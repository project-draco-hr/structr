{
  final Set<TypeDefinition> results=new LinkedHashSet<>();
  if (typeId != null) {
    final BaseTypeId baseTypeId=getBaseTypeId(typeId);
    if (baseTypeId != null) {
      results.addAll(getBaseTypeChildren(baseTypeId,includePropertyDefinitions));
    }
 else {
      final Class type=StructrApp.getConfiguration().getNodeEntityClass(typeId);
      if (type != null) {
        results.addAll(getTypeChildren(typeId,includePropertyDefinitions));
      }
 else {
        throw new CmisObjectNotFoundException("Type with ID " + typeId + " does not exist");
      }
    }
  }
 else {
    results.add(getDocumentTypeDefinition(BaseTypeId.CMIS_DOCUMENT.value(),includePropertyDefinitions,true));
    results.add(getFolderTypeDefinition(BaseTypeId.CMIS_FOLDER.value(),includePropertyDefinitions,true));
    results.add(getItemTypeDefinition(BaseTypeId.CMIS_ITEM.value(),includePropertyDefinitions,true));
    results.add(getPolicyTypeDefinition(BaseTypeId.CMIS_POLICY.value(),includePropertyDefinitions,true));
    results.add(getRelationshipTypeDefinition(BaseTypeId.CMIS_RELATIONSHIP.value(),includePropertyDefinitions,true));
    results.add(getSecondaryTypeDefinition(BaseTypeId.CMIS_SECONDARY.value(),includePropertyDefinitions,true));
  }
  final TypeDefinitionListImpl returnValue=new TypeDefinitionListImpl();
  final List<TypeDefinition> unpagedList=new LinkedList<>(results);
  final int resultSize=unpagedList.size();
  final List<TypeDefinition> pagedList=applyPaging(unpagedList,maxItems,skipCount);
  int skip=0;
  if (skipCount != null) {
    skip=skipCount.intValue();
  }
  returnValue.setNumItems(BigInteger.valueOf(resultSize));
  returnValue.setList(pagedList);
  returnValue.setHasMoreItems(resultSize > pagedList.size() + skip);
  return returnValue;
}
