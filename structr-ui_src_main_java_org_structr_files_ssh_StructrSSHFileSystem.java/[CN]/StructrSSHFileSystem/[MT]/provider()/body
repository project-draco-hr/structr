{
  return new FileSystemProvider(){
    @Override public String getScheme(){
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public FileSystem newFileSystem(    URI uri,    Map<String,?> env) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public FileSystem getFileSystem(    URI uri){
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public Path getPath(    URI uri){
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public SeekableByteChannel newByteChannel(    Path path,    Set<? extends OpenOption> options,    FileAttribute<?>... attrs) throws IOException {
      final AbstractFile file=((StructrSSHFile)path).getActualFile();
      return new SeekableByteChannel(){
        @Override public int read(        ByteBuffer bb) throws IOException {
          return ((File)file).getInputStream().read(bb.array());
        }
        @Override public int write(        ByteBuffer bb) throws IOException {
          ((File)file).getOutputStream().write(bb.array());
          return bb.array().length;
        }
        @Override public long position() throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public SeekableByteChannel position(        long l) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public long size() throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public SeekableByteChannel truncate(        long l) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public boolean isOpen(){
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public void close() throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
      }
;
    }
    @Override public DirectoryStream<Path> newDirectoryStream(    Path dir,    DirectoryStream.Filter<? super Path> filter) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public void createDirectory(    Path dir,    FileAttribute<?>... attrs) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
    }
    @Override public void delete(    Path path) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
    }
    @Override public void copy(    Path source,    Path target,    CopyOption... options) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
    }
    @Override public void move(    Path source,    Path target,    CopyOption... options) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
    }
    @Override public boolean isSameFile(    Path path,    Path path2) throws IOException {
      return path != null && path.equals(path);
    }
    @Override public boolean isHidden(    Path path) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      return false;
    }
    @Override public FileStore getFileStore(    Path path) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public void checkAccess(    Path path,    AccessMode... modes) throws IOException {
      logger.log(Level.INFO,"Checking access",new Object[]{path,modes});
    }
    @Override public <V extends FileAttributeView>V getFileAttributeView(    final Path path,    final Class<V> type,    final LinkOption... options){
      return (V)new PosixFileAttributeView(){
        @Override public String name(){
          return "posix";
        }
        @Override public PosixFileAttributes readAttributes() throws IOException {
          return new StructrPosixFileAttributes((StructrSSHFile)path);
        }
        @Override public void setPermissions(        Set<PosixFilePermission> set) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public void setGroup(        GroupPrincipal gp) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public void setTimes(        FileTime ft,        FileTime ft1,        FileTime ft2) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public UserPrincipal getOwner() throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
        @Override public void setOwner(        UserPrincipal up) throws IOException {
          throw new UnsupportedOperationException("Not supported yet.");
        }
      }
;
    }
    @Override public <A extends BasicFileAttributes>A readAttributes(    Path path,    Class<A> type,    LinkOption... options) throws IOException {
      logger.log(Level.INFO,"Read attributes",new Object[]{path,type,options});
      return (A)new StructrPosixFileAttributes((StructrSSHFile)path);
    }
    @Override public Map<String,Object> readAttributes(    Path path,    String attributes,    LinkOption... options) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      return null;
    }
    @Override public void setAttribute(    Path path,    String attribute,    Object value,    LinkOption... options) throws IOException {
      logger.log(Level.INFO,"Method not implemented yet");
      ;
    }
  }
;
}
