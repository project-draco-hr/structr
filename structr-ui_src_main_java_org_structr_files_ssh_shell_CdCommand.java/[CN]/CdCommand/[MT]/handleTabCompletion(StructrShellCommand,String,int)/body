{
  if (line.contains(" ") && line.length() > 3) {
    String incompletePath=line.substring(line.indexOf(" ") + 1);
    Folder baseFolder=null;
    String lastPathPart=null;
    if (incompletePath.startsWith("\"")) {
      incompletePath=incompletePath.substring(1);
    }
    final App app=StructrApp.getInstance(SecurityContext.getInstance(user,AccessMode.Backend));
    if ("..".equals(incompletePath)) {
      term.handleCharacter('/');
      return;
    }
    if (incompletePath.startsWith("/")) {
      incompletePath=incompletePath.substring(1);
    }
 else {
      baseFolder=parent.getCurrentFolder();
    }
    final String[] parts=incompletePath.split("[/]+");
    final int partCount=parts.length;
    try (final Tx tx=app.tx()){
      if (partCount == 1) {
        lastPathPart=parts[0];
      }
 else {
        lastPathPart=parts[partCount - 1];
        for (int i=0; i < partCount - 1; i++) {
          if (StringUtils.isNotBlank(parts[i])) {
            baseFolder=app.nodeQuery(Folder.class).and(Folder.parent,baseFolder).and(Folder.name,parts[i]).getFirst();
            if (baseFolder == null) {
              return;
            }
          }
        }
      }
      final List<Folder> allFolders=app.nodeQuery(Folder.class).and(Folder.parent,baseFolder).getAsList();
      final List<Folder> folders=new LinkedList<>();
      for (      final Folder folder : allFolders) {
        if (folder.getName().startsWith(lastPathPart)) {
          folders.add(folder);
        }
      }
      if (folders.size() > 1) {
        if (tabCount > 1) {
          displayAutocompleteSuggestions(parent,folders,line);
        }
      }
 else {
        final Folder folder=folders.get(0);
        if (lastPathPart.equals(folder.getName())) {
          if (tabCount > 1) {
            displayAutocompleteSuggestions(parent,folder.getProperty(Folder.folders),line);
          }
        }
 else {
          displayAutocompleteFolder(folder,lastPathPart);
        }
      }
      tx.success();
    }
 catch (    FrameworkException fex) {
      fex.printStackTrace();
    }
  }
}
