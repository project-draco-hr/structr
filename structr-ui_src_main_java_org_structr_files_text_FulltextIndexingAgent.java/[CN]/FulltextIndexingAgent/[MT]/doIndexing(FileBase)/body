{
  boolean parsingSuccessful=false;
  InputStream inputStream=null;
  String fileName=null;
  try (final Tx tx=StructrApp.getInstance().tx()){
    inputStream=file.getInputStream();
    fileName=file.getName();
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
  }
  if (inputStream != null) {
    final FulltextTokenizer tokenizer=new FulltextTokenizer(fileName);
    try (final InputStream is=inputStream){
      final AutoDetectParser parser=new AutoDetectParser();
      parser.parse(is,new BodyContentHandler(tokenizer),new Metadata());
      parsingSuccessful=true;
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
    if (parsingSuccessful) {
      try (Tx tx=StructrApp.getInstance().tx()){
        file.setProperty(extractedContent,tokenizer.getRawText());
        tokenizer.write(getName());
        final Principal _owner=file.getProperty(owner);
        if (_owner != null) {
          final String ownerName=_owner.getName();
          if (ownerName != null) {
            tokenizer.write(ownerName);
          }
          final String eMail=_owner.getProperty(User.eMail);
          if (eMail != null) {
            tokenizer.write(eMail);
          }
          final String twitterName=_owner.getProperty(User.twitterName);
          if (twitterName != null) {
            tokenizer.write(twitterName);
          }
        }
        tx.success();
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
      final NodeService nodeService=Services.getInstance().getService(NodeService.class);
      final Index<Node> fulltextIndex=nodeService.getNodeIndex(NodeService.NodeIndex.fulltext);
      final Set<String> stopWords=languageStopwordMap.get(tokenizer.getLanguage());
      final String indexKeyName=FileBase.indexedContent.jsonName();
      final Iterator<String> wordIterator=tokenizer.getWords().iterator();
      final StringBuilder buf=new StringBuilder();
      final Node node=file.getNode();
      int indexedWords=0;
      logger.log(Level.INFO,"Indexing {0}..",fileName);
      while (wordIterator.hasNext()) {
        try (Tx tx=StructrApp.getInstance().tx()){
          fulltextIndex.remove(node,indexKeyName);
          while (wordIterator.hasNext()) {
            final String word=wordIterator.next();
            if (!stopWords.contains(word)) {
              buf.append(word).append(" ");
              fulltextIndex.add(node,indexKeyName,word);
              if (indexedWords > 1000) {
                indexedWords=0;
                break;
              }
            }
          }
          tx.success();
        }
 catch (        Throwable t) {
          t.printStackTrace();
        }
      }
      try (Tx tx=StructrApp.getInstance().tx()){
        file.setProperty(FileBase.indexedWords,buf.toString());
        tx.success();
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
      logger.log(Level.INFO,"Indexing of {0} finished, {1} words extracted",new Object[]{fileName,tokenizer.getWordCount()});
    }
  }
}
