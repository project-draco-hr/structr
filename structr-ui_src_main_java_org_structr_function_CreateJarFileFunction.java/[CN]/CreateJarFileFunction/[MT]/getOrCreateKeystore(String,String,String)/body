{
  final String keystorePath="test.keystore";
  final String keystorePass="test";
  final java.io.File keystoreFile=new java.io.File(keystorePath);
  if (keystoreFile.exists()) {
    try (final FileInputStream fis=new FileInputStream(keystoreFile)){
      final KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
      keystore.load(fis,keystorePass.toCharArray());
      return keystore;
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"",t);
    }
  }
 else {
    try (final FileOutputStream fos=new FileOutputStream(keystoreFile)){
      final KeyStore keystore=KeyStore.getInstance(KeyStore.getDefaultType());
      keystore.load(null,keystorePass.toCharArray());
      final KeyPairGenerator gen=KeyPairGenerator.getInstance(keygenAlgorithm);
      gen.initialize(1024,SecureRandom.getInstance(srngAlgorithm));
      final KeyPair keyPair=gen.generateKeyPair();
      final SimpleDateFormat dateFormat=new SimpleDateFormat("dd.MM.yyyy");
      final Date startDate=dateFormat.parse("01.01.2015");
      final Date expiryDate=dateFormat.parse("01.01.2017");
      final BigInteger serialNumber=BigInteger.valueOf(1234);
      final X509V3CertificateGenerator certGen=new X509V3CertificateGenerator();
      final X500Principal dnName=new X500Principal("CN=Test CA Certificate");
      certGen.setSerialNumber(serialNumber);
      certGen.setIssuerDN(dnName);
      certGen.setNotBefore(startDate);
      certGen.setNotAfter(expiryDate);
      certGen.setSubjectDN(dnName);
      certGen.setPublicKey(keyPair.getPublic());
      certGen.setSignatureAlgorithm(signAlgorithm);
      final X509Certificate cert=certGen.generate(keyPair.getPrivate(),"BC");
      keystore.setCertificateEntry("cert",cert);
      keystore.setKeyEntry("priv",keyPair.getPrivate(),keystorePass.toCharArray(),new Certificate[]{cert});
      keystore.store(fos,keystorePass.toCharArray());
      fos.flush();
      return keystore;
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"",t);
    }
  }
  return null;
}
