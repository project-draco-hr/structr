{
  if (sources != null && sources.length >= 1 && sources.length <= 4) {
    if (sources[0] == null) {
      return "";
    }
    try {
      final List<Map<String,String>> objects=new LinkedList<>();
      final String source=sources[0].toString();
      String delimiter=";";
      String quoteChar="\"";
      String recordSeparator="\n";
switch (sources.length) {
case 4:
        recordSeparator=(String)sources[3];
case 3:
      quoteChar=(String)sources[2];
case 2:
    delimiter=(String)sources[1];
  break;
}
CSVFormat format=CSVFormat.newFormat(delimiter.charAt(0)).withHeader();
format=format.withQuote(quoteChar.charAt(0));
format=format.withRecordSeparator(recordSeparator);
format=format.withIgnoreEmptyLines(true);
format=format.withIgnoreSurroundingSpaces(true);
format=format.withSkipHeaderRecord(true);
format=format.withQuoteMode(QuoteMode.ALL);
CSVParser parser=new CSVParser(new StringReader(source),format);
for (final CSVRecord record : parser.getRecords()) {
objects.add(record.toMap());
}
return objects;
}
 catch (Throwable t) {
logException(entity,t,sources);
}
return "";
}
 else {
logParameterError(entity,sources,ctx.isJavaScriptContext());
}
return usage(ctx.isJavaScriptContext());
}
