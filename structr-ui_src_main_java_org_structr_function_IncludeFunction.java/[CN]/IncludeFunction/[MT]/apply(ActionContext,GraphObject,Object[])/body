{
  if (arrayHasLengthAndAllElementsNotNull(sources,1) && sources[0] instanceof String) {
    final SecurityContext securityContext=entity != null ? entity.getSecurityContext() : ctx.getSecurityContext();
    final App app=StructrApp.getInstance(securityContext);
    final RenderContext innerCtx=new RenderContext((RenderContext)ctx);
    final List<DOMNode> nodeList=app.nodeQuery(DOMNode.class).andName((String)sources[0]).getAsList();
    DOMNode node=null;
    for (    DOMNode n : nodeList) {
      if (n.getProperty(DOMNode.parent) == null && n.getOwnerDocumentAsSuperUser() == null) {
        continue;
      }
      if (n.getProperty(DOMNode.sharedComponent) == null) {
        if (node == null) {
          node=n;
        }
 else {
          return "Ambiguous node name \"" + ((String)sources[0]) + "\" (nodes found: "+ StringUtils.join(nodeList,", ")+ ")";
        }
      }
    }
    if (node != null) {
      node.render(innerCtx,0);
    }
 else {
      final FileBase file=app.nodeQuery(FileBase.class).andName((String)sources[0]).getFirst();
      if (file != null) {
        final String name=file.getProperty(NodeInterface.name);
        final String contentType=file.getProperty(FileBase.contentType);
        final String charset=StringUtils.substringAfterLast(contentType,"charset=");
        final String extension=StringUtils.substringAfterLast(name,".");
        if (contentType == null || StringUtils.isBlank(extension)) {
          logger.log(Level.WARNING,"No valid file type detected. Please make sure {0} has a valid content type set or file extension. Parameters: {1}",new Object[]{name,getParametersAsString(sources)});
          return "No valid file type detected. Please make sure " + name + " has a valid content type set or file extension.";
        }
        if (contentType.startsWith("text/css")) {
          return "<link href=\"" + file.getPath() + "\" rel=\"stylesheet\">";
        }
 else         if (contentType.contains("/javascript")) {
          return "<script src=\"" + file.getPath() + "\"></script>";
        }
 else         if (contentType.startsWith("image/svg")) {
          try {
            final byte[] buffer=new byte[file.getSize().intValue()];
            IOUtils.read(file.getInputStream(),buffer);
            return StringUtils.toEncodedString(buffer,Charset.forName(charset));
          }
 catch (          IOException ex) {
            logger.log(Level.WARNING,"Exception for parameters: {0}",getParametersAsString(sources));
            logger.log(Level.SEVERE,"",ex);
          }
          return "<img alt=\"" + name + "\" src=\""+ file.getPath()+ "\">";
        }
 else         if (contentType.startsWith("image/")) {
          return "<img alt=\"" + name + "\" src=\""+ file.getPath()+ "\">";
        }
 else {
          logger.log(Level.WARNING,"Don't know how to render content type or extension of {0}. Parameters: {1}",new Object[]{name,getParametersAsString(sources)});
          return "Don't know how to render content type or extension of  " + name + ".";
        }
      }
    }
    return StringUtils.join(innerCtx.getBuffer().getQueue(),"");
  }
 else {
    logParameterError(entity,sources,ctx.isJavaScriptContext());
  }
  return usage(ctx.isJavaScriptContext());
}
