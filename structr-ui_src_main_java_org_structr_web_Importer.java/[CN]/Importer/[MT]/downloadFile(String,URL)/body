{
  final String uuid=UUID.randomUUID().toString().replaceAll("[\\-]+","");
  String contentType;
  final String relativeFilePath=org.structr.web.entity.File.getDirectoryPath(uuid) + "/" + uuid;
  final String filePath=FileHelper.getFilePath(relativeFilePath);
  final java.io.File fileOnDisk=new java.io.File(filePath);
  fileOnDisk.getParentFile().mkdirs();
  URL downloadUrl;
  long size;
  long checksum;
  try {
    downloadUrl=new URL(baseUrl,downloadAddress);
    FileUtils.copyURLToFile(downloadUrl,fileOnDisk);
    logger.log(Level.INFO,"Starting download from {0}",downloadUrl);
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,"Unable to download from " + downloadAddress,ioe);
    try {
      downloadUrl=new URL(new URL(address.concat("/")),downloadAddress);
      FileUtils.copyURLToFile(downloadUrl,fileOnDisk);
    }
 catch (    MalformedURLException ex) {
      logger.log(Level.SEVERE,"Could not resolve address " + address.concat("/"),ex);
      return null;
    }
catch (    IOException ex) {
      logger.log(Level.WARNING,"Unable to download from " + address.concat("/"),ex);
      return null;
    }
    logger.log(Level.INFO,"Starting download from alternative URL {0}",downloadUrl);
  }
  try {
    size=fileOnDisk.length();
    checksum=FileUtils.checksumCRC32(fileOnDisk);
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,"Unable to calc checksum of " + fileOnDisk,ioe);
    return null;
  }
  contentType=FileHelper.getContentMimeType(fileOnDisk);
  downloadAddress=StringUtils.substringBefore(downloadAddress,"?");
  final String fileName=(downloadAddress.indexOf("/") > -1) ? StringUtils.substringAfterLast(downloadAddress,"/") : downloadAddress;
  String httpPrefix="http://";
  String path=StringUtils.substringBefore(((downloadAddress.indexOf(httpPrefix) > -1) ? StringUtils.substringAfter(downloadAddress,"http://") : downloadAddress),fileName);
  if (contentType.equals("text/plain")) {
    contentType=StringUtils.defaultIfBlank(contentTypeForExtension.get(StringUtils.substringAfterLast(fileName,".")),"text/plain");
  }
  final String ct=contentType;
  try {
    if (!(fileExists(fileName,checksum))) {
      File fileNode;
      if (ImageHelper.isImageType(fileName)) {
        fileNode=createImageNode(uuid,fileName,ct,size,checksum);
      }
 else {
        fileNode=createFileNode(uuid,fileName,ct,size,checksum);
      }
      if (fileNode != null) {
        Folder parent=createFolderPath(path);
        if (parent != null) {
          app.create(parent,fileNode,Files.class);
        }
        if (contentType.equals("text/css")) {
          processCssFileNode(fileNode,downloadUrl);
        }
      }
      return fileNode;
    }
 else {
      fileOnDisk.delete();
    }
  }
 catch (  FrameworkException|IOException fex) {
    logger.log(Level.WARNING,"Could not create file node.",fex);
  }
  return null;
}
