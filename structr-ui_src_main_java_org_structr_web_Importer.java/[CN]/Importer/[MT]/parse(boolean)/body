{
  init();
  if (StringUtils.isNotBlank(code)) {
    logger.log(Level.INFO,"##### Start parsing code for page {0} #####",new Object[]{name});
    if (fragment) {
      parsedDocument=Jsoup.parseBodyFragment(code);
    }
 else {
      parsedDocument=Jsoup.parse(code);
    }
  }
 else {
    logger.log(Level.INFO,"##### Start fetching {0} for page {1} #####",new Object[]{address,name});
    try {
      DefaultHttpClient client=new DefaultHttpClient();
      HttpGet get=new HttpGet(address);
      get.setHeader("User-Agent","Mozilla");
      get.setHeader("Connection","close");
      client.setRedirectStrategy(new RedirectStrategy(){
        @Override public boolean isRedirected(        HttpRequest hr,        HttpResponse hr1,        HttpContext hc) throws ProtocolException {
          return false;
        }
        @Override public HttpUriRequest getRedirect(        HttpRequest hr,        HttpResponse hr1,        HttpContext hc) throws ProtocolException {
          return new DefaultRedirectStrategy().getRedirect(hr,hr1,hc);
        }
      }
);
      HttpResponse resp=client.execute(get);
      Header location=resp.getFirstHeader("Location");
      if (location != null) {
        address=location.getValue();
        client=new DefaultHttpClient();
        resp=client.execute(new HttpGet(address));
      }
      code=IOUtils.toString(resp.getEntity().getContent(),"UTF-8");
      if (code.charAt(0) == 65279) {
        code=code.substring(1);
      }
      parsedDocument=Jsoup.parse(code);
    }
 catch (    IOException ioe) {
      throw new FrameworkException(500,"Error while parsing content from " + address);
    }
  }
  return true;
}
