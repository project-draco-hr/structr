{
  final GraphObjectMap contextObject=new GraphObjectMap();
  final Set<String> contextValues=new LinkedHashSet<>();
  final String[] searchParts=searchTerm.split("[\\s]+");
  final GenericProperty contextKey=new GenericProperty("context");
  for (  final String searchString : searchParts) {
    final String lowerCaseSearchString=searchString.toLowerCase();
    final String lowerCaseText=text.toLowerCase();
    final StringBuilder wordBuffer=new StringBuilder();
    final StringBuilder lineBuffer=new StringBuilder();
    final int textLength=text.length();
    int newlineCount=0;
    int wordCount=0;
    int pos=-1;
    do {
      pos=lowerCaseText.indexOf(lowerCaseSearchString,pos + 1);
      if (pos > 0) {
        lineBuffer.setLength(0);
        wordBuffer.setLength(0);
        wordCount=0;
        newlineCount=0;
        for (int i=pos; i >= 0; i--) {
          final char c=text.charAt(i);
          if (!Character.isAlphabetic(c) && !Character.isDigit(c) && !FulltextTokenizer.SpecialChars.contains(c)) {
            wordCount+=flushWordBuffer(lineBuffer,wordBuffer,true);
            wordBuffer.insert(0,c);
            if (c == '\n') {
              newlineCount++;
            }
 else {
              newlineCount=0;
            }
            if (newlineCount > 1) {
              break;
            }
            if (wordCount > contextLength / 2) {
              break;
            }
          }
 else {
            wordBuffer.insert(0,c);
            newlineCount=0;
          }
        }
        wordCount+=flushWordBuffer(lineBuffer,wordBuffer,true);
        wordBuffer.setLength(0);
        for (int i=pos + 1; i < textLength; i++) {
          final char c=text.charAt(i);
          if (!Character.isAlphabetic(c) && !Character.isDigit(c) && !FulltextTokenizer.SpecialChars.contains(c)) {
            wordCount+=flushWordBuffer(lineBuffer,wordBuffer,false);
            wordBuffer.append(c);
            if (c == '\n') {
              newlineCount++;
            }
 else {
              newlineCount=0;
            }
            if (newlineCount > 1) {
              break;
            }
            if (wordCount > contextLength) {
              break;
            }
          }
 else {
            wordBuffer.append(c);
            newlineCount=0;
          }
        }
        wordCount+=flushWordBuffer(lineBuffer,wordBuffer,false);
        contextValues.add(lineBuffer.toString().trim());
      }
    }
 while (pos >= 0);
  }
  contextObject.put(contextKey,contextValues);
  return contextObject;
}
