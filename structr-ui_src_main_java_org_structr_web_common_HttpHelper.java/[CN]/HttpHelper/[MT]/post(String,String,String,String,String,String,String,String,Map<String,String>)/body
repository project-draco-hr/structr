{
  final Map<String,String> responseData=new HashMap<>();
  ;
  try {
    final URI url=URI.create(address);
    final HttpPost req=new HttpPost(url);
    configure(req,username,password,proxyUrl,proxyUsername,proxyPassword,cookie,headers,true);
    req.setEntity(new StringEntity(requestBody));
    final CloseableHttpResponse response=client.execute(req);
    final Header contentType=response.getFirstHeader("Content-Type");
    String charset=StringUtils.substringAfterLast(contentType.getValue(),"; charset=");
    if (StringUtils.isBlank(charset)) {
      charset="UTF-8";
    }
    String content=IOUtils.toString(response.getEntity().getContent(),charset);
    if (content.charAt(0) == 65279) {
      content=content.substring(1);
    }
    responseData.put("body",content);
    responseData.put("status",Integer.toString(response.getStatusLine().getStatusCode()));
    for (    final Header header : response.getAllHeaders()) {
      responseData.put(header.getName(),header.getValue());
    }
  }
 catch (  final Throwable t) {
    logger.error("Unable to fetch content from address {}, {}",new Object[]{address,t.getMessage()});
  }
  return responseData;
}
