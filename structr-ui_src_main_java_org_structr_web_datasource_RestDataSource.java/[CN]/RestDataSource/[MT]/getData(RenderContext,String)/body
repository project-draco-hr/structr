{
  final Map<Pattern,Class<? extends Resource>> resourceMap=new LinkedHashMap<>();
  final SecurityContext securityContext=renderContext.getSecurityContext();
  ResourceProvider resourceProvider=renderContext.getResourceProvider();
  if (resourceProvider == null) {
    try {
      resourceProvider=UiResourceProvider.class.newInstance();
    }
 catch (    Throwable t) {
      logger.error("Couldn't establish a resource provider",t);
      return Collections.EMPTY_LIST;
    }
  }
  resourceMap.putAll(resourceProvider.getResources());
  Value<String> propertyView=new ThreadLocalPropertyView();
  propertyView.set(securityContext,PropertyView.Ui);
  HttpServletRequest request=securityContext.getRequest();
  if (request == null) {
    request=renderContext.getRequest();
  }
  final HttpServletRequest wrappedRequest=new HttpServletRequestWrapper(request){
    @Override public Enumeration<String> getParameterNames(){
      return new IteratorEnumeration(getParameterMap().keySet().iterator());
    }
    @Override public String getParameter(    final String key){
      String[] p=getParameterMap().get(key);
      return p != null ? p[0] : null;
    }
    @Override public String[] getParameterValues(    final String key){
      return getParameterMap().get(key);
    }
    @Override public Map<String,String[]> getParameterMap(){
      String[] parts=StringUtils.split(getQueryString(),"&");
      Map<String,String[]> parameterMap=new HashMap();
      for (      String p : parts) {
        String[] kv=StringUtils.split(p,"=");
        if (kv.length > 1) {
          parameterMap.put(kv[0],new String[]{kv[1]});
        }
      }
      return parameterMap;
    }
    @Override public String getQueryString(){
      return StringUtils.substringAfter(restQuery,"?");
    }
    @Override public String getPathInfo(){
      return StringUtils.substringBefore(restQuery,"?");
    }
    @Override public StringBuffer getRequestURL(){
      return new StringBuffer(restQuery);
    }
  }
;
  final HttpServletRequest origRequest=securityContext.getRequest();
  securityContext.setRequest(wrappedRequest);
  Resource resource=null;
  try {
    resource=ResourceHelper.applyViewTransformation(wrappedRequest,securityContext,ResourceHelper.optimizeNestedResourceChain(securityContext,wrappedRequest,resourceMap,propertyView),propertyView);
  }
 catch (  IllegalPathException|NotFoundException e) {
    logger.warn("Illegal path for REST query: {}",restQuery);
  }
  securityContext.setRequest(origRequest);
  if (resource == null) {
    return Collections.EMPTY_LIST;
  }
  securityContext.ignoreResultCount(true);
  String pageSizeParameter=wrappedRequest.getParameter(JsonRestServlet.REQUEST_PARAMETER_PAGE_SIZE);
  String pageParameter=wrappedRequest.getParameter(JsonRestServlet.REQUEST_PARAMETER_PAGE_NUMBER);
  String offsetId=wrappedRequest.getParameter(JsonRestServlet.REQUEST_PARAMETER_OFFSET_ID);
  String sortOrder=wrappedRequest.getParameter(JsonRestServlet.REQUEST_PARAMETER_SORT_ORDER);
  String sortKeyName=wrappedRequest.getParameter(JsonRestServlet.REQUEST_PARAMETER_SORT_KEY);
  boolean sortDescending=(sortOrder != null && "desc".equals(sortOrder.toLowerCase()));
  int pageSize=parseInt(pageSizeParameter,NodeFactory.DEFAULT_PAGE_SIZE);
  int page=parseInt(pageParameter,NodeFactory.DEFAULT_PAGE);
  PropertyKey sortKey=null;
  if (sortKeyName != null) {
    Class<? extends GraphObject> type=resource.getEntityClass();
    if (type == null) {
      type=AbstractNode.class;
    }
    sortKey=StructrApp.getConfiguration().getPropertyKeyForDatabaseName(type,sortKeyName,false);
  }
  Result result=Result.EMPTY_RESULT;
  try {
    result=resource.doGet(sortKey,sortDescending,pageSize,page,offsetId);
  }
 catch (  NotFoundException nfe) {
    logger.warn("No result from internal REST query: {}",restQuery);
  }
  result.setIsCollection(resource.isCollectionResource());
  result.setIsPrimitiveArray(resource.isPrimitiveArray());
  PagingHelper.addPagingParameter(result,pageSize,page);
  List<GraphObject> res=result.getResults();
  if (renderContext != null) {
    renderContext.setResult(result);
  }
  return res != null ? res : Collections.EMPTY_LIST;
}
