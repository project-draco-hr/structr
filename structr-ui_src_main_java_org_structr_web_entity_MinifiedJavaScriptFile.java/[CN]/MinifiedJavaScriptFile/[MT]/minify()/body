{
  logger.info("Running minify: {}",this.getUuid());
  final Compiler compiler=new Compiler();
  final CompilerOptions options=new CompilerOptions();
  final CompilationLevel selectedLevel=getProperty(optimizationLevel);
  selectedLevel.setOptionsForCompilationLevel(options);
  compiler.setErrorManager(new BasicErrorManager(){
    @Override public void println(    CheckLevel level,    JSError error){
    }
    @Override protected void printSummary(){
      if (getTypedPercent() > 0) {
        if (getErrorCount() + getWarningCount() == 0) {
          logger.info(SimpleFormat.format("%d error(s), %d warning(s), %.1f%% typed",getErrorCount(),getWarningCount(),getTypedPercent()));
        }
 else {
          logger.warn(SimpleFormat.format("%d error(s), %d warning(s), %.1f%% typed",getErrorCount(),getWarningCount(),getTypedPercent()));
        }
      }
 else       if (getErrorCount() + getWarningCount() > 0) {
        logger.warn(SimpleFormat.format("%d error(s), %d warning(s)",getErrorCount(),getWarningCount()));
      }
    }
  }
);
  compiler.compile(CommandLineRunner.getBuiltinExterns(options),getSourceFileList(),options);
  FileHelper.setFileData(this,compiler.toSource().getBytes(),getProperty(contentType));
  setProperty(warnings,StringUtils.join(compiler.getWarnings(),System.lineSeparator()));
  setProperty(errors,StringUtils.join(compiler.getErrors(),System.lineSeparator()));
}
