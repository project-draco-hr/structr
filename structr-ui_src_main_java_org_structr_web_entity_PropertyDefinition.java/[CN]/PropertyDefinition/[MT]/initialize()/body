{
  if (delegate == null) {
    String _kind=super.getProperty(PropertyDefinition.kind);
    String _dataType=super.getProperty(PropertyDefinition.dataType);
    String _relType=super.getProperty(PropertyDefinition.relType);
    String _relKind=super.getProperty(PropertyDefinition.relKind);
    Direction direction=super.getProperty(PropertyDefinition.incoming) ? Direction.INCOMING : Direction.OUTGOING;
    String _name=super.getName();
    if (_dataType != null && _name != null) {
      Class<? extends PropertyKey> keyClass=delegateMap.get(_dataType);
      Class<? extends DataNode> dataClass=UiFactoryDefinition.extender.getType(_kind);
      if (dataClass == null) {
        dataClass=DataNode.class;
      }
      if (keyClass != null) {
        if (AbstractRelationProperty.class.isAssignableFrom(keyClass)) {
          try {
            Class _relClass=UiFactoryDefinition.extender.getType(_relKind);
            if (_relClass == null) {
              _relClass=DataNode.class;
            }
            delegate=keyClass.getConstructor(String.class,Class.class,RelationshipType.class,Direction.class,Notion.class,Boolean.TYPE).newInstance(_name,_relClass,DynamicRelationshipType.withName(_relType),direction,new PropertySetNotion(GraphObject.uuid),false);
            EntityContext.registerProperty(dataClass,delegate);
          }
 catch (          Throwable t) {
            t.printStackTrace();
          }
        }
 else {
          try {
            delegate=keyClass.getConstructor(String.class).newInstance(_name);
            EntityContext.registerProperty(dataClass,delegate);
          }
 catch (          Throwable t) {
            t.printStackTrace();
          }
        }
      }
      delegate.setDeclaringClass(dataClass);
    }
  }
}
