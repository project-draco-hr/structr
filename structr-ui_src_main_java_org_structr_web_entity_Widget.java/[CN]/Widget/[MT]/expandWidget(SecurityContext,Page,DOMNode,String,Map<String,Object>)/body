{
  String _source=(String)parameters.get("source");
  ErrorBuffer errorBuffer=new ErrorBuffer();
  if (_source == null) {
    errorBuffer.add(new EmptyPropertyToken(Widget.class.getSimpleName(),source));
  }
 else {
    Matcher matcher=threadLocalTemplateMatcher.get();
    matcher.reset(_source);
    while (matcher.find()) {
      String group=matcher.group();
      String source=group.substring(1,group.length() - 1);
      ReplacementInfo info=new ReplacementInfo(source);
      ArrayList<String> options=info.getOptions();
      String key=info.getKey();
      Object value=parameters.get(key);
      if (value == null) {
        if (!options.isEmpty()) {
          errorBuffer.add(new ValueToken(Widget.class.getSimpleName(),new StringProperty(key),options.toArray()));
        }
 else {
          errorBuffer.add(new EmptyPropertyToken(Widget.class.getSimpleName(),new StringProperty(key)));
        }
      }
 else {
        _source=_source.replace(group,value.toString());
        matcher.reset(_source);
      }
    }
  }
  if (!errorBuffer.hasError()) {
    Importer importer=new Importer(securityContext,_source,baseUrl,null,false,false);
    importer.parse(true);
    importer.createChildNodes(parent,page,true);
  }
 else {
    throw new FrameworkException(422,"Unable to import the given source code",errorBuffer);
  }
}
