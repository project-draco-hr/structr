{
  final String restQuery=((DOMElement)referenceNode).getPropertyWithVariableReplacement(securityContext,renderContext,DOMElement.restQuery);
  if (restQuery != null && !restQuery.isEmpty()) {
    Map<Pattern,Class<? extends Resource>> resourceMap=new LinkedHashMap<Pattern,Class<? extends Resource>>();
    for (    RelationshipMapping relMapping : EntityContext.getNamedRelations()) {
      resourceMap.put(Pattern.compile(relMapping.getName()),NamedRelationResource.class);
    }
    ResourceProvider resourceProvider=renderContext.getResourceProvider();
    if (resourceProvider == null) {
      try {
        resourceProvider=UiResourceProvider.class.newInstance();
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"Couldn't establish a resource provider",t);
        return Collections.EMPTY_LIST;
      }
    }
    resourceMap.putAll(resourceProvider.getResources());
    Value<String> propertyView=new ThreadLocalPropertyView();
    propertyView.set(securityContext,PropertyView.Ui);
    HttpServletRequest request=new HttpServletRequestWrapper(renderContext.getRequest()){
      @Override public Enumeration<String> getParameterNames(){
        return new IteratorEnumeration(getParameterMap().keySet().iterator());
      }
      @Override public String getParameter(      String key){
        String[] p=getParameterMap().get(key);
        return p != null ? p[0] : null;
      }
      @Override public Map<String,String[]> getParameterMap(){
        String[] parts=StringUtils.split(getQueryString(),"&");
        Map<String,String[]> parameterMap=new HashMap();
        for (        String p : parts) {
          String[] kv=StringUtils.split(p,"=");
          if (kv.length > 1) {
            parameterMap.put(kv[0],new String[]{kv[1]});
          }
        }
        return parameterMap;
      }
      @Override public String getQueryString(){
        return StringUtils.substringAfter(restQuery,"?");
      }
      @Override public String getPathInfo(){
        return StringUtils.substringBefore(restQuery,"?");
      }
      @Override public StringBuffer getRequestURL(){
        return new StringBuffer(restQuery);
      }
    }
;
    securityContext.setRequest(request);
    Resource resource=ResourceHelper.applyViewTransformation(request,securityContext,ResourceHelper.optimizeConstraintChain(ResourceHelper.parsePath(securityContext,request,resourceMap,propertyView,AbstractNode.uuid),AbstractNode.uuid),propertyView);
    String pageSizeParameter=request.getParameter(REQUEST_PARAMETER_PAGE_SIZE);
    String pageParameter=request.getParameter(REQUEST_PARAMETER_PAGE_NUMBER);
    String offsetId=request.getParameter(REQUEST_PARAMETER_OFFSET_ID);
    String sortOrder=request.getParameter(REQUEST_PARAMETER_SORT_ORDER);
    String sortKeyName=request.getParameter(REQUEST_PARAMETER_SORT_KEY);
    boolean sortDescending=(sortOrder != null && "desc".equals(sortOrder.toLowerCase()));
    int pageSize=parseInt(pageSizeParameter,NodeFactory.DEFAULT_PAGE_SIZE);
    int page=parseInt(pageParameter,NodeFactory.DEFAULT_PAGE);
    PropertyKey sortKey=null;
    if (sortKeyName != null) {
      Class<? extends GraphObject> type=resource.getEntityClass();
      sortKey=EntityContext.getPropertyKeyForDatabaseName(type,sortKeyName);
    }
    Result result=resource.doGet(sortKey,sortDescending,pageSize,page,offsetId);
    result.setIsCollection(resource.isCollectionResource());
    result.setIsPrimitiveArray(resource.isPrimitiveArray());
    PagingHelper.addPagingParameter(result,pageSize,page);
    List<GraphObject> res=result.getResults();
    return res != null ? res : Collections.EMPTY_LIST;
  }
  return Collections.EMPTY_LIST;
}
