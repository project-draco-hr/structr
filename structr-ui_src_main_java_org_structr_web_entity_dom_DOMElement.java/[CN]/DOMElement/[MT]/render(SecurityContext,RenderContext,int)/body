{
  double start=System.nanoTime();
  boolean edit=renderContext.getEdit();
  boolean isVoid=isVoidElement();
  StringBuilder buffer=renderContext.getBuffer();
  String pageId=renderContext.getPageId();
  String id=getUuid();
  String tag=getProperty(DOMElement.tag);
  buffer.append(indent(depth,true));
  if (StringUtils.isNotBlank(tag)) {
    buffer.append("<").append(tag);
    if (edit) {
      if (depth == 1) {
        buffer.append(" data-structr_page_id='").append(pageId).append("'");
      }
      buffer.append(" data-structr_element_id=\"").append(id).append("\"");
      buffer.append(" data-structr_type=\"").append(getType()).append("\"");
      buffer.append(" data-structr_name=\"").append(getName()).append("\"");
    }
    for (    PropertyKey attribute : EntityContext.getPropertySet(getClass(),PropertyView.Html)) {
      try {
        String value=getPropertyWithVariableReplacement(securityContext,renderContext,attribute);
        if ((value != null) && StringUtils.isNotBlank(value)) {
          String key=attribute.jsonName().substring(PropertyView.Html.length());
          buffer.append(" ").append(key).append("=\"").append(value).append("\"");
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
    buffer.append(">");
    if (Body.class.getSimpleName().toLowerCase().equals(this.getTagName())) {
      renderContext.setInBody(true);
    }
    String _dataKey=getProperty(dataKey);
    if (_dataKey == null) {
      _dataKey="data";
    }
    List<GraphObject> listData=checkListSources();
    DataNode treeNode=null;
    String treeKey=null;
    for (    AbstractRelationship rel : getOutgoingRelationships(RelType.RENDER_TREE)) {
      AbstractNode endNode=rel.getEndNode();
      if (endNode instanceof DataNode) {
        treeNode=(DataNode)endNode;
        treeKey=rel.getProperty(LinkedListNode.keyProperty);
        break;
      }
    }
    if (treeNode != null) {
      renderContext.setTreeSource(treeNode);
      renderContext.setTreeKey(treeKey);
      renderContext.setRenderMode(RenderMode.TREE);
    }
 else     if (listData != null && !listData.isEmpty()) {
      renderContext.setListSource(listData);
      renderContext.setRenderMode(RenderMode.LIST);
    }
switch (renderContext.getRenderMode()) {
case NODE:
case DEFAULT:
      renderSingleNode(securityContext,renderContext,depth);
    break;
case LIST:
case CYPHER:
case XPATH:
  renderNodeList(securityContext,renderContext,depth,_dataKey);
break;
case TREE:
renderTreeNode(securityContext,renderContext,depth,_dataKey);
}
if (StringUtils.isNotBlank(tag) && (!isVoid)) {
buffer.append(indent(depth,true));
buffer.append("</").append(tag).append(">");
}
}
double end=System.nanoTime();
logger.log(Level.FINE,"Render node {0} in {1} seconds",new java.lang.Object[]{getUuid(),decimalFormat.format((end - start) / 1000000000.0)});
}
