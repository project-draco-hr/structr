{
  if (renderContext.hasTimeout(RENDER_TIMEOUT)) {
    return;
  }
  Result localResult=renderContext.getResult();
  AsyncBuffer out=renderContext.getBuffer();
  double start=System.nanoTime();
  if (isDeleted() || isHidden() || !displayForLocale(renderContext)|| !displayForConditions(securityContext,renderContext)) {
    return;
  }
  EditMode editMode=renderContext.getEditMode(securityContext.getUser(false));
  boolean isVoid=isVoidElement();
  String _tag=getProperty(DOMElement.tag);
  boolean anyChildNodeCreatesNewLine=false;
  renderStructrAppLib(out,securityContext,renderContext,depth);
  if (depth > 0 && !avoidWhitespace()) {
    out.append(indent(depth));
  }
  if (StringUtils.isNotBlank(_tag)) {
    openingTag(securityContext,out,_tag,editMode,renderContext,depth);
    try {
      if (Body.class.getSimpleName().toLowerCase().equals(this.getTagName())) {
        renderContext.setInBody(true);
      }
      List<DOMChildren> rels=getChildRelationships();
      if (rels.isEmpty()) {
        migrateSyncRels();
        DOMElement _syncedNode=(DOMElement)getProperty(sharedComponent);
        if (_syncedNode != null) {
          rels.addAll(_syncedNode.getChildRelationships());
        }
      }
      for (      AbstractRelationship rel : rels) {
        DOMNode subNode=(DOMNode)rel.getTargetNode();
        if (!securityContext.isVisible(subNode)) {
          continue;
        }
        GraphObject details=renderContext.getDetailsDataObject();
        boolean detailMode=details != null;
        if (detailMode && subNode.getProperty(hideOnDetail)) {
          continue;
        }
        if (!detailMode && subNode.getProperty(hideOnIndex)) {
          continue;
        }
        if (subNode instanceof DOMElement) {
          anyChildNodeCreatesNewLine=(anyChildNodeCreatesNewLine || !((DOMElement)subNode).avoidWhitespace());
        }
        if (EditMode.RAW.equals(editMode)) {
          subNode.render(securityContext,renderContext,depth + 1);
        }
 else {
          String subKey=subNode.getProperty(dataKey);
          if (StringUtils.isNotBlank(subKey)) {
            setDataRoot(renderContext,subNode,subKey);
            GraphObject currentDataNode=renderContext.getDataObject();
            final Result newResult=renderContext.getResult();
            if (newResult != null) {
              localResult=newResult;
            }
            List<GraphObject> listData=((DOMElement)subNode).checkListSources(securityContext,renderContext);
            PropertyKey propertyKey=null;
            if (subNode.getProperty(renderDetails) && detailMode) {
              renderContext.setDataObject(details);
              renderContext.putDataObject(subKey,details);
              subNode.render(securityContext,renderContext,depth + 1);
            }
 else {
              if (listData.isEmpty() && currentDataNode != null) {
                Object elements=currentDataNode.getProperty(new GenericProperty(subKey));
                renderContext.setRelatedProperty(new GenericProperty(subKey));
                renderContext.setSourceDataObject(currentDataNode);
                if (elements != null) {
                  if (elements instanceof Iterable) {
                    for (                    Object o : (Iterable)elements) {
                      if (o instanceof GraphObject) {
                        GraphObject graphObject=(GraphObject)o;
                        renderContext.putDataObject(subKey,graphObject);
                        subNode.render(securityContext,renderContext,depth + 1);
                      }
                    }
                  }
                }
 else {
                  propertyKey=StructrApp.getConfiguration().getPropertyKeyForJSONName(currentDataNode.getClass(),subKey,false);
                  renderContext.setRelatedProperty(propertyKey);
                  if (propertyKey != null) {
                    final Object value=currentDataNode.getProperty(propertyKey);
                    if (value != null) {
                      if (value instanceof Iterable) {
                        for (                        Object o : ((Iterable)value)) {
                          if (o instanceof GraphObject) {
                            renderContext.putDataObject(subKey,(GraphObject)o);
                            subNode.render(securityContext,renderContext,depth + 1);
                          }
                        }
                      }
                    }
                  }
                }
                renderContext.setDataObject(currentDataNode);
                renderContext.setRelatedProperty(null);
              }
 else {
                renderContext.setListSource(listData);
                ((DOMElement)subNode).renderNodeList(securityContext,renderContext,depth,subKey);
              }
            }
          }
 else {
            subNode.render(securityContext,renderContext,depth + 1);
          }
        }
      }
    }
 catch (    Throwable t) {
      logger.log(Level.SEVERE,"Error while rendering node {0}: {1}",new java.lang.Object[]{getUuid(),t});
      out.append("Error while rendering node ").append(getUuid()).append(": ").append(t.getMessage());
      t.printStackTrace();
    }
    if (StringUtils.isNotBlank(_tag) && (!isVoid)) {
      if (anyChildNodeCreatesNewLine) {
        out.append(indent(depth));
      }
      out.append("</").append(_tag).append(">");
    }
  }
  double end=System.nanoTime();
  if (localResult != null) {
    renderContext.setResult(localResult);
  }
}
