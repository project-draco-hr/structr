{
  if (isDeleted() || isHidden()) {
    return;
  }
  double start=System.nanoTime();
  boolean edit=renderContext.getEdit();
  boolean isVoid=isVoidElement();
  StringBuilder buffer=renderContext.getBuffer();
  String id=getUuid();
  String tag=getProperty(DOMElement.tag);
  boolean anyChildNodeCreatesNewLine=false;
  if (!avoidWhitespace()) {
    buffer.append(indent(depth));
  }
  if (StringUtils.isNotBlank(tag)) {
    buffer.append("<").append(tag);
    if (edit) {
      buffer.append(" data-structr-id=\"").append(id).append("\"");
    }
    for (    PropertyKey attribute : EntityContext.getPropertySet(getClass(),PropertyView.Html)) {
      try {
        String value=getPropertyWithVariableReplacement(securityContext,renderContext,attribute);
        if ((value != null) && StringUtils.isNotBlank(value)) {
          String key=attribute.jsonName().substring(PropertyView.Html.length());
          buffer.append(" ").append(key).append("=\"").append(value).append("\"");
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
    buffer.append(">");
    if (Body.class.getSimpleName().toLowerCase().equals(this.getTagName())) {
      renderContext.setInBody(true);
    }
    List<AbstractRelationship> rels=getChildRelationships();
    if (rels.isEmpty()) {
      Iterable<AbstractRelationship> syncRels=getRelationships(RelType.SYNC,Direction.INCOMING);
      if (syncRels != null && syncRels.iterator().hasNext()) {
        DOMElement syncedNode=(DOMElement)syncRels.iterator().next().getStartNode();
        rels=syncedNode.getChildRelationships();
      }
    }
    for (    AbstractRelationship rel : rels) {
      DOMNode subNode=(DOMNode)rel.getEndNode();
      if (!securityContext.isVisible(subNode)) {
        continue;
      }
      GraphObject details=renderContext.getDetailsDataObject();
      boolean detailMode=details != null;
      if (edit && subNode.getProperty(hideOnEdit)) {
        continue;
      }
      if (detailMode && subNode.getProperty(hideOnDetail)) {
        continue;
      }
      if (!detailMode && subNode.getProperty(hideOnIndex)) {
        continue;
      }
      if (subNode instanceof DOMElement) {
        anyChildNodeCreatesNewLine=(anyChildNodeCreatesNewLine || !((DOMElement)subNode).avoidWhitespace());
      }
      String subKey=subNode.getProperty(dataKey);
      if (StringUtils.isNotBlank(subKey)) {
        setDataRoot(renderContext,subNode,subKey);
        GraphObject currentDataNode=renderContext.getDataObject();
        List<GraphObject> listData=((DOMElement)subNode).checkListSources(securityContext,renderContext);
        PropertyKey propertyKey=null;
        if (subNode.getProperty(renderDetails) && detailMode) {
          renderContext.setDataObject(details);
          renderContext.putDataObject(subKey,details);
          subNode.render(securityContext,renderContext,depth + 1);
        }
 else {
          if (listData.isEmpty() && currentDataNode != null) {
            Object elements=currentDataNode.getProperty(new GenericProperty(subKey));
            if (elements != null) {
              if (elements instanceof Iterable) {
                for (                Object o : (Iterable)elements) {
                  if (o instanceof GraphObject) {
                    GraphObject graphObject=(GraphObject)o;
                    renderContext.putDataObject(subKey,graphObject);
                    subNode.render(securityContext,renderContext,depth + 1);
                  }
                }
              }
            }
 else {
              propertyKey=EntityContext.getPropertyKeyForJSONName(currentDataNode.getClass(),subKey,false);
              if (propertyKey != null && propertyKey instanceof CollectionProperty) {
                CollectionProperty<AbstractNode> collectionProperty=(CollectionProperty)propertyKey;
                for (                AbstractNode node : currentDataNode.getProperty(collectionProperty)) {
                  renderContext.putDataObject(subKey,node);
                  subNode.render(securityContext,renderContext,depth + 1);
                }
              }
            }
            renderContext.setDataObject(currentDataNode);
          }
 else {
            renderContext.setListSource(listData);
            ((DOMElement)subNode).renderNodeList(securityContext,renderContext,depth,subKey);
            if (edit && !listData.isEmpty()) {
              String t=listData.get(0).getType();
              buffer.append("\n<button class=\"createButton\" data-structr-type=\"").append(t).append("\">Create ").append(t).append("</button>\n");
            }
          }
        }
      }
 else {
        subNode.render(securityContext,renderContext,depth + 1);
      }
    }
    if (StringUtils.isNotBlank(tag) && (!isVoid)) {
      if (anyChildNodeCreatesNewLine) {
        buffer.append(indent(depth));
      }
      buffer.append("</").append(tag).append(">");
    }
  }
  double end=System.nanoTime();
  logger.log(Level.FINE,"Render node {0} in {1} seconds",new java.lang.Object[]{getUuid(),decimalFormat.format((end - start) / 1000000000.0)});
}
