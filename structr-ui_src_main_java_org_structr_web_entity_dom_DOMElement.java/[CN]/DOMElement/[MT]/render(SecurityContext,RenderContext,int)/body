{
  double start=System.nanoTime();
  boolean edit=renderContext.getEdit();
  boolean isVoid=isVoidElement();
  StringBuilder buffer=renderContext.getBuffer();
  String pageId=renderContext.getPageId();
  String id=getUuid();
  String tag=getProperty(DOMElement.tag);
  buffer.append(indent(depth,true));
  if (StringUtils.isNotBlank(tag)) {
    buffer.append("<").append(tag);
    if (edit) {
      if (depth == 1) {
        buffer.append(" data-structr_page_id='").append(pageId).append("'");
      }
      buffer.append(" data-structr_element_id=\"").append(id).append("\"");
      buffer.append(" data-structr_type=\"").append(getType()).append("\"");
      buffer.append(" data-structr_name=\"").append(getName()).append("\"");
    }
    for (    PropertyKey attribute : EntityContext.getPropertySet(getClass(),PropertyView.Html)) {
      try {
        String value=getPropertyWithVariableReplacement(securityContext,renderContext,attribute);
        if ((value != null) && StringUtils.isNotBlank(value)) {
          String key=attribute.jsonName().substring(PropertyView.Html.length());
          buffer.append(" ").append(key).append("=\"").append(value).append("\"");
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
      }
    }
    buffer.append(">");
    List<GraphObject> data=getExternalDataOrCurrentNode();
    for (    GraphObject dataObject : data) {
      renderContext.setCurrentDataNode(dataObject);
      List<AbstractRelationship> rels=getChildRelationships();
      for (      AbstractRelationship rel : rels) {
        DOMNode subNode=(DOMNode)rel.getEndNode();
        if (subNode.isNotDeleted()) {
          if (Body.class.getSimpleName().toLowerCase().equals(this.getTagName())) {
            renderContext.setInBody(true);
          }
          subNode.render(securityContext,renderContext,depth + 1);
        }
      }
    }
    if (StringUtils.isNotBlank(tag) && (!isVoid)) {
      buffer.append(indent(depth,true));
      buffer.append("</").append(tag).append(">");
    }
  }
  double end=System.nanoTime();
  logger.log(Level.FINE,"Render node {0} in {1} seconds",new java.lang.Object[]{getUuid(),decimalFormat.format((end - start) / 1000000000.0)});
}
