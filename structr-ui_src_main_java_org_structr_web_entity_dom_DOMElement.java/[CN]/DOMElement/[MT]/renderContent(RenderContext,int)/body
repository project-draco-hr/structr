{
  if (isDeleted() || isHidden() || !displayForLocale(renderContext)|| !displayForConditions(renderContext)) {
    return;
  }
  final AsyncBuffer out=renderContext.getBuffer();
  final EditMode editMode=renderContext.getEditMode(securityContext.getUser(false));
  final boolean isVoid=isVoidElement();
  final String _tag=getProperty(DOMElement.tag);
  Result localResult=renderContext.getResult();
  boolean anyChildNodeCreatesNewLine=false;
  renderStructrAppLib(out,securityContext,renderContext,depth);
  if (depth > 0 && !avoidWhitespace()) {
    out.append(indent(depth,renderContext));
  }
  if (StringUtils.isNotBlank(_tag)) {
    if (EditMode.DEPLOYMENT.equals(editMode)) {
      if (renderDeploymentExportComments(out,false)) {
        if (depth > 0 && !avoidWhitespace()) {
          out.append(indent(depth,renderContext));
        }
      }
    }
    openingTag(out,_tag,editMode,renderContext,depth);
    try {
      if (lowercaseBodyName.equals(this.getTagName())) {
        renderContext.setInBody(true);
      }
      if (getProperty(sharedComponent) == null || !EditMode.DEPLOYMENT.equals(editMode)) {
        final List<DOMChildren> rels=getChildRelationships();
        if (rels.isEmpty()) {
          migrateSyncRels();
          final DOMElement _syncedNode=(DOMElement)getProperty(sharedComponent);
          if (_syncedNode != null) {
            rels.addAll(_syncedNode.getChildRelationships());
          }
        }
        for (        final AbstractRelationship rel : rels) {
          final DOMNode subNode=(DOMNode)rel.getTargetNode();
          if (subNode instanceof DOMElement) {
            anyChildNodeCreatesNewLine=(anyChildNodeCreatesNewLine || !(subNode.avoidWhitespace()));
          }
          subNode.render(renderContext,depth + 1);
        }
      }
    }
 catch (    Throwable t) {
      logger.error("Error while rendering node {}: {}",new java.lang.Object[]{getUuid(),t});
      out.append("Error while rendering node ").append(getUuid()).append(": ").append(t.getMessage());
      logger.warn("",t);
    }
    if (StringUtils.isNotBlank(_tag) && (!isVoid)) {
      final DOMElement _syncedNode=(DOMElement)getProperty(sharedComponent);
      final boolean isTemplate=_syncedNode != null && EditMode.DEPLOYMENT.equals(editMode);
      if (anyChildNodeCreatesNewLine || isTemplate) {
        out.append(indent(depth,renderContext));
      }
      if (isTemplate) {
        out.append("</structr:template>");
      }
 else {
        out.append("</").append(_tag).append(">");
      }
    }
  }
  if (localResult != null) {
    renderContext.setResult(localResult);
  }
}
