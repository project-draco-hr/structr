{
  checkWriteAccess();
  checkSameDocument(newChild);
  checkSameDocument(refChild);
  checkHierarchy(newChild);
  checkHierarchy(refChild);
  final DOMNode newNode=(DOMNode)newChild;
  final DOMNode refNode=(DOMNode)refChild;
  final StructrNodeList nodesToAdd=new StructrNodeList();
  if (newNode instanceof DocumentFragment) {
    NodeList nodeList=((DocumentFragment)newChild).getChildNodes();
    int len=nodeList.getLength();
    for (int i=0; i < len; i++) {
      DOMNode node=(DOMNode)nodeList.item(i);
      nodesToAdd.add(node);
    }
  }
 else {
    nodesToAdd.add((DOMNode)newChild);
  }
  try {
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        List<AbstractRelationship> rels=getChildRelationships();
        int position=0;
        for (        AbstractRelationship rel : rels) {
          AbstractNode node=rel.getEndNode();
          if (node instanceof DOMNode) {
            DOMNode domNode=(DOMNode)node;
            if (domNode.isSameNode(refNode)) {
              int addCount=nodesToAdd.getLength();
              PropertyMap properties=new PropertyMap();
              for (int i=0; i < addCount; i++) {
                Node toAdd=nodesToAdd.item(i);
                if (toAdd instanceof DOMNode) {
                  properties.clear();
                  properties.put(ChildrenRelationship.position,position);
                  DOMNode.children.createRelationship(securityContext,DOMNode.this,(DOMNode)toAdd,properties);
                  position++;
                }
              }
            }
            rel.setProperty(ChildrenRelationship.position,position);
            position++;
          }
        }
        return null;
      }
    }
);
  }
 catch (  FrameworkException fex) {
    throw new DOMException(DOMException.INVALID_STATE_ERR,fex.toString());
  }
  return refChild;
}
