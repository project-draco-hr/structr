{
  if (!securityContext.isVisible(this)) {
    return;
  }
  final GraphObject details=renderContext.getDetailsDataObject();
  final boolean detailMode=details != null;
  if (detailMode && getProperty(hideOnDetail)) {
    return;
  }
  if (!detailMode && getProperty(hideOnIndex)) {
    return;
  }
  final EditMode editMode=renderContext.getEditMode(securityContext.getUser(false));
  if (EditMode.RAW.equals(editMode) || EditMode.WIDGET.equals(editMode) || EditMode.DEPLOYMENT.equals(editMode)) {
    renderContent(renderContext,depth);
  }
 else {
    final String subKey=getProperty(dataKey);
    if (StringUtils.isNotBlank(subKey)) {
      setDataRoot(renderContext,this,subKey);
      final GraphObject currentDataNode=renderContext.getDataObject();
      final List<GraphObject> listData=checkListSources(securityContext,renderContext);
      final PropertyKey propertyKey;
      if (getProperty(renderDetails) && detailMode) {
        renderContext.setDataObject(details);
        renderContext.putDataObject(subKey,details);
        renderContent(renderContext,depth);
      }
 else {
        if (listData.isEmpty() && currentDataNode != null) {
          final Object elements=currentDataNode.getProperty(new GenericProperty(subKey));
          renderContext.setRelatedProperty(new GenericProperty(subKey));
          renderContext.setSourceDataObject(currentDataNode);
          if (elements != null) {
            if (elements instanceof Iterable) {
              for (              Object o : (Iterable)elements) {
                if (o instanceof GraphObject) {
                  GraphObject graphObject=(GraphObject)o;
                  renderContext.putDataObject(subKey,graphObject);
                  renderContent(renderContext,depth);
                }
              }
            }
          }
 else {
            propertyKey=StructrApp.getConfiguration().getPropertyKeyForJSONName(currentDataNode.getClass(),subKey,false);
            renderContext.setRelatedProperty(propertyKey);
            if (propertyKey != null) {
              final Object value=currentDataNode.getProperty(propertyKey);
              if (value != null) {
                if (value instanceof Iterable) {
                  for (                  final Object o : ((Iterable)value)) {
                    if (o instanceof GraphObject) {
                      renderContext.putDataObject(subKey,(GraphObject)o);
                      renderContent(renderContext,depth);
                    }
                  }
                }
              }
            }
          }
          renderContext.setDataObject(currentDataNode);
          renderContext.setRelatedProperty(null);
        }
 else {
          renderContext.setListSource(listData);
          renderNodeList(securityContext,renderContext,depth,subKey);
        }
      }
    }
 else {
      renderContent(renderContext,depth);
    }
  }
}
