{
  final String remoteUrl=getProperty(url);
  if (StringUtils.isNotBlank(remoteUrl)) {
    final App app=StructrApp.getInstance(securityContext);
    try {
      final FeedFetcher feedFetcher=new HttpURLFeedFetcher();
      final SyndFeed feed=feedFetcher.retrieveFeed(new URL(remoteUrl));
      final List<SyndEntry> entries=feed.getEntries();
      setProperty(feedType,feed.getFeedType());
      setProperty(description,feed.getDescription());
      final List<FeedItem> newItems=getProperty(items);
      for (      final SyndEntry entry : entries) {
        final PropertyMap props=new PropertyMap();
        final String link=entry.getLink();
        if (app.nodeQuery(FeedItem.class).and(FeedItem.url,link).getFirst() == null) {
          props.put(FeedItem.url,entry.getLink());
          props.put(FeedItem.name,entry.getTitle());
          props.put(FeedItem.author,entry.getAuthor());
          props.put(FeedItem.comments,entry.getComments());
          final FeedItem item=app.create(FeedItem.class,props);
          item.setProperty(FeedItem.pubDate,entry.getPublishedDate());
          final List<FeedItemContent> itemContents=new LinkedList<>();
          final List<SyndContent> contents=entry.getContents();
          for (          final SyndContent content : contents) {
            final FeedItemContent itemContent=app.create(FeedItemContent.class);
            itemContent.setProperty(FeedItemContent.value,content.getValue());
            itemContents.add(itemContent);
          }
          item.setProperty(FeedItem.contents,itemContents);
          newItems.add(item);
        }
      }
      setProperty(items,newItems);
      setProperty(lastUpdated,new Date());
    }
 catch (    IllegalArgumentException|IOException|FetcherException|FeedException|FrameworkException ex) {
      Logger.getLogger(DataFeed.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}
