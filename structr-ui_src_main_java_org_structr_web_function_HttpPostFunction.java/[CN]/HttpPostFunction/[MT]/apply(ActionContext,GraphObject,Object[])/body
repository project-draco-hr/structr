{
  if (arrayHasMinLengthAndAllElementsNotNull(sources,2)) {
    final String uri=sources[0].toString();
    final String body=sources[1].toString();
    String contentType="application/json";
    String charset="utf-8";
    if (sources.length >= 3 && sources[2] != null) {
      contentType=sources[2].toString();
    }
    if (sources.length >= 4 && sources[3] != null) {
      charset=sources[3].toString();
    }
    final Map<String,String> responseData=HttpHelper.post(uri,body,null,null,ctx.getHeaders());
    final int statusCode=Integer.parseInt(responseData.get("status"));
    responseData.remove("status");
    final String responseBody=responseData.get("body");
    responseData.remove("body");
    final GraphObjectMap response=new GraphObjectMap();
    if ("application/json".equals(contentType)) {
      final FromJsonFunction fromJsonFunction=new FromJsonFunction();
      response.setProperty(new StringProperty("body"),fromJsonFunction.apply(ctx,entity,new Object[]{responseBody}));
    }
 else {
      response.setProperty(new StringProperty("body"),responseBody);
    }
    response.setProperty(new IntProperty("status"),statusCode);
    final GraphObjectMap map=new GraphObjectMap();
    for (    final Map.Entry<String,String> entry : responseData.entrySet()) {
      map.put(new StringProperty(entry.getKey()),entry.getValue());
    }
    response.setProperty(new StringProperty("headers"),map);
    return response;
  }
 else {
    logParameterError(entity,sources,ctx.isJavaScriptContext());
    return usage(ctx.isJavaScriptContext());
  }
}
