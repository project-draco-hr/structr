{
  DOMNode rootElement=null;
  Linkable res=null;
  final List<Node> children=startNode.childNodes();
  for (  Node node : children) {
    String tag=node.nodeName();
    if (tag != null) {
      tag=tag.replaceAll("[^a-zA-Z0-9#:.-_]+","");
    }
    String type=CaseHelper.toUpperCamelCase(tag);
    String comment=null;
    String content=null;
    String id=null;
    StringBuilder classString=new StringBuilder();
    if (ArrayUtils.contains(ignoreElementNames,type)) {
      continue;
    }
    if (node instanceof Element) {
      Element el=((Element)node);
      Set<String> classes=el.classNames();
      for (      String cls : classes) {
        classString.append(cls).append(" ");
      }
      id=el.id();
      if (!isDeployment) {
        String downloadAddressAttr=(ArrayUtils.contains(srcElements,tag) ? "src" : ArrayUtils.contains(hrefElements,tag) ? "href" : null);
        if (downloadAddressAttr != null && StringUtils.isNotBlank(node.attr(downloadAddressAttr))) {
          String downloadAddress=node.attr(downloadAddressAttr);
          res=downloadFile(downloadAddress,originalUrl);
        }
      }
      if (removeHashAttribute) {
        node.removeAttr(DOMNode.dataHashProperty.jsonName());
      }
    }
    if (type.equals("#comment")) {
      comment=((Comment)node).getData();
      processComment=false;
      lastComment=comment;
      tag="";
      if (StringUtils.isBlank(comment)) {
        continue;
      }
      commentSource.append(comment).append("\n");
    }
 else     if (type.equals("#data")) {
      tag="";
      content=((DataNode)node).getWholeData();
      if (StringUtils.isBlank(content)) {
        continue;
      }
    }
 else {
      if (type.equals("#text")) {
        tag="";
        content=((TextNode)node).text();
        if (!("p".equals(startNode.nodeName().toLowerCase())) && StringUtils.isWhitespace(content)) {
          continue;
        }
      }
    }
    org.structr.web.entity.dom.DOMNode newNode=null;
    if (StringUtils.isBlank(tag)) {
      if (!StringUtils.isBlank(comment)) {
        newNode=(DOMNode)page.createComment(comment);
        newNode.setProperty(org.structr.web.entity.dom.Comment.contentType,"text/html");
        lastCommentNode=newNode;
      }
 else {
        newNode=(Content)page.createTextNode(content);
      }
    }
 else     if ("structr:template".equals(tag)) {
      final String src=node.attr("src");
      if (src != null) {
        final DOMNode component=Importer.findSharedComponentByName(src);
        if (component != null) {
          newNode=(DOMNode)component.cloneNode(false);
          newNode.setProperty(DOMNode.sharedComponent,component);
          newNode.setProperty(DOMNode.ownerDocument,page);
        }
 else {
          logger.log(Level.WARNING,"Unable to find shared component {0}, template ignored!",src);
        }
      }
 else {
        logger.log(Level.WARNING,"Invalid template definition, missing src attribute!");
      }
    }
 else {
      newNode=(org.structr.web.entity.dom.DOMElement)page.createElement(tag);
    }
    if (newNode != null) {
      if (rootElement == null) {
        rootElement=newNode;
      }
      newNode.setProperty(AbstractNode.visibleToPublicUsers,publicVisible);
      newNode.setProperty(AbstractNode.visibleToAuthenticatedUsers,authVisible);
      if (res != null) {
        newNode.setProperty(LinkSource.linkable,res);
      }
      if (StringUtils.isNotBlank(id)) {
        newNode.setProperty(DOMElement._id,id);
      }
      if (StringUtils.isNotBlank(classString.toString())) {
        newNode.setProperty(DOMElement._class,StringUtils.trim(classString.toString()));
      }
      for (      Attribute nodeAttr : node.attributes()) {
        final String key=nodeAttr.getKey();
        if (!key.equals("text")) {
          final String value=nodeAttr.getValue();
          if (key.startsWith("data-")) {
            if (key.startsWith(DATA_META_PREFIX)) {
              int l=DATA_META_PREFIX.length();
              String upperCaseKey=WordUtils.capitalize(key.substring(l),new char[]{'-'}).replaceAll("-","");
              String camelCaseKey=key.substring(l,l + 1).concat(upperCaseKey.substring(1));
              if (value != null) {
                if (value.equalsIgnoreCase("true")) {
                  newNode.setProperty(new BooleanProperty(camelCaseKey),true);
                }
 else                 if (value.equalsIgnoreCase("false")) {
                  newNode.setProperty(new BooleanProperty(camelCaseKey),false);
                }
 else {
                  newNode.setProperty(new StringProperty(camelCaseKey),nodeAttr.getValue());
                }
              }
            }
 else             if (key.startsWith(DATA_STRUCTR_PREFIX)) {
              PropertyKey propertyKey=config.getPropertyKeyForJSONName(newNode.getClass(),key);
              if (propertyKey != null) {
                final PropertyConverter inputConverter=propertyKey.inputConverter(securityContext);
                if (value != null && inputConverter != null) {
                  newNode.setProperty(propertyKey,propertyKey.inputConverter(securityContext).convert(value));
                }
 else {
                  newNode.setProperty(propertyKey,value);
                }
              }
            }
          }
 else {
            boolean notBlank=StringUtils.isNotBlank(value);
            boolean isAnchor=notBlank && value.startsWith("#");
            boolean isLocal=notBlank && !value.startsWith("http");
            boolean isActive=notBlank && value.contains("${");
            boolean isStructrLib=notBlank && value.startsWith("/structr/js/");
            if ("link".equals(tag) && "href".equals(key) && isLocal&& !isActive&& !isDeployment) {
              newNode.setProperty(new StringProperty(PropertyView.Html.concat(key)),"${link.path}?${link.version}");
            }
 else             if (("href".equals(key) || "src".equals(key)) && isLocal && !isActive&& !isAnchor&& !isStructrLib&& !isDeployment) {
              newNode.setProperty(new StringProperty(PropertyView.Html.concat(key)),"${link.path}");
            }
 else {
              newNode.setProperty(new StringProperty(PropertyView.Html.concat(key)),value);
            }
          }
        }
      }
      final StringProperty typeKey=new StringProperty(PropertyView.Html.concat("type"));
      if ("script".equals(tag)) {
        final String contentType=newNode.getProperty(typeKey);
        if (contentType == null) {
          newNode.setProperty(typeKey,"text/javascript");
        }
 else         if (contentType.equals("application/schema+json")) {
          for (          final Node scriptContentNode : node.childNodes()) {
            final String source=scriptContentNode.toString();
            SchemaJsonImporter.importSchemaJson(source);
          }
        }
      }
      if (parent != null) {
        if (newNode instanceof Head && parent instanceof Body) {
          final org.w3c.dom.Node html=parent.getParentNode();
          html.insertBefore(newNode,parent);
        }
 else {
          parent.appendChild(newNode);
        }
      }
      if (processComment && commentHandler != null && StringUtils.isNotBlank(lastComment)) {
        if (commentHandler.handleComment(page,newNode,lastComment)) {
          if (lastCommentNode != null) {
            parent.removeChild(lastCommentNode);
          }
        }
        lastCommentNode=null;
        lastComment=null;
      }
      processComment=true;
      createChildNodes(node,newNode,page,removeHashAttribute);
    }
  }
  return rootElement;
}
