{
  if (alreadyDownloaded.containsKey(downloadAddress)) {
    return alreadyDownloaded.get(downloadAddress);
  }
  final String uuid=UUID.randomUUID().toString().replaceAll("[\\-]+","");
  String contentType;
  final String relativeFilePath=File.getDirectoryPath(uuid) + "/" + uuid;
  final String filePath=FileHelper.getFilePath(relativeFilePath);
  final java.io.File fileOnDisk=new java.io.File(filePath);
  fileOnDisk.getParentFile().mkdirs();
  long size;
  long checksum;
  URL downloadUrl;
  try {
    downloadUrl=new URL(base,downloadAddress);
    logger.info("Starting download from {}",downloadUrl);
    copyURLToFile(downloadUrl.toString(),fileOnDisk);
  }
 catch (  IOException ioe) {
    if (originalUrl == null || address == null) {
      logger.info("Cannot download from {} without base address",downloadAddress);
      return null;
    }
    logger.warn("Unable to download from {} {}",new Object[]{originalUrl,downloadAddress});
    try {
      if (address.endsWith("/")) {
        logger.info("Starting download from alternative URL {} {} {}",new Object[]{originalUrl,address,downloadAddress});
        downloadUrl=new URL(new URL(originalUrl,address),downloadAddress);
      }
 else {
        logger.info("Starting download from alternative URL {} {} {}",new Object[]{originalUrl,address.concat("/"),downloadAddress});
        downloadUrl=new URL(new URL(originalUrl,address.concat("/")),downloadAddress);
      }
      copyURLToFile(downloadUrl.toString(),fileOnDisk);
    }
 catch (    MalformedURLException ex) {
      logger.error("Could not resolve address {}",address.concat("/"));
      return null;
    }
catch (    IOException ex) {
      logger.warn("Unable to download from {}",address.concat("/"));
      return null;
    }
    logger.info("Starting download from alternative URL {}",downloadUrl);
  }
  final String fileName=PathHelper.getName(downloadAddress);
  if (StringUtils.isBlank(fileName)) {
    logger.warn("Can't figure out filename from download address {}, aborting.",downloadAddress);
    return null;
  }
  try {
    contentType=FileHelper.getContentMimeType(fileOnDisk,fileName);
    size=fileOnDisk.length();
    checksum=FileUtils.checksumCRC32(fileOnDisk);
  }
 catch (  IOException ioe) {
    logger.warn("Unable to determine MIME type, size or checksum of {}",fileOnDisk);
    return null;
  }
  logger.info("Download URL: {}, address: {}, cleaned address: {}, filename: {}",new Object[]{downloadUrl,address,StringUtils.substringBeforeLast(address,"/"),fileName});
  String relativePath=StringUtils.substringAfter(downloadUrl.toString(),StringUtils.substringBeforeLast(address,"/"));
  if (StringUtils.isBlank(relativePath)) {
    relativePath=downloadAddress;
  }
  final String path;
  final String httpPrefix="http://";
  final String httpsPrefix="https://";
  final String flexiblePrefix="//";
  if (downloadAddress.startsWith(httpsPrefix)) {
    path=StringUtils.substringBefore((StringUtils.substringAfter(downloadAddress,httpsPrefix)),fileName);
  }
 else   if (downloadAddress.startsWith(httpPrefix)) {
    path=StringUtils.substringBefore((StringUtils.substringAfter(downloadAddress,httpPrefix)),fileName);
  }
 else   if (downloadAddress.startsWith(flexiblePrefix)) {
    path=StringUtils.substringBefore((StringUtils.substringAfter(downloadAddress,flexiblePrefix)),fileName);
  }
 else {
    path=StringUtils.substringBefore(relativePath,fileName);
  }
  logger.info("Relative path: {}, final path: {}",new Object[]{relativePath,path});
  if (contentType.equals("text/plain")) {
    contentType=StringUtils.defaultIfBlank(contentTypeForExtension.get(StringUtils.substringAfterLast(fileName,".")),"text/plain");
  }
  final String ct=contentType;
  try {
    final String fullPath=path + fileName;
    FileBase fileNode=fileExists(fullPath,checksum);
    if (fileNode == null) {
      if (ImageHelper.isImageType(fileName)) {
        fileNode=createImageNode(uuid,fullPath,ct,size,checksum);
      }
 else {
        fileNode=createFileNode(uuid,fullPath,ct,size,checksum);
      }
      if (contentType.equals("text/css")) {
        processCssFileNode(fileNode,downloadUrl);
      }
    }
 else {
      fileOnDisk.delete();
    }
    alreadyDownloaded.put(downloadAddress,fileNode);
    return fileNode;
  }
 catch (  final FrameworkException|IOException ex) {
    logger.warn("Could not create file node.",ex);
  }
  return null;
}
