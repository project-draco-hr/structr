{
  final Map<String,Object> configuration=new LinkedHashMap<>();
  final App app=StructrApp.getInstance();
  try (final Tx tx=app.tx()){
    final ShadowDocument shadowDocument=app.nodeQuery(ShadowDocument.class).getFirst();
    if (shadowDocument != null) {
      for (      final DOMNode node : shadowDocument.getProperty(Page.elements)) {
        if (node.inTrash() || node.getProperty(DOMNode.parent) != null) {
          continue;
        }
        final Map<String,Object> properties=new LinkedHashMap<>();
        String name=node.getProperty(AbstractNode.name);
        if (name == null) {
          name=node.getUuid();
        }
        configuration.put(name,properties);
        exportConfiguration(node,properties);
        final String content=node.getContent(RenderContext.EditMode.DEPLOYMENT);
        if (content != null) {
          final Path pageFile=target.resolve(name + ".html");
          try (final OutputStreamWriter writer=new OutputStreamWriter(new FileOutputStream(pageFile.toFile()))){
            writer.write(content);
            writer.flush();
            writer.close();
          }
 catch (          IOException ioex) {
            ioex.printStackTrace();
          }
        }
      }
    }
    tx.success();
  }
   try (final Writer fos=new OutputStreamWriter(new FileOutputStream(configTarget.toFile()))){
    getGson().toJson(configuration,fos);
  }
 catch (  IOException ioex) {
    ioex.printStackTrace();
  }
}
