{
  final String name=StringUtils.substringBeforeLast(fileName,".html");
  final PropertyMap properties=getPropertiesForComponent(name);
  final DOMNode existingComponent=getExistingComponent(name);
  try (final Tx tx=app.tx()){
    if (existingComponent != null) {
      deleteComponent(app,name);
    }
    final String src=new String(Files.readAllBytes(file),Charset.forName("UTF-8"));
    boolean visibleToPublic=get(properties,GraphObject.visibleToPublicUsers,false);
    boolean visibleToAuth=get(properties,GraphObject.visibleToPublicUsers,false);
    final Importer importer=new Importer(securityContext,src,null,name,visibleToPublic,visibleToAuth);
    importer.setIsDeployment(true);
    final boolean parseOk=importer.parse(false);
    if (parseOk) {
      logger.log(Level.INFO,"Importing page {0} from {1}..",new Object[]{name,fileName});
      importer.setCommentHandler(new DeploymentCommentHandler());
      final ShadowDocument shadowDocument=CreateComponentCommand.getOrCreateHiddenDocument();
      final DOMNode rootElement=importer.createComponentChildNodes(shadowDocument);
      if (rootElement != null) {
        rootElement.setProperty(AbstractNode.name,name);
        if (properties != null) {
          rootElement.setProperties(securityContext,properties);
        }
      }
    }
    tx.success();
  }
 }
