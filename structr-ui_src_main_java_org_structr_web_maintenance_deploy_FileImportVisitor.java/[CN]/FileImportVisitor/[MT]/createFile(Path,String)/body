{
  try (final Tx tx=app.tx()){
    final Path parentPath=basePath.relativize(file).getParent();
    final Folder parent=createFolders(parentPath);
    final FileBase existing=app.nodeQuery(FileBase.class).and(FileBase.parent,parent).and(FileBase.name,fileName).getFirst();
    final String fullPath=(parentPath != null ? "/" + parentPath.toString() : "") + "/" + fileName;
    if (existing != null) {
      final Long checksumOfExistingFile=existing.getChecksum();
      final Long checksumOfNewFile=FileHelper.getChecksum(file.toFile());
      if (checksumOfExistingFile != null && checksumOfNewFile != null && checksumOfExistingFile.equals(checksumOfNewFile)) {
        logger.log(Level.INFO,"{0} is unmodified, skipping import.",fullPath);
        return;
      }
      app.delete(existing);
    }
    logger.log(Level.INFO,"Importing {0}..",fullPath);
    try (final FileInputStream fis=new FileInputStream(file.toFile())){
      final FileBase newFile=FileHelper.createFile(securityContext,fis,null,File.class,fileName);
      final String contentType=newFile.getContentType();
      if (StringUtils.startsWith(contentType,"image") || ImageHelper.isImageType(newFile.getProperty(name))) {
        newFile.unlockSystemPropertiesOnce();
        newFile.setProperty(NodeInterface.type,Image.class.getSimpleName());
      }
      newFile.setProperty(FileBase.parent,parent);
      final PropertyMap properties=getPropertiesForFileOrFolder(newFile.getPath());
      if (properties != null) {
        newFile.setProperties(securityContext,properties);
      }
    }
     tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
  }
}
