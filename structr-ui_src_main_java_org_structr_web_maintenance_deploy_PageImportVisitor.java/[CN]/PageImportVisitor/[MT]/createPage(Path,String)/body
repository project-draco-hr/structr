{
  final String name=StringUtils.substringBeforeLast(fileName,".html");
  final PropertyMap properties=getPropertiesForPage(name);
  final Page existingPage=getExistingPage(name);
  try (final Tx tx=app.tx()){
    if (existingPage != null) {
      deletePage(app,name);
    }
    final String src=new String(Files.readAllBytes(file),Charset.forName("UTF-8"));
    final String contentType=get(properties,Page.contentType,"text/html");
    if (StringUtils.startsWithIgnoreCase(src,DoctypeString) && "text/html".equals(contentType)) {
      boolean visibleToPublic=get(properties,GraphObject.visibleToPublicUsers,false);
      boolean visibleToAuth=get(properties,GraphObject.visibleToAuthenticatedUsers,false);
      final Importer importer=new Importer(securityContext,src,null,name,visibleToPublic,visibleToAuth);
      final boolean parseOk=importer.parse();
      if (parseOk) {
        logger.log(Level.INFO,"Importing page {0} from {1}..",new Object[]{name,fileName});
        importer.setCommentHandler(new DeploymentCommentHandler());
        importer.setIsImport(true);
        final Page newPage=importer.readPage();
        fixDocumentElements(newPage);
        if (properties != null) {
          newPage.setProperties(securityContext,properties);
        }
      }
    }
 else {
      logger.log(Level.INFO,"Importing page {0} from {1}..",new Object[]{name,fileName});
      boolean visibleToPublic=get(properties,GraphObject.visibleToPublicUsers,false);
      boolean visibleToAuth=get(properties,GraphObject.visibleToPublicUsers,false);
      final Importer importer=new Importer(securityContext,src,null,name,visibleToPublic,visibleToAuth);
      final boolean parseOk=importer.parse(true);
      if (parseOk) {
        logger.log(Level.INFO,"Importing page {0} from {1}..",new Object[]{name,fileName});
        importer.setCommentHandler(new DeploymentCommentHandler());
        importer.setIsImport(true);
        final Page newPage=app.create(Page.class,name);
        importer.createChildNodes(newPage,newPage);
        if (properties != null) {
          newPage.setProperties(securityContext,properties);
        }
      }
    }
    tx.success();
  }
 }
