{
  final DatabaseService graphDb=(DatabaseService)arguments.get("graphDb");
  final RelationshipFactory relFactory=new RelationshipFactory(securityContext);
  if (graphDb != null) {
    final Iterator<AbstractRelationship> relIterator=Iterables.map(relFactory,relFactory.instantiate(graphDb.getAllRelationships())).iterator();
    final long counter=bulkGraphOperation(securityContext,relIterator,1000,"MigrateRelationships",new BulkGraphOperation<AbstractRelationship>(){
      @Override public void handleGraphObject(      SecurityContext securityContext,      AbstractRelationship rel){
        if (rel.getProperty(GraphObject.id) != null) {
          Class type=rel.getClass();
          if (!type.equals(GenericRelationship.class))           return;
          try {
            String relType=rel.getType();
            rel.getRelationship().removeProperty("combinedType");
            rel.unlockReadOnlyPropertiesOnce();
            if ("CONTAINS".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,DOMChildren.class.getSimpleName());
            }
 else             if ("CONTAINS_NEXT_SIBLING".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,DOMSiblings.class.getSimpleName());
            }
 else             if ("OWNS".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,PrincipalOwnsNode.class.getSimpleName());
            }
 else             if ("SECURITY".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,Security.class.getSimpleName());
            }
 else             if ("PAGE".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,PageLink.class.getSimpleName());
            }
 else             if ("LINK".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,ResourceLink.class.getSimpleName());
            }
 else             if ("SYNC".equals(relType)) {
              rel.setProperty(AbstractRelationship.type,Sync.class.getSimpleName());
            }
          }
 catch (          FrameworkException fex) {
            logger.log(Level.WARNING,"Unable to migrate relationship {0}: {1}",new Object[]{rel.getUuid(),fex.getMessage()});
          }
        }
      }
      @Override public void handleThrowable(      SecurityContext securityContext,      Throwable t,      AbstractRelationship rel){
        logger.log(Level.WARNING,"Unable to migrate relationship {0}: {1}",new Object[]{rel.getUuid(),t.getMessage()});
      }
      @Override public void handleTransactionFailure(      SecurityContext securityContext,      Throwable t){
        logger.log(Level.WARNING,"Unable to migrate relationship: {0}",t.getMessage());
      }
    }
);
    logger.log(Level.INFO,"Finished setting properties on {0} nodes",counter);
  }
}
