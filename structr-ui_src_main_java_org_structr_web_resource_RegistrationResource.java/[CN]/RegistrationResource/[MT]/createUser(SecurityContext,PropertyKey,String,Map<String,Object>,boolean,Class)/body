{
  Principal user=null;
  try {
    user=AuthHelper.getPrincipalForCredential(credentialKey,credentialValue);
    if (user != null) {
      user=new NodeFactory<Principal>(securityContext).instantiate(user.getNode());
      user.unlockReadOnlyPropertiesOnce();
      user.setProperty(AbstractNode.type,User.class.getSimpleName());
      user.setProperty(User.confirmationKey,confKey);
    }
 else     if (autoCreate) {
      propertySet.remove(credentialKey.jsonName());
      propertySet.remove(User.name.jsonName());
      propertySet.remove(User.confirmationKey.jsonName());
      PropertyMap props=PropertyMap.inputTypeToJavaType(securityContext,propertySet);
      props.put(credentialKey,credentialValue);
      props.put(User.name,credentialValue);
      props.put(User.confirmationKey,confKey);
      user=(Principal)StructrApp.getInstance(securityContext).create(userClass,props);
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
  return user;
}
