{
  Principal user=null;
  try {
    user=AuthHelper.getPrincipalForCredential(credentialKey,credentialValue);
    if (user != null) {
      user=new NodeFactory<Principal>(securityContext).instantiate(user.getNode());
      user.unlockSystemPropertiesOnce();
      user.setProperty(AbstractNode.type,User.class.getSimpleName());
      user.setProperty(User.confirmationKey,confKey);
    }
 else     if (autoCreate) {
      final App app=StructrApp.getInstance(securityContext);
      propertySet.remove(credentialKey.jsonName());
      propertySet.remove(User.confirmationKey.jsonName());
      PropertyMap props=PropertyMap.inputTypeToJavaType(securityContext,Principal.class,propertySet);
      final String customAttributesString=User.eMail.jsonName() + "," + Services.getInstance().getConfigurationValue(CUSTOM_ATTRIBUTES);
      final List<String> customAttributes=Arrays.asList(customAttributesString.split("[ ,]+"));
      final Set<PropertyKey> propsToRemove=new HashSet<>();
      for (      final PropertyKey key : props.keySet()) {
        if (!customAttributes.contains(key.jsonName())) {
          propsToRemove.add(key);
        }
      }
      for (      final PropertyKey propToRemove : propsToRemove) {
        props.remove(propToRemove);
      }
      props.put(credentialKey,credentialValue);
      props.put(User.confirmationKey,confKey);
      user=(Principal)app.create(userClass,props);
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,null,ex);
  }
  return user;
}
