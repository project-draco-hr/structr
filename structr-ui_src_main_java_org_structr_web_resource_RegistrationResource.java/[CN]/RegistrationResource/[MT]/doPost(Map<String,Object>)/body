{
  boolean existingUser=false;
  if (propertySet.containsKey(User.eMail.jsonName())) {
    SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
    final Principal user;
    final String emailString=(String)propertySet.get(User.eMail.jsonName());
    if (StringUtils.isEmpty(emailString)) {
      return new RestMethodResult(HttpServletResponse.SC_BAD_REQUEST);
    }
    localeString=(String)propertySet.get(MailTemplate.locale.jsonName());
    confKey=UUID.randomUUID().toString();
    Result result=StructrApp.getInstance().command(SearchNodeCommand.class).execute(Search.andExactTypeAndSubtypes(User.class),Search.andExactProperty(superUserContext,User.eMail,emailString));
    if (!result.isEmpty()) {
      final App app=StructrApp.getInstance(securityContext);
      user=(Principal)result.get(0);
      try {
        app.beginTx();
        user.setProperty(User.confirmationKey,confKey);
        app.commitTx();
      }
  finally {
        app.finishTx();
      }
      existingUser=true;
    }
 else {
      Authenticator auth=securityContext.getAuthenticator();
      user=createUser(securityContext,User.eMail,emailString,propertySet,auth.getUserAutoCreate(),auth.getUserClass());
    }
    if (user != null) {
      if (!sendInvitationLink(user,propertySet)) {
        return new RestMethodResult(HttpServletResponse.SC_BAD_REQUEST);
      }
      if (existingUser) {
        return new RestMethodResult(HttpServletResponse.SC_OK);
      }
 else {
        return new RestMethodResult(HttpServletResponse.SC_CREATED);
      }
    }
 else {
      return new RestMethodResult(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 else {
    return new RestMethodResult(HttpServletResponse.SC_BAD_REQUEST);
  }
}
