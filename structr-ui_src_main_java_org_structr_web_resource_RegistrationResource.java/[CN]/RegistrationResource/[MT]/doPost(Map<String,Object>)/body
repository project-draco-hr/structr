{
  if (propertySet.containsKey(User.email.jsonName()) && propertySet.size() == 1) {
    final String emailString=(String)propertySet.get(User.email.jsonName());
    localeString=(String)propertySet.get(MailTemplate.locale.jsonName());
    confKey=UUID.randomUUID().toString();
    User newUser=Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction<User>(){
      @Override public User execute() throws FrameworkException {
        return (User)Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,User.class.getSimpleName()),new NodeAttribute(User.email,emailString),new NodeAttribute(User.name,emailString),new NodeAttribute(User.confirmationKey,confKey));
      }
    }
);
    if (newUser != null) {
      sendInvitationLink(newUser);
    }
  }
  return new RestMethodResult(HttpServletResponse.SC_OK);
}
