{
  final Authenticator auth=getConfig().getAuthenticator();
  List<Page> pages=null;
  boolean requestUriContainsUuids=false;
  SecurityContext securityContext;
  final App app;
  try {
    final String path=request.getPathInfo();
    if (checkRegistration(auth,request,response,path)) {
      return;
    }
    if (checkResetPassword(auth,request,response,path)) {
      return;
    }
    try (final Tx tx=StructrApp.getInstance().tx()){
      securityContext=auth.initializeAndExamineRequest(request,response);
      tx.success();
    }
     app=StructrApp.getInstance(securityContext);
    try (final Tx tx=app.tx()){
      securityContext.setAccessMode(AccessMode.Frontend);
      request.setCharacterEncoding("UTF-8");
      response.setCharacterEncoding("UTF-8");
      boolean dontCache=false;
      logger.log(Level.FINE,"Path info {0}",path);
      if (response.getStatus() == 302) {
        tx.success();
        return;
      }
      final Principal user=securityContext.getUser(false);
      if (user != null) {
        dontCache=true;
      }
      final RenderContext renderContext=RenderContext.getInstance(securityContext,request,response);
      renderContext.setResourceProvider(config.getResourceProvider());
      final EditMode edit=renderContext.getEditMode(user);
      DOMNode rootElement=null;
      AbstractNode dataNode=null;
      final String[] uriParts=PathHelper.getParts(path);
      if ((uriParts == null) || (uriParts.length == 0)) {
        rootElement=findIndexPage(securityContext,pages,edit);
        logger.log(Level.FINE,"No path supplied, trying to find index page");
      }
 else {
        if (rootElement == null) {
          rootElement=findPage(securityContext,pages,path,edit);
        }
 else {
          dontCache=true;
        }
      }
      if (rootElement == null) {
        final FileBase file=findFile(securityContext,request,path);
        if (file != null) {
          streamFile(securityContext,file,request,response,edit);
          tx.success();
          return;
        }
        final Matcher matcher=threadLocalUUIDMatcher.get();
        for (int i=0; i < uriParts.length; i++) {
          request.setAttribute(uriParts[i],i);
          matcher.reset(uriParts[i]);
          requestUriContainsUuids|=matcher.matches();
        }
        if (!requestUriContainsUuids) {
          dataNode=findFirstNodeByName(securityContext,request,path);
        }
 else {
          dataNode=findNodeByUuid(securityContext,PathHelper.getName(path));
        }
        if (dataNode != null) {
          request.removeAttribute(POSSIBLE_ENTRY_POINTS_KEY);
          rootElement=findPage(securityContext,pages,StringUtils.substringBeforeLast(path,PathHelper.PATH_SEP),edit);
          renderContext.setDetailsDataObject(dataNode);
          if (rootElement == null && dataNode instanceof DOMNode) {
            rootElement=((DOMNode)dataNode);
          }
        }
      }
      if (rootElement == null) {
        final HttpBasicAuthResult authResult=checkHttpBasicAuth(request,response,path);
switch (authResult.authState()) {
case Authenticated:
          final Linkable result=authResult.getRootElement();
        if (result instanceof Page) {
          rootElement=(DOMNode)result;
          securityContext=authResult.getSecurityContext();
          renderContext.pushSecurityContext(securityContext);
        }
 else         if (result instanceof FileBase) {
          streamFile(authResult.getSecurityContext(),(File)result,request,response,EditMode.NONE);
          tx.success();
          return;
        }
      break;
case MustAuthenticate:
    tx.success();
  return;
case NoBasicAuth:
break;
}
}
if (rootElement == null) {
rootElement=notFound(response,securityContext);
}
if (rootElement == null) {
tx.success();
return;
}
dontCache|=rootElement.getProperty(Page.dontCache);
if (EditMode.WIDGET.equals(edit) || dontCache) {
setNoCacheHeaders(response);
}
if (!securityContext.isVisible(rootElement)) {
rootElement=notFound(response,securityContext);
if (rootElement == null) {
tx.success();
return;
}
}
 else {
if (!EditMode.WIDGET.equals(edit) && !dontCache && notModifiedSince(request,response,rootElement,dontCache)) {
ServletOutputStream out=response.getOutputStream();
out.flush();
out.close();
}
 else {
response.setCharacterEncoding("UTF-8");
String contentType=rootElement.getProperty(Page.contentType);
if (contentType == null) {
contentType="text/html;charset=UTF-8";
}
if (contentType.equals("text/html")) {
contentType=contentType.concat(";charset=UTF-8");
}
response.setContentType(contentType);
setCustomResponseHeaders(response);
final boolean createsRawData=rootElement.getProperty(Page.pageCreatesRawData);
if (isAsync && !createsRawData) {
final AsyncContext async=request.startAsync();
final ServletOutputStream out=async.getResponse().getOutputStream();
final AtomicBoolean finished=new AtomicBoolean(false);
final DOMNode rootNode=rootElement;
threadPool.submit(new Runnable(){
  @Override public void run(){
    try (final Tx tx=app.tx()){
      rootNode.render(renderContext,0);
      finished.set(true);
      tx.success();
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"",t);
      final String errorMsg=t.getMessage();
      try {
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,errorMsg);
        finished.set(true);
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,"",ex);
      }
    }
  }
}
);
out.setWriteListener(new WriteListener(){
  @Override public void onWritePossible() throws IOException {
    try {
      final Queue<String> queue=renderContext.getBuffer().getQueue();
      while (out.isReady()) {
        String buffer=null;
synchronized (queue) {
          buffer=queue.poll();
        }
        if (buffer != null) {
          out.print(buffer);
        }
 else {
          if (finished.get()) {
            async.complete();
            if (response.getStatus() != HttpServletResponse.SC_NOT_FOUND) {
              response.setStatus(HttpServletResponse.SC_OK);
            }
            break;
          }
          Thread.sleep(1);
        }
      }
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"",t);
    }
  }
  @Override public void onError(  Throwable t){
    logger.log(Level.WARNING,"",t);
  }
}
);
}
 else {
final StringRenderBuffer buffer=new StringRenderBuffer();
renderContext.setBuffer(buffer);
rootElement.render(renderContext,0);
try {
  response.getOutputStream().write(buffer.getBuffer().toString().getBytes("utf-8"));
  response.getOutputStream().flush();
  response.getOutputStream().close();
}
 catch (IOException ioex) {
  logger.log(Level.WARNING,"",ioex);
}
}
}
}
tx.success();
}
 catch (FrameworkException fex) {
logger.log(Level.SEVERE,"Exception while processing request",fex);
}
}
 catch (IOException|FrameworkException t) {
logger.log(Level.SEVERE,"Exception while processing request",t);
UiAuthenticator.writeInternalServerError(response);
}
}
