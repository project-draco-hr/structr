{
  double start=System.nanoTime();
  SecurityContext securityContext;
  Authenticator authenticator;
  App app;
  try {
    try (final Tx tx=StructrApp.getInstance().tx()){
      authenticator=config.getAuthenticator();
      securityContext=authenticator.initializeAndExamineRequest(request,response);
      tx.success();
    }
     app=StructrApp.getInstance(securityContext);
    try (final Tx tx=app.tx()){
      securityContext.setAccessMode(AccessMode.Frontend);
      request.setCharacterEncoding("UTF-8");
      response.setCharacterEncoding("UTF-8");
      boolean dontCache=false;
      String path=request.getPathInfo();
      logger.log(Level.FINE,"Path info {0}",path);
      logger.log(Level.FINE,"Request examined by security context in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
      if (response.getStatus() == 302) {
        return;
      }
      Principal user=securityContext.getUser(false);
      if (user != null) {
        dontCache=true;
      }
      RenderContext renderContext=RenderContext.getInstance(request,response,getEffectiveLocale(request));
      renderContext.setResourceProvider(config.getResourceProvider());
      EditMode edit=renderContext.getEditMode(user);
      DOMNode rootElement=null;
      AbstractNode dataNode=null;
      String[] uriParts=PathHelper.getParts(path);
      if ((uriParts == null) || (uriParts.length == 0)) {
        rootElement=findIndexPage(securityContext);
        logger.log(Level.FINE,"No path supplied, trying to find index page");
      }
 else {
        if (checkGetSessionId(request,response,path)) {
          return;
        }
        if (checkRegistration(securityContext,request,response,path)) {
          return;
        }
        if (rootElement == null) {
          rootElement=findPage(request,path);
        }
 else {
          dontCache=true;
        }
      }
      if (rootElement == null) {
        org.structr.web.entity.File file=findFile(request,path);
        if (file != null) {
          logger.log(Level.FINE,"File found in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
          streamFile(securityContext,file,request,response,edit);
          return;
        }
        Matcher matcher=threadLocalUUIDMatcher.get();
        boolean requestUriContainsUuids=false;
        for (int i=0; i < uriParts.length; i++) {
          request.setAttribute(uriParts[i],i);
          matcher.reset(uriParts[i]);
          requestUriContainsUuids|=matcher.matches();
        }
        if (!requestUriContainsUuids) {
          dataNode=findFirstNodeByPath(request,path);
        }
 else {
          AbstractNode n=(AbstractNode)StructrApp.getInstance(securityContext).get(PathHelper.getName(path));
          if (n != null) {
            dataNode=n;
          }
        }
        if (dataNode != null) {
          request.removeAttribute(POSSIBLE_ENTRY_POINTS);
          rootElement=findPage(request,StringUtils.substringBeforeLast(path,PathHelper.PATH_SEP));
          renderContext.setDetailsDataObject(dataNode);
          if (rootElement == null && dataNode instanceof DOMNode) {
            rootElement=((DOMNode)dataNode);
          }
        }
      }
      if (rootElement == null) {
        if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
          try {
            HttpAuthenticator.writeUnauthorized(response);
          }
 catch (          IllegalStateException ise) {
          }
        }
 else {
          HttpAuthenticator.writeNotFound(response);
        }
        return;
      }
      logger.log(Level.FINE,"Page found in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
      if (EditMode.DATA.equals(edit) || dontCache) {
        setNoCacheHeaders(response);
      }
      if (securityContext.isVisible(rootElement)) {
        double setup=System.nanoTime();
        logger.log(Level.FINE,"Setup time: {0} seconds",decimalFormat.format((setup - start) / 1000000000.0));
        if (!EditMode.DATA.equals(edit) && !dontCache && notModifiedSince(request,response,rootElement)) {
          ServletOutputStream out=response.getOutputStream();
          out.flush();
          out.close();
        }
 else {
          response.setCharacterEncoding("UTF-8");
          rootElement.render(securityContext,renderContext,0);
          String content=renderContext.getBuffer().toString();
          AsyncContext async=request.startAsync();
          ServletOutputStream out=response.getOutputStream();
          WriteListener wl=new StructrWriteListener(IOUtils.toInputStream(content,"UTF-8"),async,out);
          out.setWriteListener(wl);
          String contentType=rootElement.getProperty(Page.contentType);
          if (contentType != null && contentType.equals("text/html")) {
            contentType=contentType.concat(";charset=UTF-8");
            response.setContentType(contentType);
          }
 else {
            response.setContentType("text/html;charset=UTF-8");
          }
          response.setStatus(HttpServletResponse.SC_OK);
          double end=System.nanoTime();
          logger.log(Level.FINE,"Content for path {0} in {1} seconds",new Object[]{path,decimalFormat.format((end - setup) / 1000000000.0)});
        }
      }
 else {
        response.sendError(HttpServletResponse.SC_NOT_FOUND);
      }
    }
 catch (    FrameworkException fex) {
      logger.log(Level.SEVERE,"Exception while processing request",fex);
    }
  }
 catch (  IOException|FrameworkException t) {
    t.printStackTrace();
    logger.log(Level.SEVERE,"Exception while processing request",t);
    HttpAuthenticator.writeInternalServerError(response);
  }
}
