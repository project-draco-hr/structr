{
  double start=System.nanoTime();
  try {
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    boolean dontCache=false;
    String resp=(String)request.getSession().getAttribute(REST_RESPONSE);
    if (resp != null) {
      request.setAttribute(REST_RESPONSE,resp);
      request.getSession().removeAttribute(REST_RESPONSE);
      dontCache=true;
    }
    String path=PathHelper.clean(request.getPathInfo());
    logger.log(Level.FINE,"Path info {0}",path);
    SecurityContext securityContext=SecurityContext.getInstance(this.getServletConfig(),request,response,AccessMode.Frontend);
    RenderContext renderContext=RenderContext.getInstance(request,response,Locale.getDefault());
    edit=renderContext.getEdit();
    org.structr.core.entity.File file=findFile(request,path);
    DOMNode rootElement=null;
    String searchFor=null;
    if (file == null) {
      String[] urlParts=PathHelper.getParts(path);
      if (urlParts.length > 1) {
        searchFor=StringUtils.substringBefore(urlParts[1],"?");
      }
      if ((urlParts == null) || (urlParts.length == 0)) {
        rootElement=findIndexPage();
        logger.log(Level.INFO,"No path supplied, trying to find index page");
      }
 else {
        rootElement=findPage(request,path);
      }
    }
    AbstractNode node=file != null ? file : rootElement != null ? rootElement : null;
    if (edit || dontCache) {
      response.setHeader("Pragma","no-cache");
    }
 else {
      if (node != null) {
        lastModified=node.getLastModifiedDate();
      }
    }
    if ((rootElement != null) && securityContext.isVisible(rootElement)) {
      request.getSession().setAttribute(LAST_GET_URL,request.getPathInfo());
      PrintWriter out=response.getWriter();
      String uuid=rootElement.getProperty(AbstractNode.uuid);
      List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
      Map<String,String[]> parameterMap=request.getParameterMap();
      if ((parameterMap != null) && (parameterMap.size() > 0)) {
        attrs=convertToNodeAttributes(parameterMap);
      }
      double setup=System.nanoTime();
      logger.log(Level.FINE,"Setup time: {0} seconds",decimalFormat.format((setup - start) / 1000000000.0));
      if (!edit && !dontCache && setCachingHeader(request,response,node)) {
        out.flush();
        out.close();
      }
 else {
        rootElement.render(securityContext,renderContext,0);
        String content=renderContext.getBuffer().toString();
        double end=System.nanoTime();
        logger.log(Level.FINE,"Content for path {0} in {1} seconds",new Object[]{path,decimalFormat.format((end - setup) / 1000000000.0)});
        String contentType=rootElement.getProperty(Page.contentType);
        if (contentType != null) {
          if (contentType.equals("text/html")) {
            contentType=contentType.concat(";charset=UTF-8");
          }
          response.setContentType(contentType);
        }
 else {
          response.setContentType("text/html;charset=UTF-8");
        }
        HttpAuthenticator.writeContent(content,response);
      }
    }
 else     if ((file != null) && securityContext.isVisible(file)) {
      OutputStream out=response.getOutputStream();
      if (!edit && setCachingHeader(request,response,node)) {
        out.flush();
        out.close();
      }
 else {
        InputStream in=file.getInputStream();
        String contentType=file.getContentType();
        if (contentType != null) {
          response.setContentType(contentType);
        }
 else {
          response.setContentType("application/octet-stream");
        }
        try {
          IOUtils.copy(in,out);
        }
 catch (        Throwable t) {
        }
 finally {
          if (out != null) {
            try {
              out.flush();
              out.close();
            }
 catch (            Throwable t) {
            }
          }
          if (in != null) {
            in.close();
          }
          response.setStatus(HttpServletResponse.SC_OK);
        }
      }
    }
 else {
      if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
        try {
          HttpAuthenticator.writeUnauthorized(response);
        }
 catch (        IllegalStateException ise) {
        }
      }
 else {
        HttpAuthenticator.writeNotFound(response);
      }
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception while processing request",t);
    HttpAuthenticator.writeInternalServerError(response);
  }
}
