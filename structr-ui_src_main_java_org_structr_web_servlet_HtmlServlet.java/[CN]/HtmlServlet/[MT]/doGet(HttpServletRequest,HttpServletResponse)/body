{
  double start=System.nanoTime();
  try {
    SecurityContext securityContext=getAuthenticator().initializeAndExamineRequest(request,response);
    securityContext.setAccessMode(AccessMode.Frontend);
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    boolean dontCache=false;
    String path=PathHelper.clean(request.getPathInfo());
    logger.log(Level.FINE,"Path info {0}",path);
    logger.log(Level.FINE,"Request examined by security context in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
    if (response.getStatus() == 302) {
      return;
    }
    if (securityContext.getUser(false) != null) {
      dontCache=true;
    }
    RenderContext renderContext=RenderContext.getInstance(request,response,Locale.getDefault());
    renderContext.setResourceProvider(resourceProvider);
    edit=renderContext.getEdit();
    DOMNode rootElement=null;
    AbstractNode dataNode=null;
    String[] uriParts=PathHelper.getParts(path);
    if ((uriParts == null) || (uriParts.length == 0)) {
      rootElement=findIndexPage(securityContext);
      logger.log(Level.FINE,"No path supplied, trying to find index page");
    }
 else {
      if (checkGetSessionId(request,response,path)) {
        return;
      }
      if (checkRegistration(securityContext,request,response,path)) {
        return;
      }
      if (rootElement == null) {
        rootElement=findPage(request,path);
      }
 else {
        dontCache=true;
      }
    }
    if (rootElement == null) {
      org.structr.web.entity.File file=findFile(request,path);
      if (file != null) {
        logger.log(Level.FINE,"File found in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
        streamFile(securityContext,file,request,response);
        return;
      }
      Matcher matcher=threadLocalUUIDMatcher.get();
      boolean requestUriContainsUuids=false;
      for (int i=0; i < uriParts.length; i++) {
        request.setAttribute(uriParts[i],i);
        matcher.reset(uriParts[i]);
        requestUriContainsUuids|=matcher.matches();
      }
      if (!requestUriContainsUuids) {
        dataNode=findFirstNodeByPath(request,path);
      }
 else {
        AbstractNode n=(AbstractNode)Services.command(securityContext,GetNodeByIdCommand.class).execute(PathHelper.getName(path));
        if (n != null) {
          dataNode=n;
        }
      }
      if (dataNode != null) {
        request.removeAttribute(POSSIBLE_ENTRY_POINTS);
        rootElement=findPage(request,PathHelper.clean(StringUtils.substringBeforeLast(path,PathHelper.PATH_SEP)));
        renderContext.setDetailsDataObject(dataNode);
      }
    }
    if (rootElement == null) {
      if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
        try {
          HttpAuthenticator.writeUnauthorized(response);
        }
 catch (        IllegalStateException ise) {
        }
      }
 else {
        HttpAuthenticator.writeNotFound(response);
      }
      return;
    }
    logger.log(Level.FINE,"Page found in {0} seconds",decimalFormat.format((System.nanoTime() - start) / 1000000000.0));
    if (edit || dontCache) {
      setNoCacheHeaders(response);
    }
 else {
      lastModified=rootElement.getLastModifiedDate();
    }
    if (securityContext.isVisible(rootElement)) {
      PrintWriter out=response.getWriter();
      double setup=System.nanoTime();
      logger.log(Level.FINE,"Setup time: {0} seconds",decimalFormat.format((setup - start) / 1000000000.0));
      if (!edit && !dontCache && notModifiedSince(request,response,rootElement)) {
        out.flush();
        out.close();
      }
 else {
        rootElement.render(securityContext,renderContext,0);
        String content=renderContext.getBuffer().toString();
        double end=System.nanoTime();
        logger.log(Level.FINE,"Content for path {0} in {1} seconds",new Object[]{path,decimalFormat.format((end - setup) / 1000000000.0)});
        String contentType=rootElement.getProperty(Page.contentType);
        if (contentType != null && contentType.equals("text/html")) {
          contentType=contentType.concat(";charset=UTF-8");
          response.setContentType(contentType);
        }
 else {
          response.setContentType("text/html;charset=UTF-8");
        }
        HttpAuthenticator.writeContent(content,response);
      }
    }
 else {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    logger.log(Level.SEVERE,"Exception while processing request",t);
    HttpAuthenticator.writeInternalServerError(response);
  }
}
