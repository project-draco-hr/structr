{
  boolean notModified=false;
  final Date lastModified=node.getLastModifiedDate();
  DateFormat httpDateFormat=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z",Locale.US);
  httpDateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
  response.setHeader("Date",httpDateFormat.format(new Date()));
  Calendar cal=new GregorianCalendar();
  Integer seconds=node.getProperty(Page.cacheForSeconds);
  if (seconds != null) {
    cal.add(Calendar.SECOND,seconds);
    response.setHeader("Cache-Control","max-age=" + seconds + ", s-maxage="+ seconds+ ", must-revalidate, proxy-revalidate");
    response.setHeader("Expires",httpDateFormat.format(cal.getTime()));
  }
 else {
    if (node.getProperty(AbstractNode.visibleToPublicUsers)) {
      response.setHeader("Cache-Control","must-revalidate, proxy-revalidate");
    }
 else {
      response.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, s-maxage=0, must-revalidate, proxy-revalidate");
    }
  }
  if (lastModified != null) {
    Date roundedLastModified=DateUtils.round(lastModified,Calendar.SECOND);
    response.setHeader("Last-Modified",httpDateFormat.format(roundedLastModified));
    String ifModifiedSince=request.getHeader("If-Modified-Since");
    if (StringUtils.isNotBlank(ifModifiedSince)) {
      try {
        Date ifModSince=httpDateFormat.parse(ifModifiedSince);
        if ((ifModSince != null) && (roundedLastModified.equals(ifModSince) || roundedLastModified.before(ifModSince))) {
          notModified=true;
          response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
          response.setHeader("Vary","Accept-Encoding");
        }
      }
 catch (      ParseException ex) {
        logger.log(Level.WARNING,"Could not parse If-Modified-Since header",ex);
      }
    }
  }
  return notModified;
}
