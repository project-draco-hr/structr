{
  for (  final String possiblePropertyName : possiblePropertyNamesForEntityResolving) {
    final String[] parts=possiblePropertyName.split("\\.");
    String className=AbstractNode.class.getSimpleName();
    String keyName=AbstractNode.name.jsonName();
switch (parts.length) {
case 2:
      className=parts[0];
    keyName=parts[1];
  break;
default :
logger.warn("Unable to process key for object resolution {}.",possiblePropertyName);
break;
}
if (StringUtils.isNoneBlank(className,keyName)) {
final Class type=config.getNodeEntityClass(className);
if (type != null) {
final PropertyKey key=config.getPropertyKeyForJSONName(type,keyName,false);
if (key != null) {
try {
  final PropertyConverter converter=key.inputConverter(SecurityContext.getSuperUserInstance());
  if (converter != null) {
    query.or(key,converter.convert(name));
  }
 else {
    query.or(key,name);
  }
}
 catch (FrameworkException ignore) {
}
}
 else {
logger.warn("Unable to find property key {} of type {} defined in key {} used for object resolution.",new Object[]{keyName,className,possiblePropertyName});
}
}
 else {
logger.warn("Unable to find type {} defined in key {} used for object resolution.",new Object[]{className,possiblePropertyName});
}
}
}
}
