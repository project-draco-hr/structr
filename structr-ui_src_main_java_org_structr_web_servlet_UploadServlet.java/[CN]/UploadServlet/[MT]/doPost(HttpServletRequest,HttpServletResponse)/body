{
  try {
    if (!ServletFileUpload.isMultipartContent(request)) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      response.getOutputStream().write("ERROR (400): Request does not contain multipart content.\n".getBytes("UTF-8"));
      return;
    }
  }
 catch (  IOException ioex) {
    logger.log(Level.WARNING,"Unable to send response",ioex);
  }
  SecurityContext securityContext=null;
  try (final Tx tx=StructrApp.getInstance().tx()){
    try {
      securityContext=getConfig().getAuthenticator().initializeAndExamineRequest(request,response);
    }
 catch (    AuthenticationException ae) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getOutputStream().write("ERROR (401): Invalid user or password.\n".getBytes("UTF-8"));
      return;
    }
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Unable to examine request",fex);
  }
catch (  IOException ioex) {
    logger.log(Level.WARNING,"Unable to send response",ioex);
  }
  if (securityContext == null) {
    logger.log(Level.WARNING,"No SecurityContext, aborting.");
    return;
  }
  try {
    if (securityContext.getUser(false) == null && Boolean.FALSE.equals(Boolean.parseBoolean(StructrApp.getConfigurationValue("UploadServlet.allowAnonymousUploads","false")))) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.getOutputStream().write("ERROR (401): Anonymous uploads forbidden.\n".getBytes("UTF-8"));
      return;
    }
    securityContext.setAccessMode(AccessMode.Frontend);
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    if (response.getStatus() == 302) {
      return;
    }
    final String pathInfo=request.getPathInfo();
    String type=null;
    if (StringUtils.isNotBlank(pathInfo)) {
      type=SchemaHelper.normalizeEntityName(StringUtils.stripStart(pathInfo.trim(),"/"));
    }
    uploader.setFileSizeMax(MEGABYTE * Long.parseLong(StructrApp.getConfigurationValue("UploadServlet.maxFileSize",MAX_FILE_SIZE)));
    uploader.setSizeMax(MEGABYTE * Long.parseLong(StructrApp.getConfigurationValue("UploadServlet.maxRequestSize",MAX_REQUEST_SIZE)));
    response.setContentType("text/html");
    final PrintWriter out=response.getWriter();
    List<FileItem> fileItemsList=uploader.parseRequest(request);
    Iterator<FileItem> fileItemsIterator=fileItemsList.iterator();
    final Map<String,Object> params=new HashMap<>();
    while (fileItemsIterator.hasNext()) {
      final FileItem item=fileItemsIterator.next();
      if (item.isFormField()) {
        params.put(item.getFieldName(),item.getString());
      }
 else {
        try {
          final String contentType=item.getContentType();
          boolean isImage=(contentType != null && contentType.startsWith("image"));
          boolean isVideo=(contentType != null && contentType.startsWith("video"));
          if (params.containsKey(NodeInterface.type.jsonName())) {
            type=(String)params.get(NodeInterface.type.jsonName());
          }
          Class cls=null;
          if (type != null) {
            cls=SchemaHelper.getEntityClassForRawType(type);
          }
 else {
            if (isImage) {
              cls=Image.class;
            }
 else             if (isVideo) {
              cls=SchemaHelper.getEntityClassForRawType("VideoFile");
              if (cls == null) {
                logger.log(Level.WARNING,"Unable to create entity of type VideoFile, class is not defined.");
              }
            }
 else {
              cls=org.structr.dynamic.File.class;
            }
          }
          final String name=item.getName().replaceAll("\\\\","/");
          FileBase newFile=null;
          String uuid=null;
          boolean retry=true;
          while (retry) {
            retry=false;
            try (final Tx tx=StructrApp.getInstance().tx()){
              newFile=FileHelper.createFile(securityContext,IOUtils.toByteArray(item.getInputStream()),contentType,cls);
              newFile.setProperty(AbstractNode.name,PathHelper.getName(name));
              newFile.setProperties(newFile.getSecurityContext(),PropertyMap.inputTypeToJavaType(securityContext,cls,params));
              final String defaultUploadFolderConfigValue=StructrApp.getConfigurationValue(Services.APPLICATION_DEFAULT_UPLOAD_FOLDER,null);
              if (defaultUploadFolderConfigValue != null) {
                final Folder defaultUploadFolder=FileHelper.createFolderPath(SecurityContext.getSuperUserInstance(),defaultUploadFolderConfigValue);
                if (defaultUploadFolder != null) {
                  newFile.setProperty(FileBase.hasParent,true);
                  newFile.setProperty(FileBase.parent,defaultUploadFolder);
                }
              }
              if (!newFile.validatePath(securityContext,null)) {
                newFile.setProperty(AbstractNode.name,name.concat("_").concat(FileHelper.getDateString()));
              }
              uuid=newFile.getUuid();
              tx.success();
            }
 catch (            RetryException rex) {
              retry=true;
            }
          }
          if (newFile != null) {
            newFile.notifyUploadCompletion();
            out.write(uuid);
          }
        }
 catch (        IOException ex) {
          logger.log(Level.WARNING,"Could not upload file",ex);
        }
      }
    }
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,"Exception while processing request",t);
    UiAuthenticator.writeInternalServerError(response);
  }
}
