{
  try (final Tx tx=StructrApp.getInstance().tx()){
    if (!ServletFileUpload.isMultipartContent(request)) {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      response.getOutputStream().write("ERROR (400): Request does not contain multipart content.\n".getBytes("UTF-8"));
      return;
    }
    final SecurityContext securityContext=getConfig().getAuthenticator().initializeAndExamineRequest(request,response);
    if (securityContext.getUser(false) == null && Boolean.FALSE.equals(Boolean.parseBoolean(StructrApp.getConfigurationValue("UploadServlet.allowAnonymousUploads","false")))) {
      response.setStatus(HttpServletResponse.SC_FORBIDDEN);
      response.getOutputStream().write("ERROR (403): Anonymous uploads forbidden.\n".getBytes("UTF-8"));
      return;
    }
    securityContext.setAccessMode(AccessMode.Frontend);
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    if (response.getStatus() == 302) {
      return;
    }
    uploader.setFileSizeMax(MAX_FILE_SIZE);
    uploader.setSizeMax(MAX_REQUEST_SIZE);
    response.setContentType("text/html");
    final PrintWriter out=response.getWriter();
    List<FileItem> fileItemsList=uploader.parseRequest(request);
    Iterator<FileItem> fileItemsIterator=fileItemsList.iterator();
    while (fileItemsIterator.hasNext()) {
      final FileItem fileItem=fileItemsIterator.next();
      try {
        final String contentType=fileItem.getContentType();
        boolean isImage=(contentType != null && contentType.startsWith("image"));
        boolean isVideo=(contentType != null && contentType.startsWith("video"));
        final Class type=isImage ? Image.class : isVideo ? VideoFile.class : org.structr.dynamic.File.class;
        final String name=fileItem.getName().replaceAll("\\\\","/");
        final org.structr.dynamic.File newFile=FileHelper.createFile(securityContext,IOUtils.toByteArray(fileItem.getInputStream()),contentType,type);
        newFile.setProperty(AbstractNode.name,PathHelper.getName(name));
        newFile.setProperty(AbstractNode.visibleToPublicUsers,true);
        newFile.setProperty(AbstractNode.visibleToAuthenticatedUsers,true);
        out.write(newFile.getUuid());
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,"Could not upload file",ex);
      }
    }
    tx.success();
  }
 catch (  FrameworkException|IOException|FileUploadException t) {
    t.printStackTrace();
    logger.log(Level.SEVERE,"Exception while processing request",t);
    UiAuthenticator.writeInternalServerError(response);
  }
}
