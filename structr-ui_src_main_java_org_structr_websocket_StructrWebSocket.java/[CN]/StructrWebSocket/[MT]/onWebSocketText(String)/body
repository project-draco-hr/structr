{
  if (data == null) {
    logger.log(Level.WARNING,"Empty text message received.");
    return;
  }
  logger.log(Level.FINE,"############################################################ RECEIVED \n{0}",data.substring(0,Math.min(data.length(),1000)));
  final WebSocketMessage webSocketData=gson.fromJson(data,WebSocketMessage.class);
  final App app=StructrApp.getInstance(securityContext);
  final String command=webSocketData.getCommand();
  final Class type=commandSet.get(command);
  final String sessionIdFromMessage=webSocketData.getSessionId();
  if (type != null) {
    try (final Tx tx=app.tx()){
      if (sessionIdFromMessage != null) {
        authenticate(sessionIdFromMessage);
      }
      if (!isAuthenticated() && !type.equals(LoginCommand.class)) {
        send(MessageBuilder.status().code(401).message("").build(),true);
        return;
      }
      tx.success();
    }
 catch (    FrameworkException t) {
      logger.log(Level.WARNING,"Unable to parse message.",t);
    }
    try {
      AbstractCommand abstractCommand=(AbstractCommand)type.newInstance();
      abstractCommand.setWebSocket(this);
      abstractCommand.setSession(session);
      abstractCommand.setCallback(webSocketData.getCallback());
      if (abstractCommand.requiresEnclosingTransaction()) {
        try (final Tx tx=app.tx()){
          webSocketData.setSessionValid(isAuthenticated());
          abstractCommand.processMessage(webSocketData);
          tx.success();
        }
       }
 else {
        try (final Tx tx=app.tx()){
          webSocketData.setSessionValid(isAuthenticated());
          tx.success();
        }
         abstractCommand.processMessage(webSocketData);
      }
    }
 catch (    FrameworkException|InstantiationException|IllegalAccessException t) {
      t.printStackTrace(System.out);
      try (final Tx tx=app.tx()){
        if (t instanceof FrameworkException) {
          send(MessageBuilder.status().message(t.toString()).jsonErrorObject(((FrameworkException)t).toJSON()).build(),true);
        }
 else {
          send(MessageBuilder.status().code(400).message(t.toString()).build(),true);
        }
        tx.success();
      }
 catch (      FrameworkException fex) {
        fex.printStackTrace();
      }
      return;
    }
  }
 else {
    logger.log(Level.WARNING,"Unknown command {0}",command);
    send(MessageBuilder.status().code(400).message("Unknown command").build(),true);
    return;
  }
}
