{
  Long transactionKeyValue=transactionCounter.incrementAndGet();
  long transactionKey=transactionKeyValue.longValue();
  if (!Services.isReady(NodeService.class)) {
    logger.log(Level.WARNING,"Node service is not ready yet.");
    return transactionKey;
  }
  SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  Map<Relationship,Map<String,Object>> removedRelProperties=new LinkedHashMap<Relationship,Map<String,Object>>();
  Map<org.neo4j.graphdb.Node,Map<String,Object>> removedNodeProperties=new LinkedHashMap<org.neo4j.graphdb.Node,Map<String,Object>>();
  RelationshipFactory relFactory=new RelationshipFactory(securityContext);
  NodeFactory nodeFactory=new NodeFactory(securityContext);
  commitStarts(securityContext,transactionKey);
  collectRemovedNodeProperties(securityContext,transactionKey,data,nodeFactory,removedNodeProperties);
  collectRemovedRelationshipProperties(securityContext,transactionKey,data,relFactory,removedRelProperties);
  callOnNodeCreation(securityContext,transactionKey,data,nodeFactory);
  callOnRelationshipCreation(securityContext,transactionKey,data,relFactory);
  callOnRelationshipDeletion(securityContext,transactionKey,data,relFactory,removedRelProperties);
  callOnNodeDeletion(securityContext,transactionKey,data,nodeFactory,removedNodeProperties);
  callNodePropertyModified(securityContext,transactionKey,data,nodeFactory);
  callRelationshipPropertyModified(securityContext,transactionKey,data,relFactory);
  commitFinishes(securityContext,transactionKey);
  return transactionKey;
}
