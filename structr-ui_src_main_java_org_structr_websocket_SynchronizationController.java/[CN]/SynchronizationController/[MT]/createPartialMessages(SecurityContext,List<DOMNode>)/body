{
  HttpServletRequest request=mock(HttpServletRequest.class);
  List<WebSocketMessage> partialMessages=new LinkedList<WebSocketMessage>();
  RenderContext ctx=new RenderContext(request,null,false,Locale.GERMAN);
  ctx.setResourceProvider(resourceProvider);
  Set<DOMNode> parents=new HashSet();
  for (  DOMNode el : elements) {
    DOMNode parent=(DOMNode)el.getParentNode();
    if (parent != null && !(parent instanceof Html)) {
      boolean ancestorAlreadyInSet=false;
      for (      Node ancestor : parent.getAncestors()) {
        if (parents.contains((DOMNode)ancestor)) {
          ancestorAlreadyInSet=true;
        }
      }
      if (!ancestorAlreadyInSet) {
        parents.add(parent);
      }
    }
  }
  for (  DOMNode parent : parents) {
    try {
      if (parent != null) {
        Page page=parent.getProperty(DOMNode.ownerDocument);
        if (page != null) {
          parent.render(securityContext,ctx,0);
          String partialContent=ctx.getBuffer().toString();
          WebSocketMessage message=new WebSocketMessage();
          message.setCommand("PARTIAL");
          message.setNodeData("pageId",page.getUuid());
          message.setNodeData("pagePath","/" + page.getName());
          message.setNodeData("parentPositionPath",parent.getPositionPath());
          message.setMessage(StringUtils.remove(partialContent,"\n"));
          partialMessages.add(message);
        }
      }
    }
 catch (    FrameworkException ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  return partialMessages;
}
