{
  messageStack=messageStackMap.get(transactionKey);
  AbstractRelationship relationship;
  if (graphObject instanceof AbstractRelationship) {
    relationship=(AbstractRelationship)graphObject;
    if (!ignoreRelationship(relationship)) {
      AbstractNode startNode=(AbstractNode)relationship.getStartNode();
      AbstractNode endNode=(AbstractNode)relationship.getEndNode();
      WebSocketMessage message=new WebSocketMessage();
      message.setResult(Arrays.asList(new GraphObject[]{endNode}));
      message.setId(endNode.getUuid());
      message.setNodeData("parentId",startNode.getUuid());
      org.w3c.dom.Node refNode=null;
      message.setCommand("APPEND_CHILD");
      if (endNode instanceof DOMNode) {
        refNode=((DOMNode)endNode).getNextSibling();
        if (refNode != null) {
          message.setCommand("INSERT_BEFORE");
          message.setNodeData("refId",((AbstractNode)refNode).getUuid());
        }
 else {
        }
      }
 else       if (endNode instanceof User) {
        message.setCommand("APPEND_USER");
        message.setNodeData("refId",startNode.getUuid());
      }
      messageStack.add(message);
      logger.log(Level.FINE,"Relationship created: {0}({1} -> {2}{3}",new Object[]{startNode.getId(),startNode.getProperty(AbstractNode.uuid),endNode.getProperty(AbstractNode.uuid)});
    }
  }
 else {
    WebSocketMessage message=new WebSocketMessage();
    message.setCommand("CREATE");
    message.setGraphObject(graphObject);
    List<GraphObject> list=new LinkedList<GraphObject>();
    list.add(graphObject);
    message.setResult(list);
    messageStack.add(message);
    logger.log(Level.FINE,"Node created: {0}",((AbstractNode)graphObject).getProperty(AbstractNode.uuid));
  }
  return true;
}
