{
  webSocketData.setSessionValid(true);
  String message;
  String pagePath=(String)webSocketData.getNodeData().get("pagePath");
  List<StructrWebSocket> clientsToRemove=new LinkedList<>();
  for (  StructrWebSocket socket : clients) {
    String clientPagePath=socket.getPagePath();
    if (clientPagePath != null && !clientPagePath.equals(URIUtil.encodePath(pagePath))) {
      continue;
    }
    Session session=socket.getSession();
    if (session != null && socket.isAuthenticated()) {
      List<? extends GraphObject> result=webSocketData.getResult();
      SecurityContext securityContext=socket.getSecurityContext();
      if ((!(webSocketData.getGraphObject() instanceof AbstractNode) && !socket.isPriviledgedUser(socket.getCurrentUser())) || (webSocketData.getGraphObject() instanceof AbstractNode && !securityContext.isVisible((AbstractNode)webSocketData.getGraphObject()))) {
        continue;
      }
      if ((result != null) && (result.size() > 0) && (webSocketData.getCommand().equals("UPDATE") || webSocketData.getCommand().equals("ADD") || webSocketData.getCommand().equals("CREATE"))) {
        WebSocketMessage clientData=webSocketData.copy();
        clientData.setResult(filter(securityContext,result));
        message=gson.toJson(clientData,WebSocketMessage.class);
      }
 else {
        message=gson.toJson(webSocketData,WebSocketMessage.class);
      }
      try {
        session.getRemote().sendString(message);
      }
 catch (      Throwable t) {
        if (t instanceof WebSocketException) {
          WebSocketException wse=(WebSocketException)t;
          if ("RemoteEndpoint unavailable, current state [CLOSED], expecting [OPEN or CONNECTED]".equals(wse.getMessage())) {
            clientsToRemove.add(socket);
          }
        }
        logger.log(Level.FINE,"Error sending message to client.",t);
      }
    }
  }
  for (  StructrWebSocket s : clientsToRemove) {
    unregisterClient(s);
    logger.log(Level.WARNING,"Client removed from broadcast list: {0}",s);
  }
}
