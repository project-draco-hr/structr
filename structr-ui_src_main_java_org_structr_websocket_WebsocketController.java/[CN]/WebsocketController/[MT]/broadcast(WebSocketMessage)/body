{
  webSocketData.setSessionValid(true);
  final String pagePath=(String)webSocketData.getNodeData().get("pagePath");
  final String encodedPath=URIUtil.encodePath(pagePath);
  final List<StructrWebSocket> clientsToRemove=new LinkedList<>();
  final List<? extends GraphObject> result=webSocketData.getResult();
  final String command=webSocketData.getCommand();
  final GraphObject obj=webSocketData.getGraphObject();
  String message;
  for (  StructrWebSocket socket : clients) {
    String clientPagePath=socket.getPagePath();
    if (clientPagePath != null && !clientPagePath.equals(encodedPath)) {
      continue;
    }
    Session session=socket.getSession();
    if (session != null && socket.isAuthenticated()) {
      final SecurityContext securityContext=socket.getSecurityContext();
      if (obj instanceof AbstractNode) {
        final AbstractNode node=(AbstractNode)obj;
        if (node.isHidden() || !securityContext.isVisible(node)) {
          continue;
        }
      }
 else {
        if (!socket.isPrivilegedUser(socket.getCurrentUser())) {
          continue;
        }
      }
      if (result != null && !result.isEmpty() && BroadcastCommands.contains(command)) {
        final WebSocketMessage clientData=webSocketData.copy();
        clientData.setResult(filter(securityContext,result));
        message=gson.toJson(clientData,WebSocketMessage.class);
      }
 else {
        message=gson.toJson(webSocketData,WebSocketMessage.class);
      }
      try {
        session.getRemote().sendString(message);
      }
 catch (      Throwable t) {
        if (t instanceof WebSocketException) {
          WebSocketException wse=(WebSocketException)t;
          if ("RemoteEndpoint unavailable, current state [CLOSED], expecting [OPEN or CONNECTED]".equals(wse.getMessage())) {
            clientsToRemove.add(socket);
          }
        }
        logger.debug("Error sending message to client.",t);
      }
    }
  }
  for (  StructrWebSocket s : clientsToRemove) {
    unregisterClient(s);
    logger.warn("Client removed from broadcast list: {}",s);
  }
}
