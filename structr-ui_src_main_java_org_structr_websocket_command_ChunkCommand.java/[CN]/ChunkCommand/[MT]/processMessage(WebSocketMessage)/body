{
  SecurityContext securityContext=getWebSocket().getSecurityContext();
  try {
    int sequenceNumber=Integer.parseInt((String)webSocketData.getNodeData().get("chunkId"));
    int chunkSize=Integer.parseInt((String)webSocketData.getNodeData().get("chunkSize"));
    Object rawData=webSocketData.getNodeData().get("chunk");
    String uuid=webSocketData.getId();
    byte[] data=null;
    if (rawData != null) {
      if (rawData instanceof String) {
        logger.log(Level.FINEST,"Raw data: {0}",rawData);
        data=Base64.decodeBase64(((String)rawData));
        logger.log(Level.FINEST,"Decoded data: {0}",data);
      }
    }
    File file=(File)getNode(uuid);
    if (!getWebSocket().getSecurityContext().isAllowed(file,Permission.write)) {
      logger.log(Level.WARNING,"No write permission for {0} on {1}",new Object[]{getWebSocket().getCurrentUser().toString(),file.toString()});
      getWebSocket().send(MessageBuilder.status().message("No write permission").code(400).build(),true);
      return;
    }
    long size=(long)(sequenceNumber * chunkSize) + data.length;
    file.setProperty(File.size,size);
    getWebSocket().handleFileChunk(uuid,sequenceNumber,chunkSize,data);
    file.setChecksum(0L);
    getWebSocket().send(MessageBuilder.status().code(200).message(size + " bytes of " + file.getName()+ " successfully saved.").build(),true);
  }
 catch (  Throwable t) {
    String msg=t.toString();
    getWebSocket().send(MessageBuilder.status().code(400).message("Could not process chunk data: ".concat((msg != null) ? msg : "")).build(),true);
  }
}
