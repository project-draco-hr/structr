{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  try {
    int sequenceNumber=((Long)webSocketData.getNodeData().get("chunkId")).intValue();
    int chunkSize=((Long)webSocketData.getNodeData().get("chunkSize")).intValue();
    Object rawData=webSocketData.getNodeData().get("chunk");
    int chunks=((Long)webSocketData.getNodeData().get("chunks")).intValue();
    String uuid=webSocketData.getId();
    byte[] data=null;
    if (rawData != null) {
      if (rawData instanceof String) {
        logger.log(Level.FINEST,"Raw data: {0}",rawData);
        data=Base64.decode(((String)rawData));
        logger.log(Level.FINEST,"Decoded data: {0}",data);
      }
    }
    final FileBase file=(FileBase)getNode(uuid);
    if (!file.isGranted(Permission.write,securityContext)) {
      logger.log(Level.WARNING,"No write permission for {0} on {1}",new Object[]{getWebSocket().getCurrentUser().toString(),file.toString()});
      getWebSocket().send(MessageBuilder.status().message("No write permission").code(400).build(),true);
      return;
    }
    getWebSocket().handleFileChunk(uuid,sequenceNumber,chunkSize,data,chunks);
    if (sequenceNumber + 1 == chunks) {
      final long checksum=FileHelper.getChecksum(file);
      final long size=FileHelper.getSize(file);
      file.unlockSystemPropertiesOnce();
      file.setProperty(FileBase.checksum,checksum);
      file.unlockSystemPropertiesOnce();
      file.setProperty(FileBase.size,size);
      file.increaseVersion();
      getWebSocket().removeFileUploadHandler(uuid);
      logger.log(Level.FINE,"File upload finished. Checksum: {0}, size: {1}",new Object[]{checksum,size});
    }
    final long currentSize=(long)(sequenceNumber * chunkSize) + data.length;
    getWebSocket().send(MessageBuilder.status().code(200).message("{\"id\":\"" + file.getUuid() + "\", \"name\":\""+ file.getName()+ "\",\"size\":"+ currentSize+ "}").build(),true);
  }
 catch (  IOException|FrameworkException ex) {
    String msg=ex.toString();
    getWebSocket().send(MessageBuilder.status().code(400).message("Could not process chunk data: ".concat((msg != null) ? msg : "")).build(),true);
  }
}
