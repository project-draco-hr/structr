{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final App app=StructrApp.getInstance(securityContext);
  String nodeId=webSocketData.getId();
  final AbstractNode nodeToClone=getNode(nodeId);
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  final String newName;
  if (nodeData.containsKey(AbstractNode.name.dbName())) {
    newName=(String)nodeData.get(AbstractNode.name.dbName());
  }
 else {
    newName="unknown";
  }
  if (nodeToClone != null) {
    try {
      app.beginTx();
      Page newPage=(Page)StructrApp.getInstance(securityContext).command(CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,Page.class.getSimpleName()),new NodeAttribute(AbstractNode.name,newName),new NodeAttribute(AbstractNode.visibleToAuthenticatedUsers,true));
      if (newPage != null) {
        String pageId=newPage.getProperty(GraphObject.id);
        Iterable<DOMChildren> relsOut=nodeToClone.getOutgoingRelationships(DOMChildren.class);
        Html htmlNode=null;
        for (        DOMChildren out : relsOut) {
          NodeInterface endNode=out.getTargetNode();
          if (endNode.getType().equals(Html.class.getSimpleName())) {
            htmlNode=(Html)endNode;
            break;
          }
        }
        if (htmlNode != null) {
          PropertyMap relProps=new PropertyMap();
          relProps.put(new LongProperty(pageId),0L);
          try {
            StructrApp.getInstance(securityContext).create((DOMNode)newPage,(DOMNode)htmlNode,DOMChildren.class,relProps);
          }
 catch (          Throwable t) {
            getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
          }
        }
      }
 else {
        getWebSocket().send(MessageBuilder.status().code(404).build(),true);
      }
      app.commitTx();
    }
 catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Could not create node.",fex);
      getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
    }
 finally {
      app.finishTx();
    }
  }
 else {
    logger.log(Level.WARNING,"Node with uuid {0} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
