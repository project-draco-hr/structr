{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final App app=StructrApp.getInstance(securityContext);
  Map<String,Object> nodeData=webSocketData.getNodeData();
  try {
    app.beginTx();
    final PropertyMap properties=PropertyMap.inputTypeToJavaType(securityContext,nodeData);
    Class type=EntityContext.getEntityClassForRawType(properties.get(AbstractNode.type));
    final NodeInterface newNode=app.create(type,properties);
    if (newNode instanceof File) {
      long size=(Long)webSocketData.getNodeData().get("size");
      String contentType=(String)webSocketData.getNodeData().get("contentType");
      String name=(String)webSocketData.getNodeData().get("name");
      File fileNode=(File)newNode;
      String uuid=newNode.getProperty(AbstractNode.uuid);
      fileNode.setRelativeFilePath(File.getDirectoryPath(uuid) + "/" + uuid);
      fileNode.setSize(size);
      fileNode.setContentType(contentType);
      fileNode.setProperty(AbstractNode.name,name);
      getWebSocket().createFileUploadHandler(fileNode);
    }
    app.commitTx();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Could not create node.",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
 finally {
    app.finishTx();
  }
}
