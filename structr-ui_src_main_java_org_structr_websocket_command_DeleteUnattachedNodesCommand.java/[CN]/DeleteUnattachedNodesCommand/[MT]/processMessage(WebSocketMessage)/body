{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  List<SearchAttribute> searchAttributes=new LinkedList();
  searchAttributes.add(Search.orExactTypeAndSubtypes(DOMElement.class));
  searchAttributes.add(Search.orExactType(Content.class));
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  PropertyKey sortProperty=EntityContext.getPropertyKeyForJSONName(DOMNode.class,sortKey);
  try {
    Result result=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(true,false,searchAttributes,sortProperty,"desc".equals(sortOrder));
    final List<AbstractNode> filteredResults=new LinkedList();
    List<? extends GraphObject> resultList=result.getResults();
    for (    GraphObject obj : resultList) {
      if (obj instanceof DOMNode) {
        DOMNode node=(DOMNode)obj;
        Page page=(Page)node.getProperty(DOMNode.ownerDocument);
        if (!node.hasIncomingRelationships(DOMChildren.class) && !(page instanceof ShadowDocument)) {
          filteredResults.add(node);
          filteredResults.addAll(DOMNode.getAllChildNodes(node));
        }
      }
    }
    final DeleteNodeCommand deleteNode=Services.command(securityContext,DeleteNodeCommand.class);
    try {
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          for (          NodeInterface node : filteredResults) {
            deleteNode.execute(node);
          }
          return null;
        }
      }
;
      Services.command(securityContext,TransactionCommand.class).execute(transaction);
    }
 catch (    Throwable t) {
      getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
    }
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
