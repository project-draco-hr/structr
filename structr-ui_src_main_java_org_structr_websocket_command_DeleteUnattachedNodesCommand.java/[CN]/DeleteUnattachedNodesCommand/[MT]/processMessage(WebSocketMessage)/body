{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final App app=StructrApp.getInstance(securityContext);
  List<SearchAttribute> searchAttributes=new LinkedList();
  searchAttributes.add(Search.orExactTypeAndSubtypes(DOMElement.class));
  searchAttributes.add(Search.orExactType(Content.class));
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(DOMNode.class,sortKey);
  try {
    Result result=(Result)StructrApp.getInstance(securityContext).command(SearchNodeCommand.class).execute(true,false,searchAttributes,sortProperty,"desc".equals(sortOrder));
    final List<AbstractNode> filteredResults=new LinkedList();
    List<? extends GraphObject> resultList=result.getResults();
    for (    GraphObject obj : resultList) {
      if (obj instanceof DOMNode) {
        DOMNode node=(DOMNode)obj;
        Page page=(Page)node.getProperty(DOMNode.ownerDocument);
        if (!node.hasIncomingRelationships(DOMChildren.class) && !(page instanceof ShadowDocument)) {
          filteredResults.add(node);
          filteredResults.addAll(DOMNode.getAllChildNodes(node));
        }
      }
    }
    try {
      app.beginTx();
      for (      NodeInterface node : filteredResults) {
        app.delete(node);
      }
      app.commitTx();
    }
  finally {
      app.finishTx();
    }
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
