{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String rawType=(String)webSocketData.getNodeData().get("type");
  Class type=EntityContext.getEntityClassForRawType(rawType);
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  if (type == null) {
    getWebSocket().send(MessageBuilder.status().code(404).message("Type " + rawType + " not found").build(),true);
    return;
  }
  searchAttributes.add(Search.andExactType(type));
  if (type.equals(Image.class)) {
    searchAttributes.add(Search.andExactProperty(securityContext,Image.isThumbnail,false));
  }
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  PropertyKey sortProperty=EntityContext.getPropertyKeyForJSONName(type,sortKey);
  try {
    Result result=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(true,false,searchAttributes,sortProperty,"desc".equals(sortOrder));
    int resultCountBeforePaging=result.size();
    webSocketData.setResult(PagingHelper.subList(result.getResults(),pageSize,page,null));
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
