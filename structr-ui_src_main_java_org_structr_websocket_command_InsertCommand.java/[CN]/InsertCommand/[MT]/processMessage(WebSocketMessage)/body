{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Map<String,Object> properties=webSocketData.getNodeData();
  String parentId=(String)properties.get("id");
  final Map<String,Object> relData=webSocketData.getRelData();
  if (parentId != null) {
    AbstractNode parentNode=getNode(parentId);
    AbstractNode nodeToInsert=null;
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        PropertyMap nodeProperties=PropertyMap.inputTypeToJavaType(securityContext,properties);
        return Services.command(securityContext,CreateNodeCommand.class).execute(nodeProperties);
      }
    }
;
    try {
      nodeToInsert=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
    }
 catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Could not create node.",fex);
      getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
    }
    if ((nodeToInsert != null) && (parentNode != null)) {
      try {
        PropertyMap relProperties=PropertyMap.inputTypeToJavaType(securityContext,relData);
        HtmlElement.children.createRelationship(securityContext,parentNode,nodeToInsert,relProperties);
      }
 catch (      Throwable t) {
        getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Insertion of new node failed.").build(),true);
  }
}
