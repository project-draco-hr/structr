{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  final String rawType=(String)nodeData.get("type");
  final String properties=(String)webSocketData.getNodeData().get("properties");
  final boolean rootOnly=Boolean.TRUE.equals((Boolean)nodeData.get("rootOnly"));
  Class type=SchemaHelper.getEntityClassForRawType(rawType);
  if (type == null) {
    getWebSocket().send(MessageBuilder.status().code(404).message("Type " + rawType + " not found").build(),true);
    return;
  }
  if (properties != null) {
    securityContext.setCustomView(StringUtils.split(properties,","));
  }
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  final PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(type,sortKey);
  final Query query=StructrApp.getInstance(securityContext).nodeQuery(type).sort(sortProperty).order("desc".equals(sortOrder)).page(page).pageSize(pageSize);
  if (FileBase.class.isAssignableFrom(type)) {
    if (rootOnly) {
      query.and(FileBase.hasParent,false);
    }
    query.not().and(Image.isThumbnail,true);
  }
  if (Folder.class.isAssignableFrom(type) && rootOnly) {
    query.and(Folder.hasParent,false);
  }
  try {
    final Result result=query.getResult();
    int resultCountBeforePaging=result.getRawResultCount();
    webSocketData.setResult(result.getResults());
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    logger.warn("Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
