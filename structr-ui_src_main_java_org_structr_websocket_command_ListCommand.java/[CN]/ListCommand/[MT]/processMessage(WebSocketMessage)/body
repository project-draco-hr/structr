{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Map<String,Object> properties=webSocketData.getNodeData();
  final String rawType=(String)properties.get("type");
  final boolean rootOnly=Boolean.TRUE.equals((Boolean)properties.get("rootOnly"));
  Class type=SchemaHelper.getEntityClassForRawType(rawType);
  if (type == null) {
    getWebSocket().send(MessageBuilder.status().code(404).message("Type " + rawType + " not found").build(),true);
    return;
  }
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  final PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(type,sortKey);
  final Query query=StructrApp.getInstance(securityContext).nodeQuery(type).includeDeletedAndHidden().sort(sortProperty).order("desc".equals(sortOrder));
  if (type.equals(Image.class)) {
    query.and(Image.isThumbnail,false);
  }
  try {
    List<AbstractNode> filteredResults=new LinkedList<>();
    List<? extends GraphObject> resultList=query.getAsList();
    for (    GraphObject obj : resultList) {
      if (obj instanceof AbstractNode) {
        AbstractNode node=(AbstractNode)obj;
        boolean hasParent=false;
        if (rootOnly) {
          for (          AbstractRelationship rel : node.getIncomingRelationships()) {
            if ("CONTAINS".equals(rel.getType())) {
              hasParent=true;
              break;
            }
          }
        }
        if (!rootOnly || !hasParent) {
          filteredResults.add(node);
        }
      }
    }
    int resultCountBeforePaging=filteredResults.size();
    webSocketData.setResult(PagingHelper.subList(filteredResults,pageSize,page,null));
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
