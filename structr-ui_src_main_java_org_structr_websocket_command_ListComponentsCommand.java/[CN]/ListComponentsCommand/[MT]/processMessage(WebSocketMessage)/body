{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  try {
    Result result=StructrApp.getInstance(securityContext).nodeQuery(ShadowDocument.class).includeDeletedAndHidden().getResult();
    List<AbstractNode> filteredResults=new LinkedList();
    List<AbstractNode> resultList=result.getResults();
    if (result.isEmpty()) {
      logger.log(Level.WARNING,"No shadow document found, creating one.");
      resultList.add(CreateComponentCommand.getOrCreateHiddenDocument());
    }
    ShadowDocument doc=(ShadowDocument)resultList.get(0);
    resultList.addAll(doc.getProperty(Page.elements));
    for (    GraphObject obj : resultList) {
      if (obj instanceof DOMNode) {
        DOMNode node=(DOMNode)obj;
        if (!doc.equals(node) && !node.hasIncomingRelationships(DOMChildren.class)) {
          filteredResults.add(node);
        }
      }
    }
    Collections.sort(filteredResults,new Comparator<AbstractNode>(){
      @Override public int compare(      AbstractNode node1,      AbstractNode node2){
        final String nameNode1=node1.getProperty(AbstractNode.name);
        final String nameNode2=node2.getProperty(AbstractNode.name);
        if (nameNode1 != null && nameNode2 != null) {
          return nameNode1.compareTo(nameNode2);
        }
 else         if (nameNode1 == null && nameNode2 == null) {
          return 0;
        }
 else         if (nameNode1 == null) {
          return -1;
        }
 else {
          return 1;
        }
      }
    }
);
    int resultCountBeforePaging=filteredResults.size();
    webSocketData.setResult(PagingHelper.subList(filteredResults,pageSize,page,null));
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
