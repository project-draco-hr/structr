{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final String rawType=(String)webSocketData.getNodeData().get("type");
  final Class type=SchemaHelper.getEntityClassForRawType(rawType);
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  final PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(type,sortKey);
  final Query query=StructrApp.getInstance(securityContext).nodeQuery(type).includeDeletedAndHidden().sort(sortProperty).order("desc".equals(sortOrder));
  if (type.equals(Image.class)) {
    query.and(Image.isThumbnail,false);
  }
  try {
    List<AbstractNode> filteredResults=new LinkedList();
    List<? extends GraphObject> resultList=query.getAsList();
    for (    GraphObject obj : resultList) {
      if (obj instanceof AbstractNode) {
        AbstractNode node=(AbstractNode)obj;
        if (!node.hasIncomingRelationships(FileChildren.class)) {
          filteredResults.add(node);
        }
      }
    }
    int resultCountBeforePaging=filteredResults.size();
    webSocketData.setResult(PagingHelper.subList(filteredResults,pageSize,page,null));
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    logger.warn("",fex);
  }
}
