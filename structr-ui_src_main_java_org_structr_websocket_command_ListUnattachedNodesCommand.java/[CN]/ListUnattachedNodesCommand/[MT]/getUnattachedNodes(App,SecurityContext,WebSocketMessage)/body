{
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(DOMNode.class,sortKey);
  final Query query=StructrApp.getInstance(securityContext).nodeQuery().includeDeletedAndHidden().sort(sortProperty).order("desc".equals(sortOrder));
  query.orTypes(DOMElement.class);
  query.orType(Content.class);
  query.orType(Template.class);
  List<AbstractNode> filteredResults=new LinkedList();
  List<? extends GraphObject> resultList=null;
  try (final Tx tx=app.tx()){
    resultList=query.getAsList();
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Exception occured",fex);
  }
  for (  GraphObject obj : resultList) {
    if (obj instanceof AbstractNode) {
      AbstractNode node=(AbstractNode)obj;
      if (!node.hasIncomingRelationships(DOMChildren.class) && node.getProperty(DOMNode.ownerDocument) == null && !(node instanceof ShadowDocument)) {
        filteredResults.add(node);
      }
    }
  }
  return filteredResults;
}
