{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  final PropertyKey sortProperty=StructrApp.getConfiguration().getPropertyKeyForJSONName(DOMNode.class,sortKey);
  final Query query=StructrApp.getInstance(securityContext).nodeQuery().includeDeletedAndHidden().sort(sortProperty).order("desc".equals(sortOrder));
  query.orTypes(DOMElement.class);
  query.orType(Content.class);
  query.orType(Template.class);
  final App app=StructrApp.getInstance(securityContext);
  try (final Tx tx=app.tx()){
    List<AbstractNode> filteredResults=getUnattachedNodes(app,securityContext,webSocketData);
    int resultCountBeforePaging=filteredResults.size();
    webSocketData.setResult(PagingHelper.subList(filteredResults,pageSize,page,null));
    webSocketData.setRawResultCount(resultCountBeforePaging);
    getWebSocket().send(webSocketData,true);
    tx.success();
  }
 catch (  FrameworkException fex) {
    logger.warn("Exception occured",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
