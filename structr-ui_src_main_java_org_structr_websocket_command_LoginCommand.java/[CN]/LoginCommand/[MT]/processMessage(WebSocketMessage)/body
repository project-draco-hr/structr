{
  final String username=(String)webSocketData.getNodeData().get("username");
  final String password=(String)webSocketData.getNodeData().get("password");
  Principal user;
  if ((username != null) && (password != null)) {
    try {
      StructrWebSocket socket=this.getWebSocket();
      Authenticator auth=socket.getAuthenticator();
      user=auth.doLogin(socket.getRequest(),username,password);
      if (user != null) {
        final String sessionId=webSocketData.getSessionId();
        if (sessionId == null) {
          logger.info("Could not login {}: No sessionId found",new Object[]{username,password});
          getWebSocket().send(MessageBuilder.status().code(403).build(),true);
        }
        Actions.call(Actions.NOTIFICATION_LOGIN,user);
        SessionHelper.clearSession(sessionId);
        user.addSessionId(sessionId);
        webSocketData.getNodeData().clear();
        webSocketData.setSessionId(sessionId);
        webSocketData.getNodeData().put("username",user.getProperty(AbstractNode.name));
        socket.setAuthenticated(sessionId,user);
        socket.send(webSocketData,false);
      }
    }
 catch (    AuthenticationException e) {
      logger.info("Could not login {} with {}",new Object[]{username,password});
      getWebSocket().send(MessageBuilder.status().code(403).build(),true);
    }
catch (    FrameworkException fex) {
      logger.warn("Unable to execute command",fex);
    }
  }
}
