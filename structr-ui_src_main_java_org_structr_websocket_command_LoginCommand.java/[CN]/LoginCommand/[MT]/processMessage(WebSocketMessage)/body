{
  final SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  final String username=(String)webSocketData.getNodeData().get("username");
  final String password=(String)webSocketData.getNodeData().get("password");
  final App app=StructrApp.getInstance(securityContext);
  Principal user=null;
  if ((username != null) && (password != null)) {
    try {
      StructrWebSocket socket=this.getWebSocket();
      Authenticator auth=(Authenticator)StructrApp.getInstance(securityContext).command(AuthenticatorCommand.class).execute(socket.getConfig());
      user=auth.doLogin(socket.getRequest(),username,password);
      if (user != null) {
        final String sessionId=webSocketData.getSessionId();
        if (sessionId == null) {
          logger.log(Level.INFO,"Could not login {0}: No sessionId found",new Object[]{username,password});
          getWebSocket().send(MessageBuilder.status().code(403).build(),true);
        }
        final Principal principal=user;
        try {
          app.beginTx();
          principal.setProperty(Principal.sessionId,sessionId);
          app.commitTx();
        }
  finally {
          app.finishTx();
        }
        webSocketData.getNodeData().clear();
        webSocketData.setToken(sessionId);
        webSocketData.getNodeData().put("username",user.getProperty(AbstractNode.name));
        this.getWebSocket().setAuthenticated(sessionId,user);
        this.getWebSocket().send(webSocketData,false);
      }
    }
 catch (    AuthenticationException e) {
      logger.log(Level.INFO,"Could not login {0} with {1}",new Object[]{username,password});
      getWebSocket().send(MessageBuilder.status().code(403).build(),true);
    }
catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Unable to execute command",fex);
    }
  }
}
