{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String id=webSocketData.getId();
  String key=(String)webSocketData.getNodeData().get("key");
  if (id != null) {
    final AbstractNode node=getNode(id);
    if (node != null) {
      if (node instanceof DOMNode) {
        DOMNode domNode=(DOMNode)node;
        domNode.getParentNode().removeChild(domNode);
      }
 else {
        DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
        Iterable<AbstractRelationship> rels=node.getIncomingRelationships(RelType.CONTAINS);
        for (        AbstractRelationship rel : rels) {
          try {
            deleteRel.execute(rel);
          }
 catch (          FrameworkException ex) {
            logger.log(Level.SEVERE,"Could not remove relationship " + rel,ex);
          }
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("RemoveCommand called with empty id").build(),true);
  }
}
