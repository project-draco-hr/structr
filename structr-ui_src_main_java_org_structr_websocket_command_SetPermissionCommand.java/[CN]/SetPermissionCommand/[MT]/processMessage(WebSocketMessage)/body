{
  AbstractNode obj=getNode(webSocketData.getId());
  boolean rec=(Boolean)webSocketData.getNodeData().get("recursive");
  String principalId=(String)webSocketData.getNodeData().get("principalId");
  String permission=(String)webSocketData.getNodeData().get("permission");
  String action=(String)webSocketData.getNodeData().get("action");
  if (principalId == null) {
    logger.error("This command needs a principalId");
    getWebSocket().send(MessageBuilder.status().code(400).build(),true);
  }
  Principal principal=(Principal)getNode(principalId);
  if (principal == null) {
    logger.error("No principal found with id {}",new Object[]{principalId});
    getWebSocket().send(MessageBuilder.status().code(400).build(),true);
  }
  webSocketData.getNodeData().remove("recursive");
  if (obj != null) {
    final App app=StructrApp.getInstance(getWebSocket().getSecurityContext());
    try (final Tx tx=app.tx()){
      if (!((AbstractNode)obj).isGranted(Permission.accessControl,getWebSocket().getSecurityContext())) {
        logger.warn("No access control permission for {} on {}",new Object[]{getWebSocket().getCurrentUser().toString(),obj.toString()});
        getWebSocket().send(MessageBuilder.status().message("No access control permission").code(400).build(),true);
        tx.success();
        return;
      }
      tx.success();
    }
 catch (    FrameworkException ex) {
      logger.warn("",ex);
    }
    try {
      setPermission(app,obj,principal,action,Permissions.valueOf(permission),rec);
      tx.success();
      tx.close();
      tx=null;
      webSocketData.setResult(Arrays.asList(principal));
      getWebSocket().send(webSocketData,true);
    }
 catch (    FrameworkException ex) {
      logger.error("Unable to set permissions: {}",((FrameworkException)ex).toString());
      getWebSocket().send(MessageBuilder.status().code(400).build(),true);
    }
  }
 else {
    logger.warn("Graph object with uuid {} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
