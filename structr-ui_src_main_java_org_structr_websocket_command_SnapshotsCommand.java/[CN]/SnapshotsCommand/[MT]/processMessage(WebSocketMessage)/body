{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final App app=StructrApp.getInstance(securityContext);
  final Map<String,Object> data=webSocketData.getNodeData();
  final String mode=(String)data.get("mode");
  final String name=(String)data.get("name");
  final String typesString=(String)data.get("types");
  final List<String> types;
  if (typesString != null) {
    types=Arrays.asList(StringUtils.split(typesString,","));
  }
 else {
    types=null;
  }
  if (mode != null) {
    final List<GraphObject> result=new LinkedList<>();
switch (mode) {
case "list":
      final List<String> snapshots=SnapshotCommand.listSnapshots();
    if (snapshots != null) {
      final GraphObjectMap snapshotContainer=new GraphObjectMap();
      snapshotContainer.put(snapshotsProperty,snapshots);
      result.add(snapshotContainer);
    }
  break;
case "get":
final Path snapshotFile=Paths.get(SnapshotCommand.getBasePath() + name);
if (Files.exists(snapshotFile)) {
try {
  final String content=new String(Files.readAllBytes(snapshotFile));
  getWebSocket().send(MessageBuilder.finished().callback(callback).data("schemaJson",content).build(),true);
  return;
}
 catch (IOException ex) {
  LoggerFactory.getLogger(SnapshotsCommand.class.getName()).error("",ex);
}
}
break;
default :
final GraphObjectMap msg=new GraphObjectMap();
result.add(msg);
try {
app.command(SnapshotCommand.class).execute(mode,name,types);
msg.put(statusProperty,"success");
}
 catch (Throwable t) {
logger.warn("",t);
msg.put(statusProperty,t.getMessage());
}
}
webSocketData.setResult(result);
webSocketData.setRawResultCount(1);
getWebSocket().send(webSocketData,true);
}
 else {
getWebSocket().send(MessageBuilder.status().code(422).message("Mode must be one of list, export, add or restore.").build(),true);
}
}
