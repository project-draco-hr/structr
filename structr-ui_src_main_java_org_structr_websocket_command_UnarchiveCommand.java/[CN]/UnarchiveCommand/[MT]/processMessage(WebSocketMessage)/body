{
  final Set<String> supportedByArchiveStreamFactory=new HashSet<>(Arrays.asList(new String[]{ArchiveStreamFactory.AR,ArchiveStreamFactory.ARJ,ArchiveStreamFactory.CPIO,ArchiveStreamFactory.DUMP,ArchiveStreamFactory.JAR,ArchiveStreamFactory.TAR,ArchiveStreamFactory.ZIP}));
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final App app=StructrApp.getInstance(securityContext);
  try {
    final String id=(String)webSocketData.getId();
    final String parentFolderId=(String)webSocketData.getNodeData().get("parentFolderId");
    final FileBase file;
    try (final Tx tx=app.tx()){
      file=app.get(FileBase.class,id);
      if (file == null) {
        getWebSocket().send(MessageBuilder.status().code(400).message("File not found: ".concat(id)).build(),true);
        return;
      }
      final String fileExtension=StringUtils.substringAfterLast(file.getName(),".");
      if (!supportedByArchiveStreamFactory.contains(fileExtension)) {
        getWebSocket().send(MessageBuilder.status().code(400).message("Unsupported archive format: ".concat(fileExtension)).build(),true);
        return;
      }
      tx.success();
    }
     unarchive(securityContext,file,parentFolderId);
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"",t);
    String msg=t.toString();
    try (final Tx tx=app.tx()){
      getWebSocket().send(MessageBuilder.status().code(400).message("Could not unarchive file: ".concat((msg != null) ? msg : "")).build(),true);
      tx.success();
    }
 catch (    FrameworkException ignore) {
    }
  }
}
