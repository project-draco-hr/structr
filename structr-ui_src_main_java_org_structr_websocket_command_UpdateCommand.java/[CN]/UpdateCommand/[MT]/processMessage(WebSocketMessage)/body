{
  final App app=StructrApp.getInstance(getWebSocket().getSecurityContext());
  final Boolean recValue=(Boolean)webSocketData.getNodeData().get("recursive");
  final boolean rec=recValue != null ? recValue : false;
  GraphObject obj=getNode(webSocketData.getId());
  webSocketData.getNodeData().remove("recursive");
  if (obj != null) {
    try (final Tx tx=app.tx()){
      final AbstractNode node=(AbstractNode)obj;
      if (!node.isGranted(Permission.write,getWebSocket().getSecurityContext())) {
        getWebSocket().send(MessageBuilder.status().message("No write permission").code(400).build(),true);
        logger.log(Level.WARNING,"No write permission for {0} on {1}",new Object[]{getWebSocket().getCurrentUser().toString(),obj.toString()});
        tx.success();
        return;
      }
      tx.success();
    }
   }
  if (obj == null) {
    obj=getRelationship(webSocketData.getId());
  }
  if (obj != null) {
    final Set<GraphObject> entities=new LinkedHashSet<>();
    try (final Tx tx=app.tx()){
      collectEntities(entities,obj,null,rec);
      tx.success();
    }
     final PropertyMap properties=PropertyMap.inputTypeToJavaType(this.getWebSocket().getSecurityContext(),obj.getClass(),webSocketData.getNodeData());
    final Iterator<GraphObject> iterator=entities.iterator();
    while (iterator.hasNext()) {
      count=0;
      try (final Tx tx=app.tx()){
        while (iterator.hasNext() && count++ < 100) {
          setProperties(app,iterator.next(),properties,true);
        }
        tx.success();
      }
     }
  }
 else {
    logger.log(Level.WARNING,"Graph object with uuid {0} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
