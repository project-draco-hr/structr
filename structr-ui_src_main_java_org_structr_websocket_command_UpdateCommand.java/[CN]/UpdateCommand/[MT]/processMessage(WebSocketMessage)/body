{
  GraphObject obj=getNode(webSocketData.getId());
  Boolean recValue=(Boolean)webSocketData.getNodeData().get("recursive");
  boolean rec=recValue != null ? recValue : false;
  webSocketData.getNodeData().remove("recursive");
  if (obj != null) {
    if (!getWebSocket().getSecurityContext().isAllowed(((AbstractNode)obj),Permission.write)) {
      logger.log(Level.WARNING,"No write permission for {0} on {1}",new Object[]{getWebSocket().getCurrentUser().toString(),obj.toString()});
      getWebSocket().send(MessageBuilder.status().message("No write permission").code(400).build(),true);
      return;
    }
  }
  if (obj == null) {
    obj=getRelationship(webSocketData.getId());
  }
  if (obj != null) {
    final App app=StructrApp.getInstance(getWebSocket().getSecurityContext());
    try {
      app.beginTx();
      setProperties(obj,PropertyMap.inputTypeToJavaType(this.getWebSocket().getSecurityContext(),obj.getClass(),webSocketData.getNodeData()),rec);
      app.commitTx();
    }
 catch (    FrameworkException ex) {
      logger.log(Level.SEVERE,"Unable to set properties: {0}",((FrameworkException)ex).toString());
      getWebSocket().send(MessageBuilder.status().code(400).build(),true);
    }
 finally {
      app.finishTx();
    }
  }
 else {
    logger.log(Level.WARNING,"Graph object with uuid {0} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
