{
  final App app=StructrApp.getInstance(getWebSocket().getSecurityContext());
  final Boolean recValue=(Boolean)webSocketData.getNodeData().get("recursive");
  final boolean rec=recValue != null ? recValue : false;
  final GraphObject obj=getGraphObject(webSocketData.getId());
  if (obj == null) {
    logger.warn("Graph object with uuid {} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
  webSocketData.getNodeData().remove("recursive");
  try (final Tx tx=app.tx()){
    if (obj instanceof AbstractNode) {
      final AbstractNode node=(AbstractNode)obj;
      if (!node.isGranted(Permission.write,getWebSocket().getSecurityContext())) {
        getWebSocket().send(MessageBuilder.status().message("No write permission").code(400).build(),true);
        logger.warn("No write permission for {} on {}",new Object[]{getWebSocket().getCurrentUser().toString(),obj.toString()});
        tx.success();
        return;
      }
      tx.success();
    }
  }
   final Set<GraphObject> entities=new LinkedHashSet<>();
  PropertyMap properties=null;
  try (final Tx tx=app.tx()){
    collectEntities(entities,obj,null,rec);
    properties=PropertyMap.inputTypeToJavaType(this.getWebSocket().getSecurityContext(),obj.getClass(),webSocketData.getNodeData());
    tx.success();
  }
   final Iterator<GraphObject> iterator=entities.iterator();
  while (iterator.hasNext()) {
    count=0;
    try (final Tx tx=app.tx()){
      while (iterator.hasNext() && count++ < 100) {
        setProperties(iterator.next(),properties,true);
      }
      tx.success();
    }
   }
}
