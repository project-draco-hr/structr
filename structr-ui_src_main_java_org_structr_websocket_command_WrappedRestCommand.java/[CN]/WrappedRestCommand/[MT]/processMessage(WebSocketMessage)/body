{
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  final String url=(String)nodeData.get("url");
  final String method=(String)nodeData.get("method");
  final String data=(String)nodeData.get("data");
  final Gson gson=new GsonBuilder().create();
  final Map<String,Object> jsonData=gson.fromJson(data,Map.class);
  final StructrWebSocket socket=this.getWebSocket();
  if (method == null || !(method.equals("POST") || method.equals("PUT"))) {
    logger.log(Level.WARNING,"Method not supported: {0}",method);
    getWebSocket().send(MessageBuilder.wrappedRest().code(422).message("Method not supported: " + method).build(),true);
    return;
  }
  ResourceProvider resourceProvider;
  try {
    resourceProvider=UiResourceProvider.class.newInstance();
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,"Couldn't establish a resource provider",t);
    getWebSocket().send(MessageBuilder.wrappedRest().code(422).message("Couldn't establish a resource provider").build(),true);
    return;
  }
  final Map<Pattern,Class<? extends Resource>> resourceMap=new LinkedHashMap<>();
  resourceMap.putAll(resourceProvider.getResources());
  final HttpServletRequest wrappedRequest=new HttpServletRequestWrapper(socket.getRequest()){
    @Override public Enumeration<String> getParameterNames(){
      return new IteratorEnumeration(getParameterMap().keySet().iterator());
    }
    @Override public String getParameter(    String key){
      String[] p=getParameterMap().get(key);
      return p != null ? p[0] : null;
    }
    @Override public Map<String,String[]> getParameterMap(){
      String[] parts=StringUtils.split(getQueryString(),"&");
      Map<String,String[]> parameterMap=new HashMap();
      for (      String p : parts) {
        String[] kv=StringUtils.split(p,"=");
        if (kv.length > 1) {
          parameterMap.put(kv[0],new String[]{kv[1]});
        }
      }
      return parameterMap;
    }
    @Override public String getQueryString(){
      return StringUtils.substringAfter(url,"?");
    }
    @Override public String getPathInfo(){
      return StringUtils.substringBefore(url,"?");
    }
    @Override public StringBuffer getRequestURL(){
      return new StringBuffer(url);
    }
  }
;
  Resource resource;
  final StaticValue fakePropertyView=new StaticValue(PropertyView.Public);
  try {
    resource=ResourceHelper.applyViewTransformation(wrappedRequest,socket.getSecurityContext(),ResourceHelper.optimizeNestedResourceChain(ResourceHelper.parsePath(socket.getSecurityContext(),wrappedRequest,resourceMap,fakePropertyView)),fakePropertyView);
  }
 catch (  IllegalPathException|NotFoundException e) {
    logger.log(Level.WARNING,"Illegal path for REST query");
    getWebSocket().send(MessageBuilder.wrappedRest().code(422).message("Illegal path for REST query").build(),true);
    return;
  }
  RestMethodResult result=null;
switch (method) {
case "PUT":
    result=resource.doPut(jsonData);
  break;
case "POST":
result=resource.doPost(jsonData);
break;
}
if (result != null) {
}
}
