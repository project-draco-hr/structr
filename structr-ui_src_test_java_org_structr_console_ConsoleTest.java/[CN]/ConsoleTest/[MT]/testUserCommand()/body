{
  final Console console=new Console(securityContext,Collections.emptyMap());
  Principal admin=null;
  try {
    assertEquals("Invalid console execution result","Mode set to 'AdminShell'. Type 'help' to get a list of commands.\r\n",console.runForTest("Console.setMode('" + ConsoleMode.AdminShell.name() + "')"));
    assertEquals("Invalid console execution result","\r\n",console.runForTest("user list"));
    assertEquals("Invalid console execution result","User created.\r\n",console.runForTest("user add tester tester@test.de"));
    assertEquals("Invalid console execution result","User created.\r\n",console.runForTest("user add admin admin@localhost isAdmin"));
    assertEquals("Invalid console execution result","User created.\r\n",console.runForTest("user add root isAdmin"));
    try (final Tx tx=app.tx()){
      final User user=app.nodeQuery(User.class).andName("tester").getFirst();
      assertNotNull("Invalid console execution result",user);
      assertEquals("Invalid console execution result","tester",user.getProperty(User.name));
      assertEquals("Invalid console execution result","tester@test.de",user.getProperty(User.eMail));
      assertEquals("Invalid console execution result",Boolean.FALSE,user.getProperty(User.isAdmin));
      tx.success();
    }
     assertEquals("Invalid console execution result","admin, root, tester\r\n",console.runForTest("user list"));
    assertEquals("Invalid console execution result","User deleted.\r\n",console.runForTest("user delete tester"));
    assertEquals("Invalid console execution result","admin, root\r\n",console.runForTest("user list"));
    try (final Tx tx=app.tx()){
      final User root=app.nodeQuery(User.class).andName("root").getFirst();
      assertNotNull("Invalid console execution result",root);
      assertEquals("Invalid console execution result","root",root.getProperty(User.name));
      assertEquals("Invalid console execution result",Boolean.TRUE,root.getProperty(User.isAdmin));
      tx.success();
    }
     try (final Tx tx=app.tx()){
      admin=app.nodeQuery(User.class).andName("admin").getFirst();
      assertNotNull("Invalid console execution result",admin);
      assertEquals("Invalid console execution result","admin",admin.getProperty(User.name));
      assertEquals("Invalid console execution result","admin@localhost",admin.getProperty(User.eMail));
      assertEquals("Invalid console execution result",Boolean.TRUE,admin.getProperty(User.isAdmin));
      final Folder folder=app.create(Folder.class,"folder");
      folder.setProperty(Folder.owner,admin);
      tx.success();
    }
     final String idHash=admin.getUuid().substring(7,11);
    assertEquals("Invalid console execution result","User 'admin' has owned nodes, please confirm deletion with 'user delete admin " + idHash + "'.\r\n",console.runForTest("user delete admin"));
    assertEquals("Invalid console execution result","User deleted.\r\n",console.runForTest("user delete admin " + idHash));
    assertEquals("Invalid console execution result","root\r\n",console.runForTest("user list"));
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception.");
  }
}
