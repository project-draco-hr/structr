{
  final String fileName=super.basePath + "/exportTest.zip";
  Page testPage=null;
  Head head=null;
  File textFile=null;
  File jsFile=null;
  try (final Tx tx=app.tx()){
    testPage=Page.createSimplePage(securityContext,"TestPage");
    head=app.nodeQuery(Head.class).getFirst();
    textFile=app.create(File.class,"testfile.txt");
    jsFile=app.create(File.class,"test.js");
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    textFile.setProperty(File.contentType,"text/plain");
    IOUtils.write("This is a test file",textFile.getOutputStream());
    jsFile.setProperty(File.contentType,"application/javascript");
    IOUtils.write("function test() {\n\tconsole.log('Test!');\n}",jsFile.getOutputStream());
    final Script script=(Script)testPage.createElement("script");
    script.setProperty(Script._src,"${link.name}?${link.version}");
    script.setProperty(Script.linkable,jsFile);
    head.appendChild(script);
    tx.success();
  }
 catch (  FrameworkException|IOException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    assertEquals("Database should contain 1 page",1,app.nodeQuery(Page.class).getAsList().size());
    assertEquals("Database should contain 10 DOM nodes",11,app.nodeQuery(DOMNode.class).getAsList().size());
    assertEquals("Database should contain 3 content nodes",3,app.nodeQuery(Content.class).getAsList().size());
    assertEquals("Database should contain 2 files",2,app.nodeQuery(FileBase.class).getAsList().size());
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  RestAssured.given().header("X-User","superadmin").header("X-Password","sehrgeheim").body("{ mode: export, file: '" + fileName + "' }").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(201)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(401)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(403)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(404)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().response().contentType("application/json").statusCode(200).when().post("/maintenance/syncUi");
  try {
    app.command(ClearDatabase.class).execute();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    assertEquals("Database should contain no pages",0,app.nodeQuery(Page.class).getAsList().size());
    assertEquals("Database should contain no DOM nodes",0,app.nodeQuery(DOMNode.class).getAsList().size());
    assertEquals("Database should contain no content nodes",0,app.nodeQuery(Content.class).getAsList().size());
    assertEquals("Database should contain no files",0,app.nodeQuery(FileBase.class).getAsList().size());
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  RestAssured.given().header("X-User","superadmin").header("X-Password","sehrgeheim").body("{ mode: import, file: '" + fileName + "' }").filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(201)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(400)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(401)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(403)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(404)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(422)).filter(ResponseLoggingFilter.logResponseIfStatusCodeIs(500)).expect().response().contentType("application/json").statusCode(200).when().post("/maintenance/syncUi");
  try (final Tx tx=app.tx()){
    assertEquals("Database should contain 1 page",1,app.nodeQuery(Page.class).getAsList().size());
    assertEquals("Database should contain 10 DOM nodes",11,app.nodeQuery(DOMNode.class).getAsList().size());
    assertEquals("Database should contain 3 content nodes",3,app.nodeQuery(Content.class).getAsList().size());
    assertEquals("Database should contain 1 file",1,app.nodeQuery(FileBase.class).getAsList().size());
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
}
