{
  final Map<String,Map<String,byte[]>> testMap=new LinkedHashMap<>();
  testMap.put("text/html",toMap(new Pair("test.html","<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Test</h1></body></html>".getBytes()),new Pair("test.htm","<!DOCTYPE html>".getBytes())));
  testMap.put("text/plain",toMap(new Pair("test.txt","Hello world!".getBytes())));
  testMap.put("text/css",toMap(new Pair("test.css","body { background-color: #ffffff; }".getBytes())));
  testMap.put("application/javascript",toMap(new Pair("test.js","function() { alert('Test'); }".getBytes())));
  testMap.put("application/zip",toMap(new Pair("test.zip","".getBytes())));
  testMap.put("image/jpeg",toMap(new Pair("test.jpg","".getBytes()),new Pair("test.jpeg","".getBytes())));
  testMap.put("image/png",toMap(new Pair("test.png","".getBytes())));
  try (final Tx tx=app.tx()){
    for (    final Entry<String,Map<String,byte[]>> entry : testMap.entrySet()) {
      final String mimeType=entry.getKey();
      for (      final Entry<String,byte[]> fileEntry : entry.getValue().entrySet()) {
        final String fileName=fileEntry.getKey();
        final byte[] content=fileEntry.getValue();
        try {
          final FileBase file=FileHelper.createFile(securityContext,content,null,File.class,fileName);
          assertEquals("MIME type detection failed",mimeType,file.getContentType());
        }
 catch (        IOException ioex) {
          logger.log(Level.WARNING,"",ioex);
          fail("Unexpected exception");
        }
      }
    }
    tx.success();
  }
 catch (  FrameworkException fex) {
    fail("Unexpected exception");
  }
}
