{
  NodeInterface project=null;
  NodeInterface task1=null;
  NodeInterface task2=null;
  NodeInterface task3=null;
  try (final Tx tx=app.tx()){
    final SchemaNode projectNode=app.create(SchemaNode.class,new NodeAttribute(SchemaNode.name,"Project"),new NodeAttribute(new StringProperty("_taskList"),"Notion(tasks, id, name)"),new NodeAttribute(new StringProperty("_taskNames"),"Notion(tasks, name)"));
    final SchemaNode taskNode=app.create(SchemaNode.class,new NodeAttribute(SchemaNode.name,"Task"));
    final PropertyMap taskProperties=new PropertyMap();
    taskProperties.put(SchemaRelationship.relationshipType,"TASK");
    taskProperties.put(SchemaRelationship.sourceMultiplicity,"1");
    taskProperties.put(SchemaRelationship.targetMultiplicity,"*");
    taskProperties.put(SchemaRelationship.sourceJsonName,"project");
    taskProperties.put(SchemaRelationship.targetJsonName,"tasks");
    app.create(projectNode,taskNode,SchemaRelationship.class,taskProperties);
    final PropertyMap currentTaskProperties=new PropertyMap();
    currentTaskProperties.put(SchemaRelationship.relationshipType,"CURRENT");
    currentTaskProperties.put(SchemaRelationship.sourceMultiplicity,"1");
    currentTaskProperties.put(SchemaRelationship.targetMultiplicity,"1");
    currentTaskProperties.put(SchemaRelationship.sourceJsonName,"project");
    currentTaskProperties.put(SchemaRelationship.targetJsonName,"currentTask");
    app.create(projectNode,taskNode,SchemaRelationship.class,currentTaskProperties);
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  final ConfigurationProvider config=StructrApp.getConfiguration();
  final Class projectClass=config.getNodeEntityClass("Project");
  final Class taskClass=config.getNodeEntityClass("Task");
  final PropertyKey currentTaskKey=config.getPropertyKeyForJSONName(projectClass,"currentTask");
  final PropertyKey tasksKey=config.getPropertyKeyForJSONName(projectClass,"tasks");
  try (final Tx tx=app.tx()){
    project=app.create(projectClass,new NodeAttribute(SchemaNode.name,"Project1"));
    task1=app.create(taskClass,new NodeAttribute(SchemaNode.name,"Task1"));
    task2=app.create(taskClass,new NodeAttribute(SchemaNode.name,"Task2"));
    task3=app.create(taskClass,new NodeAttribute(SchemaNode.name,"Task3"));
    final List tasks=new LinkedList<>();
    tasks.add(task1);
    tasks.add(task2);
    tasks.add(task3);
    project.setProperty(tasksKey,tasks);
    project.setProperty(currentTaskKey,task3);
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    final RenderContext renderContext=new RenderContext();
    renderContext.putDataObject("project",project);
    renderContext.putDataObject("task",task1);
    assertEquals("Invalid dot syntax result: ","Project1",Scripting.replaceVariables(securityContext,project,renderContext,"${project.name}"));
    assertEquals("Invalid dot syntax result: ","Task1",Scripting.replaceVariables(securityContext,project,renderContext,"${project.tasks[0].name}"));
    assertEquals("Invalid dot syntax result: ","Task2",Scripting.replaceVariables(securityContext,project,renderContext,"${project.tasks[1].name}"));
    assertEquals("Invalid dot syntax result: ","Task3",Scripting.replaceVariables(securityContext,project,renderContext,"${project.tasks[2].name}"));
    assertEquals("Invalid dot syntax result: ","[Task1, Task2, Task3]",Scripting.replaceVariables(securityContext,project,renderContext,"${project.taskNames}"));
    assertEquals("Invalid dot syntax result: ","Task1",Scripting.replaceVariables(securityContext,project,renderContext,"${project.taskNames[0]}"));
    assertEquals("Invalid dot syntax result: ","Task2",Scripting.replaceVariables(securityContext,project,renderContext,"${project.taskNames[1]}"));
    assertEquals("Invalid dot syntax result: ","Task3",Scripting.replaceVariables(securityContext,project,renderContext,"${project.taskNames[2]}"));
    assertEquals("Invalid dot syntax result: ","Task3",Scripting.replaceVariables(securityContext,project,renderContext,"${project.currentTask.name}"));
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
}
