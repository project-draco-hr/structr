{
  NodeInterface detailsDataObject=null;
  Page page=null;
  DOMNode html=null;
  DOMNode head=null;
  DOMNode body=null;
  DOMNode title=null;
  DOMNode h1=null;
  DOMNode div1=null;
  DOMNode p1=null;
  DOMNode div2=null;
  DOMNode p2=null;
  DOMNode div3=null;
  DOMNode p3=null;
  DOMNode a=null;
  DOMNode div4=null;
  DOMNode p4=null;
  try (final Tx tx=app.tx()){
    detailsDataObject=app.create(TestOne.class,"TestOne");
    page=Page.createNewPage(securityContext,"testpage");
    page.setProperty(Page.visibleToPublicUsers,true);
    assertTrue(page != null);
    assertTrue(page instanceof Page);
    html=(DOMNode)page.createElement("html");
    head=(DOMNode)page.createElement("head");
    body=(DOMNode)page.createElement("body");
    title=(DOMNode)page.createElement("title");
    h1=(DOMNode)page.createElement("h1");
    div1=(DOMNode)page.createElement("div");
    p1=(DOMNode)page.createElement("p");
    div2=(DOMNode)page.createElement("div");
    p2=(DOMNode)page.createElement("p");
    div3=(DOMNode)page.createElement("div");
    p3=(DOMNode)page.createElement("p");
    a=(DOMNode)page.createElement("a");
    div4=(DOMNode)page.createElement("div");
    p4=(DOMNode)page.createElement("p");
    page.appendChild(html);
    html.appendChild(head);
    html.appendChild(body);
    head.appendChild(title);
    body.appendChild(h1);
    body.appendChild(div1);
    div1.appendChild(p1);
    div1.appendChild(div2);
    div2.appendChild(p2);
    div2.appendChild(div3);
    div3.appendChild(p3);
    p3.appendChild(a);
    a.setProperty(LinkSource.linkable,page);
    body.appendChild(div4);
    div4.appendChild(p4);
    p4.setProperty(DOMElement.restQuery,"/divs");
    p4.setProperty(DOMElement.dataKey,"div");
    NodeList paragraphs=page.getElementsByTagName("p");
    assertEquals(p1,paragraphs.item(0));
    assertEquals(p2,paragraphs.item(1));
    assertEquals(p3,paragraphs.item(2));
    assertEquals(p4,paragraphs.item(3));
    final User tester1=app.create(User.class,new NodeAttribute<>(User.name,"tester1"),new NodeAttribute<>(User.eMail,"tester1@test.com"));
    final User tester2=app.create(User.class,new NodeAttribute<>(User.name,"tester2"),new NodeAttribute<>(User.eMail,"tester2@test.com"));
    assertNotNull("User tester1 should exist.",tester1);
    assertNotNull("User tester2 should exist.",tester2);
    final User admin=app.create(User.class,"admin");
    admin.setProperty(User.password,"admin");
    admin.setProperty(User.isAdmin,true);
    tx.success();
  }
 catch (  FrameworkException fex) {
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    final RenderContext ctx=new RenderContext();
    ctx.setDetailsDataObject(detailsDataObject);
    ctx.setPage(page);
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${err}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.this.this.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${parent.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.owner}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${parent.owner}"));
    assertEquals("true",p1.replaceVariables(securityContext,ctx,"${true}"));
    assertEquals("false",p1.replaceVariables(securityContext,ctx,"${false}"));
    assertEquals("yes",p1.replaceVariables(securityContext,ctx,"${if(true, \"yes\", \"no\")}"));
    assertEquals("no",p1.replaceVariables(securityContext,ctx,"${if(false, \"yes\", \"no\")}"));
    assertEquals("true",p1.replaceVariables(securityContext,ctx,"${if(true, true, false)}"));
    assertEquals("false",p1.replaceVariables(securityContext,ctx,"${if(false, true, false)}"));
    assertEquals("${id} should evaluate to the ID if the current details object",detailsDataObject.getUuid(),p1.replaceVariables(securityContext,ctx,"${id}"));
    ctx.setDetailsDataObject(null);
    assertEquals("${id} should evaluate to the ID if the current details object","abc12345",p1.replaceVariables(securityContext,ctx,"${id!abc12345}"));
    ctx.setDetailsDataObject(detailsDataObject);
    assertEquals("${id} should be equal to ${current.id}","true",p1.replaceVariables(securityContext,ctx,"${equal(id, current.id)}"));
    assertEquals("${element} should evaluate to the current DOM node",p1.toString(),p1.replaceVariables(securityContext,ctx,"${element}"));
    assertNull(p1.replaceVariables(securityContext,ctx,"${if(true, null, \"no\")}"));
    assertNull(p1.replaceVariables(securityContext,ctx,"${null}"));
    assertEquals("Invalid replacement result","/testpage?" + page.getUuid(),p1.replaceVariables(securityContext,ctx,"/${page.name}?${page.id}"));
    assertEquals("Invalid replacement result","/testpage?" + page.getUuid(),a.replaceVariables(securityContext,ctx,"/${link.name}?${link.id}"));
    assertEquals("Invalid replacement result",page.getUuid(),a.replaceVariables(securityContext,ctx,"${get(find('Page', 'name', 'testpage'), 'id')}"));
    assertEquals("Invalid replacement result",a.getUuid(),a.replaceVariables(securityContext,ctx,"${get(find('A'), 'id')}"));
    assertEquals("Invalid replacement result",Functions.ERROR_MESSAGE_GET_ENTITY,a.replaceVariables(securityContext,ctx,"${get(find('P'), 'id')}"));
    assertEquals("bar",p1.replaceVariables(securityContext,ctx,"${request.foo!bar}"));
    assertEquals("1",p1.replaceVariables(securityContext,ctx,"${page.position!1}"));
    assertEquals("true",p1.replaceVariables(securityContext,ctx,"${equal(42, this.null!42)}"));
    final User tester1=app.nodeQuery(User.class).andName("tester1").getFirst();
    final User tester2=app.nodeQuery(User.class).andName("tester2").getFirst();
    assertNotNull("User tester1 should exist.",tester1);
    assertNotNull("User tester2 should exist.",tester2);
    final SecurityContext tester1Context=SecurityContext.getInstance(tester1,AccessMode.Backend);
    final SecurityContext tester2Context=SecurityContext.getInstance(tester2,AccessMode.Backend);
    assertEquals("tester1",p1.replaceVariables(tester1Context,ctx,"${me.name}"));
    assertEquals("tester2",p1.replaceVariables(tester2Context,ctx,"${me.name}"));
    grant("Page/_Ui",16,false);
    assertEquals("Invalid GET notation result",page.getName(),p1.replaceVariables(securityContext,ctx,"${from_json(GET('http://localhost:8875/structr/rest/pages/ui')).result[0].name}"));
    grant("Folder",64,true);
    grant("_login",64,false);
    assertEquals("Invalid POST result","201",page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/folders', '{name:Test}').status}"));
    assertEquals("Invalid POST result","1.0",page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/folders', '{name:Test}').body.result_count}"));
    assertEquals("Invalid POST result","application/json; charset=utf-8",page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/folders', '{name:Test}').headers.Content-Type}"));
    assertEquals("Invalid POST result","422",page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/folders', '{name:\"Test{{{}}{}{}{}\"}').status}"));
    System.out.println(page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/login', '{name:admin,password:admin}')}"));
    final String sessionIdCookie=page.replaceVariables(securityContext,ctx,"${POST('http://localhost:8875/structr/rest/login', '{name:admin,password:admin}').headers.Set-Cookie}");
    final String sessionId=HttpCookie.parse(sessionIdCookie).get(0).getValue();
    assertEquals("Invalid authenticated GET result","admin",page.replaceVariables(securityContext,ctx,"${add_header('Cookie', 'JSESSIONID=" + sessionId + ";Path=/')}${from_json(GET('http://localhost:8875/structr/rest/users')).result[0].name}"));
    assertEquals("Invalid authenticated GET result","tester1",page.replaceVariables(securityContext,ctx,"${add_header('Cookie', 'JSESSIONID=" + sessionId + ";Path=/')}${from_json(GET('http://localhost:8875/structr/rest/users')).result[1].name}"));
    assertEquals("Invalid authenticated GET result","tester2",page.replaceVariables(securityContext,ctx,"${add_header('Cookie', 'JSESSIONID=" + sessionId + ";Path=/')}${from_json(GET('http://localhost:8875/structr/rest/users')).result[2].name}"));
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception");
  }
}
