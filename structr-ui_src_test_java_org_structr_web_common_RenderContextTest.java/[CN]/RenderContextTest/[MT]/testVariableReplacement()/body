{
  final Date now=new Date();
  Page page=null;
  DOMNode html=null;
  DOMNode head=null;
  DOMNode body=null;
  DOMNode title=null;
  DOMNode h1=null;
  DOMNode div1=null;
  DOMNode p1=null;
  DOMNode div2=null;
  DOMNode p2=null;
  DOMNode div3=null;
  DOMNode p3=null;
  DOMNode a=null;
  try (final Tx tx=app.tx()){
    page=Page.createNewPage(securityContext,"testpage");
    assertTrue(page != null);
    assertTrue(page instanceof Page);
    html=(DOMNode)page.createElement("html");
    head=(DOMNode)page.createElement("head");
    body=(DOMNode)page.createElement("body");
    title=(DOMNode)page.createElement("title");
    h1=(DOMNode)page.createElement("h1");
    div1=(DOMNode)page.createElement("div");
    p1=(DOMNode)page.createElement("p");
    div2=(DOMNode)page.createElement("div");
    p2=(DOMNode)page.createElement("p");
    div3=(DOMNode)page.createElement("div");
    p3=(DOMNode)page.createElement("p");
    a=(DOMNode)page.createElement("a");
    page.appendChild(html);
    html.appendChild(head);
    html.appendChild(body);
    head.appendChild(title);
    body.appendChild(h1);
    body.appendChild(div1);
    div1.appendChild(p1);
    div1.appendChild(div2);
    div2.appendChild(p2);
    div2.appendChild(div3);
    div3.appendChild(p3);
    p3.appendChild(a);
    a.setProperty(LinkSource.linkable,page);
    NodeList divs=page.getElementsByTagName("p");
    assertEquals(p1,divs.item(0));
    assertEquals(p2,divs.item(1));
    assertEquals(p3,divs.item(2));
    tx.success();
  }
 catch (  FrameworkException fex) {
    fail("Unexpected exception");
  }
  try (final Tx tx=app.tx()){
    final RenderContext ctx=new RenderContext();
    ctx.setPage(page);
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.this.this.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${parent.error}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${this.owner}"));
    assertEquals("",p1.replaceVariables(securityContext,ctx,"${parent.owner}"));
    assertEquals("true",p1.replaceVariables(securityContext,ctx,"${true}"));
    assertEquals("false",p1.replaceVariables(securityContext,ctx,"${false}"));
    assertEquals("yes",p1.replaceVariables(securityContext,ctx,"${if(true, \"yes\", \"no\")}"));
    assertEquals("no",p1.replaceVariables(securityContext,ctx,"${if(false, \"yes\", \"no\")}"));
    assertEquals("true",p1.replaceVariables(securityContext,ctx,"${if(true, true, false)}"));
    assertEquals("false",p1.replaceVariables(securityContext,ctx,"${if(false, true, false)}"));
    assertNull(p1.replaceVariables(securityContext,ctx,"${if(true, null, \"no\")}"));
    assertNull(p1.replaceVariables(securityContext,ctx,"${null}"));
    assertEquals("Invalid replacement result","/testpage?" + page.getUuid(),p1.replaceVariables(securityContext,ctx,"/${page.name}?${page.id}"));
    assertEquals("Invalid replacement result","/testpage?" + page.getUuid(),a.replaceVariables(securityContext,ctx,"/${link.name}?${link.id}"));
    assertEquals("Invalid replacement result",page.getUuid(),a.replaceVariables(securityContext,ctx,"${get(find('Page', 'name', 'testpage'), 'id')}"));
    assertEquals("Invalid replacement result",a.getUuid(),a.replaceVariables(securityContext,ctx,"${get(find('A'), 'id')}"));
    assertEquals("Invalid replacement result",AbstractNode.ERROR_MESSAGE_GET_ENTITY,a.replaceVariables(securityContext,ctx,"${get(find('P'), 'id')}"));
  }
 catch (  FrameworkException fex) {
    fail("Unexpected exception");
  }
}
