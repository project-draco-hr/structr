{
  String name="structr-ui-test-" + System.nanoTime();
  basePath="/tmp/" + name;
  try {
    File basePathFile=new File(basePath);
    basePathFile.mkdirs();
    String sourceJarName=getClass().getProtectionDomain().getCodeSource().getLocation().toString();
    checkUrlrewriteConf(basePath);
    checkStructrConf(basePath,sourceJarName);
    List<Connector> connectors=new LinkedList<Connector>();
    HandlerCollection handlerCollection=new HandlerCollection();
    server=new Server(httpPort);
    ServletContextHandler servletContext=new ServletContextHandler(server,contextPath,ServletContextHandler.SESSIONS);
    servletContext.setBaseResource(new ResourceCollection(Resource.newResource(basePath),JarResource.newJarResource(Resource.newResource(sourceJarName))));
    servletContext.setInitParameter("configfile.path",basePath + "/structr.conf");
    JsonRestServlet structrRestServlet=new JsonRestServlet(new UiResourceProvider(),PropertyView.Public,AbstractNode.uuid);
    ServletHolder structrRestServletHolder=new ServletHolder(structrRestServlet);
    Map<String,String> servletParams=new LinkedHashMap<String,String>();
    servletParams.put("Authenticator",UiAuthenticator.class.getName());
    structrRestServletHolder.setInitParameters(servletParams);
    structrRestServletHolder.setInitOrder(0);
    Map<String,ServletHolder> servlets=new LinkedHashMap<String,ServletHolder>();
    servlets.put(restUrl + "/*",structrRestServletHolder);
    WebSocketServlet wsServlet=new WebSocketServlet(AbstractNode.uuid);
    ServletHolder wsServletHolder=new ServletHolder(wsServlet);
    Map<String,String> wsInitParams=new HashMap<String,String>();
    wsInitParams.put("Authenticator","org.structr.web.auth.UiAuthenticator");
    wsInitParams.put("IdProperty","uuid");
    wsServletHolder.setInitParameters(wsInitParams);
    wsServletHolder.setInitOrder(3);
    servlets.put(wsUrl + "/*",wsServletHolder);
    HtmlServlet htmlServlet=new HtmlServlet();
    ServletHolder htmlServletHolder=new ServletHolder(htmlServlet);
    Map<String,String> htmlInitParams=new HashMap<String,String>();
    htmlInitParams.put("Authenticator","org.structr.web.auth.HttpAuthenticator");
    htmlServletHolder.setInitParameters(htmlInitParams);
    htmlServletHolder.setInitOrder(1);
    servlets.put(htmlUrl + "/*",htmlServletHolder);
    int position=1;
    for (    Map.Entry<String,ServletHolder> servlet : servlets.entrySet()) {
      String path=servlet.getKey();
      ServletHolder servletHolder=servlet.getValue();
      servletHolder.setInitOrder(position++);
      logger.log(Level.INFO,"Adding servlet {0} for {1}",new Object[]{servletHolder,path});
      servletContext.addServlet(servletHolder,path);
    }
    ResourceHandler resourceHandler=new ResourceHandler();
    resourceHandler.setDirectoriesListed(true);
    resourceHandler.setWelcomeFiles(new String[]{"index.html"});
    resourceHandler.setResourceBase("src/main/resources/structr");
    ContextHandler staticResourceHandler=new ContextHandler();
    staticResourceHandler.setContextPath("/structr");
    staticResourceHandler.setHandler(resourceHandler);
    handlerCollection.addHandler(staticResourceHandler);
    FilterHolder rewriteFilter=new FilterHolder(UrlRewriteFilter.class);
    rewriteFilter.setInitParameter("confPath",basePath + "/urlrewrite.xml");
    servletContext.addFilter(rewriteFilter,"/*",EnumSet.of(DispatcherType.REQUEST,DispatcherType.FORWARD));
    handlerCollection.addHandler(servletContext);
    servletContext.addEventListener(new ApplicationContextListener());
    handlerCollection.addHandler(servletContext);
    server.setHandler(handlerCollection);
    if (host != null && !host.isEmpty() && httpPort > -1) {
      SelectChannelConnector httpConnector=new SelectChannelConnector();
      httpConnector.setHost(host);
      httpConnector.setPort(httpPort);
      httpConnector.setMaxIdleTime(30000);
      httpConnector.setRequestHeaderSize(8192);
      connectors.add(httpConnector);
    }
 else {
      logger.log(Level.WARNING,"Unable to configure HTTP port, please make sure that application.host, application.http.port and application.rest.path are set correctly in structr.conf.");
    }
    if (!connectors.isEmpty()) {
      server.setConnectors(connectors.toArray(new Connector[0]));
    }
 else {
      logger.log(Level.SEVERE,"No connectors configured, aborting.");
      System.exit(0);
    }
    server.setGracefulShutdown(1000);
    server.setStopAtShutdown(true);
    server.start();
    running=server.isRunning();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
