{
  config=Services.getBaseConfiguration();
  final Date now=new Date();
  final long timestamp=now.getTime();
  basePath="/tmp/structr-test-" + timestamp;
  config.setProperty(Services.TESTING,"true");
  config.setProperty(Services.CONFIGURATION,JarConfigurationProvider.class.getName());
  config.setProperty(Services.CONFIGURED_SERVICES,"NodeService LogService FtpService HttpService");
  config.setProperty(Services.TMP_PATH,"/tmp/");
  config.setProperty(Services.BASE_PATH,basePath);
  config.setProperty(Services.DATABASE_PATH,basePath + "/db");
  config.setProperty(Services.FILES_PATH,basePath + "/files");
  config.setProperty(Services.LOG_DATABASE_PATH,basePath + "/logDb.dat");
  config.setProperty(Services.TCP_PORT,"13465");
  config.setProperty(Services.UDP_PORT,"13466");
  config.setProperty(Services.SUPERUSER_USERNAME,"superadmin");
  config.setProperty(Services.SUPERUSER_PASSWORD,"sehrgeheim");
  config.setProperty(FtpService.APPLICATION_FTP_PORT,Integer.toString(ftpPort));
  config.setProperty(HttpService.APPLICATION_TITLE,"structr unit test app" + timestamp);
  config.setProperty(HttpService.APPLICATION_HOST,host);
  config.setProperty(HttpService.APPLICATION_HTTP_PORT,Integer.toString(httpPort));
  config.setProperty(HttpService.SERVLETS,"JsonRestServlet WebSocketServlet CsvServlet HtmlServlet");
  config.setProperty("JsonRestServlet.class",JsonRestServlet.class.getName());
  config.setProperty("JsonRestServlet.path",restUrl);
  config.setProperty("JsonRestServlet.resourceprovider",UiResourceProvider.class.getName());
  config.setProperty("JsonRestServlet.authenticator",UiAuthenticator.class.getName());
  config.setProperty("JsonRestServlet.user.class","");
  config.setProperty("JsonRestServlet.user.autocreate","false");
  config.setProperty("JsonRestServlet.defaultview",PropertyView.Public);
  config.setProperty("JsonRestServlet.outputdepth","3");
  config.setProperty("WebSocketServlet.class",WebSocketServlet.class.getName());
  config.setProperty("WebSocketServlet.path",wsUrl);
  config.setProperty("WebSocketServlet.resourceprovider",UiResourceProvider.class.getName());
  config.setProperty("WebSocketServlet.authenticator",UiAuthenticator.class.getName());
  config.setProperty("WebSocketServlet.user.class","");
  config.setProperty("WebSocketServlet.user.autocreate","false");
  config.setProperty("WebSocketServlet.defaultview",PropertyView.Public);
  config.setProperty("WebSocketServlet.outputdepth","3");
  config.setProperty("HtmlServlet.class",HtmlServlet.class.getName());
  config.setProperty("HtmlServlet.path",htmlUrl);
  config.setProperty("HtmlServlet.resourceprovider",UiResourceProvider.class.getName());
  config.setProperty("HtmlServlet.authenticator",UiAuthenticator.class.getName());
  config.setProperty("HtmlServlet.user.class","");
  config.setProperty("HtmlServlet.user.autocreate","false");
  config.setProperty("HtmlServlet.defaultview",PropertyView.Public);
  config.setProperty("HtmlServlet.outputdepth","3");
  config.setProperty(HttpService.RESOURCE_HANDLERS,"StructrUiHandler");
  config.setProperty("StructrUiHandler.contextPath","/structr");
  config.setProperty("StructrUiHandler.resourceBase","src/main/resources/structr");
  config.setProperty("StructrUiHandler.directoriesListed",Boolean.toString(false));
  config.setProperty("StructrUiHandler.welcomeFiles","index.html");
  final Services services=Services.getInstance(config);
  do {
    try {
      Thread.sleep(100);
    }
 catch (    Throwable t) {
    }
  }
 while (!services.isInitialized());
  securityContext=SecurityContext.getSuperUserInstance();
  app=StructrApp.getInstance(securityContext);
  graphDbCommand=app.command(GraphDatabaseCommand.class);
  writeLogCommand=app.command(WriteLogCommand.class);
  readLogCommand=app.command(ReadLogCommand.class);
}
