{
  try {
    final List<Folder> folders=createTestNodes(Folder.class,7);
    final List<File> files=createTestNodes(File.class,7);
    final Page doc=(Page)getDocument();
    assertEquals(7,folders.size());
    Folder rootNode=folders.get(0);
    rootNode.setProperty(AbstractNode.name,"rootNode");
    Folder folderA=folders.get(1);
    folderA.setProperty(AbstractNode.name,"folderA");
    Folder folderB=folders.get(2);
    folderB.setProperty(AbstractNode.name,"folderB");
    Folder folderC=folders.get(3);
    folderC.setProperty(AbstractNode.name,"folderC");
    Folder folderD=folders.get(4);
    folderD.setProperty(AbstractNode.name,"folderD");
    Folder folderE=folders.get(5);
    folderE.setProperty(AbstractNode.name,"folderE");
    Folder folderF=folders.get(6);
    folderF.setProperty(AbstractNode.name,"folderF");
    File file1=files.get(0);
    file1.setProperty(AbstractNode.name,"file1");
    File file2=files.get(1);
    file2.setProperty(AbstractNode.name,"file2");
    File file3=files.get(2);
    file3.setProperty(AbstractNode.name,"file3");
    File file4=files.get(3);
    file4.setProperty(AbstractNode.name,"file4");
    File file5=files.get(4);
    file5.setProperty(AbstractNode.name,"file5");
    File file6=files.get(5);
    file6.setProperty(AbstractNode.name,"file6");
    File file7=files.get(6);
    file7.setProperty(AbstractNode.name,"file7");
    rootNode.treeAppendChild(RelType.CONTAINS,folderA);
    rootNode.treeAppendChild(RelType.CONTAINS,folderB);
    rootNode.treeAppendChild(RelType.CONTAINS,file1);
    rootNode.treeAppendChild(RelType.CONTAINS,file2);
    folderA.treeAppendChild(RelType.CONTAINS,folderC);
    folderA.treeAppendChild(RelType.CONTAINS,folderD);
    folderA.treeAppendChild(RelType.CONTAINS,file3);
    folderA.treeAppendChild(RelType.CONTAINS,file4);
    folderB.treeAppendChild(RelType.CONTAINS,folderE);
    folderB.treeAppendChild(RelType.CONTAINS,folderF);
    folderB.treeAppendChild(RelType.CONTAINS,file5);
    folderB.treeAppendChild(RelType.CONTAINS,file6);
    Element html=doc.createElement("html");
    doc.appendChild(html);
    Element body=doc.createElement("body");
    html.appendChild(body);
    final Element div=doc.createElement("div");
    body.appendChild(div);
    div.appendChild(doc.createTextNode("${root.name}"));
    final Element ul1=doc.createElement("ul");
    div.appendChild(ul1);
    final Element li1=doc.createElement("li");
    ul1.appendChild(li1);
    li1.appendChild(doc.createTextNode("${folders.name}"));
    final Element li2=doc.createElement("li");
    ul1.appendChild(li2);
    li2.appendChild(doc.createTextNode("${files.name}"));
    final Element ul2=doc.createElement("ul");
    li1.appendChild(ul2);
    final Element li3=doc.createElement("li");
    ul2.appendChild(li3);
    li3.appendChild(doc.createTextNode("${files.name}"));
    final Element li4=doc.createElement("li");
    ul2.appendChild(li4);
    li4.appendChild(doc.createTextNode("${folders.name}"));
    PropertyMap properties=new PropertyMap();
    Services.command(securityContext,CreateRelationshipCommand.class).execute((DOMElement)div,rootNode,RelType.RENDER_NODE,properties,false);
    Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        ((DOMElement)div).setProperty(DOMElement.dataKey,"root");
        ((DOMElement)li1).setProperty(DOMElement.dataKey,"folders");
        ((DOMElement)li2).setProperty(DOMElement.dataKey,"files");
        ((DOMElement)li3).setProperty(DOMElement.dataKey,"files");
        ((DOMElement)li4).setProperty(DOMElement.dataKey,"folders");
        return null;
      }
    }
);
    RenderContext ctx=new RenderContext(null,null,EditMode.NONE,Locale.GERMAN);
    doc.render(securityContext,ctx,0);
    System.out.println(ctx.getBuffer().toString());
    org.jsoup.nodes.Document parsedDocument=Jsoup.parse(ctx.getBuffer().toString());
    assertEquals("rootNode",parsedDocument.select("html > body > div").get(0).ownText());
    assertEquals("folderA",parsedDocument.select("html > body > div > ul > li").get(0).ownText());
    assertEquals("folderB",parsedDocument.select("html > body > div > ul > li").get(1).ownText());
    assertEquals("file1",parsedDocument.select("html > body > div > ul > li").get(2).ownText());
    assertEquals("file2",parsedDocument.select("html > body > div > ul > li").get(3).ownText());
    assertEquals("file3",parsedDocument.select("html > body > div > ul > li > ul > li").get(0).ownText());
    assertEquals("file4",parsedDocument.select("html > body > div > ul > li > ul > li").get(1).ownText());
    assertEquals("folderC",parsedDocument.select("html > body > div > ul > li > ul > li").get(2).ownText());
    assertEquals("folderD",parsedDocument.select("html > body > div > ul > li > ul > li").get(3).ownText());
    assertEquals("file5",parsedDocument.select("html > body > div > ul > li").get(1).child(0).child(0).ownText());
    assertEquals("file6",parsedDocument.select("html > body > div > ul > li").get(1).child(0).child(1).ownText());
    assertEquals("folderE",parsedDocument.select("html > body > div > ul > li").get(1).child(0).child(2).ownText());
    assertEquals("folderF",parsedDocument.select("html > body > div > ul > li").get(1).child(0).child(3).ownText());
  }
 catch (  FrameworkException fex) {
    fail("unexpected exception");
  }
}
