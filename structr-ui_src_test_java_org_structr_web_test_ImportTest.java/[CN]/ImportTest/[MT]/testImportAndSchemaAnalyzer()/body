{
  final String source="== Test setup\n" + "\n" + "[source, cypher]\n"+ "----\n"+ "CREATE (c:Company { name: 'Company 1', comp_id: '12345', string_name: 'company1', year: 2013, month: 6, day: 7, status: 'test'})\n"+ "CREATE (p:Company { name: 'Company 2'})\n"+ "----\n";
  final List<String> sourceLines=GraphGistImporter.extractSources(new ByteArrayInputStream(source.getBytes(Charset.forName("utf-8"))));
  GraphGistImporter.importCypher(sourceLines);
  GraphGistImporter.analyzeSchema();
  try (final Tx tx=app.tx()){
    final SchemaNode schemaNode=app.nodeQuery(SchemaNode.class).andName("Company").getFirst();
    final List<SchemaProperty> properties=schemaNode.getProperty(SchemaNode.schemaProperties);
    final Map<String,SchemaProperty> map=new HashMap<>();
    for (    final SchemaProperty prop : properties) {
      map.put(prop.getProperty(SchemaProperty.name),prop);
    }
    assertNotNull("A schema node with name 'Company' should have been created: ",schemaNode);
    assertEquals("Company schema node should have a 'name' property with value 'String': ","String",map.get("name").getPropertyType().name());
    assertEquals("Company schema node should have a 'comp_id' property with value 'String': ","String",map.get("comp_id").getPropertyType().name());
    assertEquals("Company schema node should have a 'string_name' property with value 'String': ","String",map.get("string_name").getPropertyType().name());
    assertEquals("Company schema node should have a 'year' property with value 'Long': ","Long",map.get("year").getPropertyType().name());
    assertEquals("Company schema node should have a 'month' property with value 'Long': ","Long",map.get("month").getPropertyType().name());
    assertEquals("Company schema node should have a 'day' property with value 'Long': ","Long",map.get("day").getPropertyType().name());
    assertEquals("Company schema node should have a 'status' property with value 'String': ","String",map.get("status").getPropertyType().name());
    tx.success();
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
    fail("Unexpected exception.");
  }
}
