{
  try {
    final String name="testuser-01";
    final String password="testpassword-01";
    final User testUser=createTestNodes(User.class,1).get(0);
    final Folder testFolder=createTestNodes(Folder.class,1).get(0);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        assertNotNull(testFolder);
        RestAssured.given().contentType("application/json; charset=UTF-8").expect().statusCode(401).when().put("/folder/" + testFolder.getUuid());
        return null;
      }
    }
);
    final ResourceAccess folderGrant=createResourceAccess("Folder",UiAuthenticator.FORBIDDEN);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        RestAssured.given().contentType("application/json; charset=UTF-8").expect().statusCode(401).when().put("/folder/" + testFolder.getUuid());
        return null;
      }
    }
);
    folderGrant.setFlag(UiAuthenticator.AUTH_USER_PUT);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        RestAssured.given().contentType("application/json; charset=UTF-8").expect().statusCode(401).when().put("/folder/" + testFolder.getUuid());
        return null;
      }
    }
);
    folderGrant.setFlag(UiAuthenticator.NON_AUTH_USER_PUT);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        RestAssured.given().contentType("application/json; charset=UTF-8").expect().statusCode(403).when().put("/folder/" + testFolder.getUuid());
        testUser.setProperty(AbstractNode.name,name);
        testUser.setProperty(User.password,password);
        return null;
      }
    }
);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        RestAssured.given().headers("X-User",name,"X-Password",password).contentType("application/json; charset=UTF-8").expect().statusCode(403).when().put("/folder/" + testFolder.getUuid());
        return null;
      }
    }
);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        testFolder.setProperty(AbstractNode.owner,testUser);
        return null;
      }
    }
);
    transactionCommand.execute(new StructrTransaction<AbstractNode>(){
      @Override public AbstractNode execute() throws FrameworkException {
        RestAssured.given().headers("X-User",name,"X-Password",password).contentType("application/json; charset=UTF-8").expect().statusCode(200).when().put("/folder/" + testFolder.getUuid());
        return null;
      }
    }
);
  }
 catch (  FrameworkException ex) {
    ex.printStackTrace();
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
