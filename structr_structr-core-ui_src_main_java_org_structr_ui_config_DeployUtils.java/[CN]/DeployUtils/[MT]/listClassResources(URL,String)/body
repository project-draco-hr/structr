{
  if (logService.isDebugEnabled()) {
    logService.debug("listing classes in " + url);
  }
  InputStream is=null;
  try {
    List<String> resources=new ArrayList<String>();
    URL jarUrl=findJarForResource(url,path);
    if (jarUrl != null) {
      is=jarUrl.openStream();
      resources=listClassResources(new JarInputStream(is),path);
    }
 else {
      List<String> children=new ArrayList<String>();
      try {
        if (isJar(url)) {
          is=url.openStream();
          JarInputStream jarInput=new JarInputStream(is);
          for (JarEntry entry; (entry=jarInput.getNextJarEntry()) != null; ) {
            if (logService.isTraceEnabled()) {
              logService.trace("jar entry: " + entry.getName());
            }
            if (isRelevantResource(entry.getName())) {
              children.add(entry.getName());
            }
          }
          jarInput.close();
        }
 else {
          is=url.openStream();
          File file=new File(url.getFile());
          if (file.isFile()) {
            if (isRelevantResource(file.getName())) {
              resources.add(path);
            }
          }
 else {
            BufferedReader reader=new BufferedReader(new InputStreamReader(is));
            for (String line; (line=reader.readLine()) != null; ) {
              if (logService.isTraceEnabled()) {
                logService.trace("reader entry: " + line);
              }
              if (isRelevantResource(line)) {
                children.add(line);
              }
            }
            reader.close();
          }
        }
      }
 catch (      FileNotFoundException e) {
        if ("file".equals(url.getProtocol())) {
          File file=new File(url.getFile());
          if (file.isDirectory()) {
            children=Arrays.asList(file.list(new FilenameFilter(){
              public boolean accept(              File dir,              String name){
                return isRelevantResource(name);
              }
            }
));
          }
        }
 else {
          logService.error("could not deploy the resources from" + " the url '" + url + "'. You will need to"+ " manually included resources from this url in"+ " your application.");
        }
      }
      String prefix=url.toExternalForm();
      if (!prefix.endsWith("/")) {
        prefix=prefix + "/";
      }
      for (      String child : children) {
        String resourcePath=path + "/" + child;
        if (child.indexOf(".") != -1) {
          if (logService.isTraceEnabled()) {
            logService.trace("found deployable resource: " + resourcePath);
          }
          resources.add(resourcePath);
        }
 else {
          URL childUrl=new URL(prefix + child);
          resources.addAll(listClassResources(childUrl,resourcePath));
        }
      }
    }
    return resources;
  }
  finally {
    ClickUtils.close(is);
  }
}
