{
  AbstractNode s=getNodeByIdOrPath(getNodeId());
  if (s == null) {
    logger.log(Level.FINE,"Node {0} not found",getNodeId());
    getContext().getResponse().setStatus(HttpServletResponse.SC_NOT_FOUND);
    setForward("/click/not-found.htm");
  }
 else {
    s.setRequest(getContext().getRequest());
    s.setSession(getContext().getSession());
    if (!(s.isVisible(user))) {
      logger.log(Level.FINE,"Hidden page requested ({0})",getNodeId());
      getContext().getResponse().setStatus(HttpServletResponse.SC_NOT_FOUND);
      setForward("/click/not-found.htm");
      return;
    }
    if (!(isSuperUser || s.readAllowed(user))) {
      logger.log(Level.FINE,"Secure page requested ({0})",getNodeId());
      getContext().getResponse().setStatus(HttpServletResponse.SC_FORBIDDEN);
      setForward("/not-authorized.html");
      return;
    }
    String contentType=s.getContentType();
    String editUrl=null;
    if (editNodeId != null) {
      AbstractNode editNode=getNodeByIdOrPath(editNodeId);
      editUrl=getContext().getRequest().getContextPath().concat(getContext().getPagePath(getEditPageClass(editNode))).concat("?").concat(NODE_ID_KEY).concat("=").concat(editNodeId.toString()).concat("&").concat(RENDER_MODE_KEY).concat("=").concat(INLINE_MODE);
    }
    if (s instanceof File || s instanceof Image || s instanceof Map|| (s instanceof PlainText && !("text/html".equals(contentType)))) {
      HttpServletResponse response=getContext().getResponse();
      response.setContentType(contentType);
      Calendar cal=new GregorianCalendar();
      int seconds=7 * 24 * 60* 60 + 1;
      cal.add(Calendar.SECOND,seconds);
      response.addHeader("Cache-Control","public, max-age=" + seconds + ", s-maxage="+ seconds);
      DateFormat httpDateFormat=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z",Locale.US);
      httpDateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
      response.addHeader("Expires",httpDateFormat.format(cal.getTime()));
      Date lastModified=s.getLastModifiedDate();
      if (lastModified != null) {
        response.addHeader("Last-Modified",httpDateFormat.format(lastModified));
      }
      try {
        response.getOutputStream().flush();
        s.renderDirect(response.getOutputStream(),s,editUrl,editNodeId,user);
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,"Error while rendering to output stream: ",e.getStackTrace());
      }
    }
 else {
      StringBuilder out=new StringBuilder();
      s.renderView(out,s,editUrl,editNodeId,user);
      output=new StringBuilder(getContext().getResponse().encodeURL(out.toString()));
    }
  }
}
