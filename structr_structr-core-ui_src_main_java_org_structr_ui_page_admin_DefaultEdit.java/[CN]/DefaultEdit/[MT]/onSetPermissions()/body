{
  final Map<String,String> parameters=new HashMap<String,String>();
  if (securityForm.isValid()) {
    final String selectedUserName=securityForm.getFieldValue(userSelect.getName());
    final List<String> selectedValues=allowed.getSelectedValues();
    final boolean rec=recursive.isChecked();
    node=getNodeByIdOrPath(nodeId);
    Command transaction=Services.createCommand(TransactionCommand.class);
    transaction.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command findUser=Services.createCommand(FindUserCommand.class);
        User selectedUser=(User)findUser.execute(selectedUserName);
        if (selectedUser != null) {
          List<StructrNode> nodes=new ArrayList<StructrNode>();
          if (rec) {
            Command findNode=Services.createCommand(FindNodeCommand.class);
            List<StructrNode> result=(List<StructrNode>)findNode.execute(user,node);
            for (            StructrNode s : result) {
              if (user instanceof SuperUser || s.accessControlAllowed(user)) {
                nodes.add(s);
              }
            }
          }
 else {
            nodes.add(node);
          }
          for (          StructrNode n : nodes) {
            if (n.equals(selectedUser)) {
              continue;
            }
            StructrRelationship r=n.getSecurityRelationship(selectedUser);
            if (r == null) {
              Command createRel=Services.createCommand(CreateRelationshipCommand.class);
              r=(StructrRelationship)createRel.execute(selectedUser,n,RelType.SECURITY);
            }
            if (selectedValues != null && selectedValues.size() > 0) {
              r.setAllowed(selectedValues);
            }
 else {
              Command deleteRel=Services.createCommand(DeleteRelationshipCommand.class);
              deleteRel.execute(r);
            }
          }
          okMsg="Permissions successfully set";
          parameters.put(OK_MSG_KEY,okMsg);
        }
        return (null);
      }
    }
);
  }
  parameters.put(NODE_ID_KEY,nodeId.toString());
  setRedirect(getRedirectPage(getNodeByIdOrPath(getNodeId()),this),parameters);
  return false;
}
