{
  maintenancePanel=new Panel("maintenancePanel","/panel/maintenance-panel.htm");
  sessionsTable.addColumn(new Column("id"));
  sessionsTable.addColumn(new Column("uid"));
  sessionsTable.addColumn(new Column("state"));
  sessionsTable.addColumn(new Column("userName"));
  Column loginTimestampColumn=new Column("loginTimestamp","Login");
  loginTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  sessionsTable.addColumn(loginTimestampColumn);
  Column logoutTimestampColumn=new Column("logoutTimestamp","Logout");
  logoutTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  sessionsTable.addColumn(logoutTimestampColumn);
  sessionsTable.addColumn(new Column("lastActivityText"));
  Column inactiveSinceColumn=new Column("inactiveSince","Inactive");
  inactiveSinceColumn.setDecorator(new Decorator(){
    @Override public String render(    Object row,    Context context){
      long ms=((Session)row).getInactiveSince();
      if (ms < 1000) {
        return ms + " ms";
      }
 else       if (ms < 60 * 1000) {
        return ms / 1000 + " s";
      }
 else       if (ms < 60 * 60 * 1000) {
        long min=ms / (60 * 1000);
        long sec=(ms - (min * 60 * 1000)) / 1000;
        return min + " m " + sec+ " s";
      }
 else       if (ms < 24 * 60 * 60* 1000) {
        long hrs=ms / (60 * 60 * 1000);
        long min=(ms - (hrs * 60 * 60* 1000)) / (60 * 1000);
        long sec=(ms - (hrs * 60 * 60* 1000) - (min * 60 * 1000)) / 1000;
        return hrs + " h " + min+ " m "+ sec+ " s";
      }
 else {
        return "more than a day";
      }
    }
  }
);
  sessionsTable.addColumn(inactiveSinceColumn);
  sessionsTable.setSortable(true);
  sessionsTable.setSortedColumn("inactiveSince");
  sessionsTable.setSortedAscending(true);
  sessionsTable.setPageSize(5);
  sessionsTable.setHoverRows(true);
  sessionsTable.setShowBanner(true);
  sessionsTable.setClass(Table.CLASS_COMPLEX);
  activitiesTable.addColumn(new Column(Activity.OWNER_KEY,"User"));
  activitiesTable.addColumn(new Column(Activity.NODE_ID_KEY));
  activitiesTable.addColumn(new Column(Activity.NAME_KEY));
  activitiesTable.addColumn(new Column(Activity.SESSION_ID_KEY));
  activitiesTable.addColumn(new Column(Activity.TYPE_KEY));
  Column startTimestampColumn=new Column(Activity.START_TIMESTAMP_KEY,"Start");
  startTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  activitiesTable.addColumn(startTimestampColumn);
  Column endTimestampColumn=new Column(Activity.END_TIMESTAMP_KEY,"End");
  endTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  activitiesTable.addColumn(endTimestampColumn);
  activitiesTable.addColumn(new Column(Activity.ACTIVITY_TEXT_KEY));
  activitiesTable.setSortedColumn(Activity.START_TIMESTAMP_KEY);
  activitiesTable.setSortable(true);
  activitiesTable.setSortedAscending(false);
  activitiesTable.setPageSize(15);
  activitiesTable.setHoverRows(true);
  activitiesTable.setShowBanner(true);
  activitiesTable.setClass(Table.CLASS_COMPLEX);
  servicesTable.addColumn(new Column("Name"));
  servicesTable.addColumn(new Column("isRunning","Running"));
  servicesTable.setSortable(true);
  servicesTable.setClass(Table.CLASS_COMPLEX);
  initValuesTable.addColumn(new Column("key","Parameter"));
  initValuesTable.addColumn(new Column("value","Value"));
  initValuesTable.setSortable(true);
  initValuesTable.setClass(Table.CLASS_COMPLEX);
  runtimeValuesTable.addColumn(new Column("key","Parameter"));
  runtimeValuesTable.addColumn(new Column("value","Value"));
  runtimeValuesTable.setSortable(true);
  runtimeValuesTable.setClass(Table.CLASS_COMPLEX);
  modulesTable.addColumn(new Column("toString","Name"));
  modulesTable.setSortable(true);
  modulesTable.setClass(Table.CLASS_COMPLEX);
  Column iconCol=new Column("iconSrc","Icon");
  iconCol.setDecorator(new Decorator(){
    @Override public String render(    Object row,    Context context){
      NodeClassEntry nce=(NodeClassEntry)row;
      String iconSrc=contextPath + nce.getIconSrc();
      return "<img src=\"" + iconSrc + "\" alt=\""+ iconSrc+ "\" width=\"16\" height=\"16\">";
    }
  }
);
  registeredClassesTable.addColumn(iconCol);
  registeredClassesTable.addColumn(new Column("name","Name"));
  registeredClassesTable.addColumn(new Column("count","Count"));
  registeredClassesTable.setSortable(true);
  registeredClassesTable.setSortedColumn("name");
  registeredClassesTable.setHoverRows(true);
  registeredClassesTable.setShowBanner(true);
  registeredClassesTable.setClass(Table.CLASS_COMPLEX);
  allNodesTable.addColumn(new Column(StructrNode.NODE_ID_KEY));
  allNodesTable.addColumn(new Column(StructrNode.NAME_KEY));
  allNodesTable.addColumn(new Column(StructrNode.TYPE_KEY));
  allNodesTable.addColumn(new Column(StructrNode.POSITION_KEY));
  allNodesTable.addColumn(new Column(StructrNode.PUBLIC_KEY));
  allNodesTable.addColumn(new Column(StructrNode.OWNER_KEY));
  allNodesTable.addColumn(new Column(StructrNode.CREATED_BY_KEY));
  allNodesTable.addColumn(new Column(StructrNode.CREATED_DATE_KEY));
  allNodesTable.addColumn(new Column("allProperties"));
  allNodesTable.setSortable(true);
  allNodesTable.setPageSize(15);
  allNodesTable.setHoverRows(true);
  allNodesTable.setShowBanner(true);
  allNodesTable.setClass(Table.CLASS_COMPLEX);
}
