{
  rootNodeLink.setParameter(StructrNode.NODE_ID_KEY,"0");
  if (allNodes == null) {
    return;
  }
  activitiesTable.setDataProvider(new DataProvider(){
    @Override public List<Activity> getData(){
      List<Activity> result=new ArrayList<Activity>();
      LogNodeList<StructrNode> globalLog=(LogNodeList<StructrNode>)Services.command(GetGlobalLogCommand.class).execute();
      if (globalLog != null) {
        for (        StructrNode s : globalLog) {
          if (s instanceof PageRequest) {
            result.add((PageRequest)s);
          }
 else {
            result.add((Activity)s);
          }
        }
      }
      return result;
    }
  }
);
  sessionsTable.setDataProvider(new DataProvider(){
    @Override public List<Session> getData(){
      return (List<Session>)SessionMonitor.getSessions();
    }
  }
);
  servicesTable.setDataProvider(new DataProvider(){
    @Override public List<Service> getData(){
      return Services.getServices();
    }
  }
);
  initValuesTable.setDataProvider(new DataProvider(){
    @Override public List<Map.Entry<String,Object>> getData(){
      List<Map.Entry<String,Object>> params=new ArrayList<Map.Entry<String,Object>>();
      Set<String> entityPackages=((Set<String>)Services.command(GetEntityPackagesCommand.class).execute());
      params.add(new AbstractMap.SimpleEntry<String,Object>("Configuration File Path",Services.getConfigFilePath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Application Title",Services.getApplicationTitle()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Database Path",Services.getDatabasePath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Files Path",Services.getFilesPath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Modules Path",Services.getModulesPath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Entity Packages",entityPackages));
      return params;
    }
  }
);
  runtimeValuesTable.setDataProvider(new DataProvider(){
    @Override public List<Map.Entry<String,Object>> getData(){
      List<Map.Entry<String,Object>> params=new ArrayList<Map.Entry<String,Object>>();
      for (      StructrNode s : allNodes) {
        String type=s.getType();
        long value=0L;
        if (nodesHistogram.containsKey(type)) {
          value=(Long)nodesHistogram.get(type);
        }
        value++;
        nodesHistogram.put(type,value);
      }
      params.add(new AbstractMap.SimpleEntry<String,Object>("Nodes",allNodes.size()));
      return params;
    }
  }
);
  modulesTable.setDataProvider(new DataProvider(){
    @Override public Set<String> getData(){
      Command listModules=Services.command(ListModulesCommand.class);
      return (Set<String>)listModules.execute();
    }
  }
);
  registeredClassesTable.setDataProvider(new DataProvider(){
    @Override public Set<NodeClassEntry> getData(){
      SortedSet<NodeClassEntry> nodeClassList=new TreeSet<NodeClassEntry>();
      Map<String,Class> entities=(Map<String,Class>)Services.command(GetEntitiesCommand.class).execute();
      for (      Entry<String,Class> entry : entities.entrySet()) {
        String n=entry.getKey();
        Class c=entry.getValue();
        NodeType type=new NodeType(n,c);
        String iconSrc=type.getIconSrc();
        String shortName=type.getKey();
        nodeClassList.add(new NodeClassEntry(c.getName(),iconSrc,nodesHistogram.get(shortName)));
      }
      return nodeClassList;
    }
  }
);
  allNodesTable.setDataProvider(new DataProvider(){
    @Override public List<StructrNode> getData(){
      return getAllNodes();
    }
  }
);
}
