{
  if (deleteNodeForm.isValid()) {
    final String parent=deleteNodeForm.getFieldValue(PARENT_NODE_ID_KEY);
    final String recursive=deleteNodeForm.getFieldValue(RECURSIVE_KEY);
    StructrNode parentNode=null;
    try {
      final Command transactionCommand=Services.createCommand(TransactionCommand.class);
      parentNode=(StructrNode)transactionCommand.execute(new StructrTransaction(){
        @Override public Object execute() throws Throwable {
          Command deleteNode=Services.createCommand(DeleteNodeCommand.class);
          Object result=deleteNode.execute(getNodeId(),parent,recursive,user);
          transactionCommand.setExitCode(deleteNode.getExitCode());
          transactionCommand.setErrorMessage(deleteNode.getErrorMessage());
          return result;
        }
      }
);
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put(RENDER_MODE_KEY,renderMode);
      if (Command.exitCode.SUCCESS.equals(transactionCommand.getExitCode())) {
        removeTreeNode(getNodeId().toString());
        errorMsg=null;
        okMsg="Node " + getNodeId() + " successfully deleted";
        parameters.put(OK_MSG_KEY,okMsg);
      }
 else {
        okMsg=null;
        errorMsg=transactionCommand.getErrorMessage();
        parameters.put(ERROR_MSG_KEY,errorMsg);
      }
      if (parentNode != null) {
        parameters.put(NODE_ID_KEY,String.valueOf(parentNode.getId()));
        setRedirect(getRedirectPage(parentNode,this),parameters);
      }
    }
 catch (    TransactionFailureException tfe) {
      logger.log(Level.WARNING,"Node {0} could not be deleted.",getNodeId());
      okMsg=null;
      errorMsg="Node " + getNodeId() + " could not be deleted. "+ tfe.getMessage();
      return true;
    }
  }
  if (!deleteNodeForm.isValid()) {
    deleteNodeFormIsInvalid="true";
    return true;
  }
  return false;
}
