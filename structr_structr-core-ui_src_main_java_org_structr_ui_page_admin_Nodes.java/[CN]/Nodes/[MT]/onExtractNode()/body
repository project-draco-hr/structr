{
  if (extractNodeForm.isValid()) {
    Object targetNodeId;
    String fieldValue=extractNodeForm.getFieldValue(TARGET_NODE_ID_KEY);
    if (fieldValue != null && !(fieldValue.isEmpty())) {
      targetNodeId=fieldValue;
    }
 else {
      targetNodeId=getNodeId();
    }
    Command findNode=Services.createCommand(FindNodeCommand.class);
    final StructrNode targetNode=(StructrNode)findNode.execute(user,targetNodeId);
    final Command transactionCommand=Services.createCommand(TransactionCommand.class);
    transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command extractFile=Services.createCommand(ExtractFileCommand.class);
        extractFile.execute(getNodeId(),targetNode,user);
        transactionCommand.setExitCode(extractFile.getExitCode());
        transactionCommand.setErrorMessage(extractFile.getErrorMessage());
        return null;
      }
    }
);
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put(NODE_ID_KEY,String.valueOf(getNodeId()));
    parameters.put(RENDER_MODE_KEY,renderMode);
    if (transactionCommand.getExitCode().equals(Command.exitCode.FAILURE)) {
      errorMsg=transactionCommand.getErrorMessage();
      parameters.put(ERROR_MSG_KEY,errorMsg);
    }
 else {
      okMsg="Node extracted to " + targetNodeId;
      parameters.put(OK_MSG_KEY,okMsg);
    }
    setRedirect(getRedirectPage(node),parameters);
  }
  if (!extractNodeForm.isValid()) {
    extractNodeFormIsInvalid="true";
    return true;
  }
  return false;
}
