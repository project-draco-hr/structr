{
  StructrNode s=null;
  if (uploadForm.isValid()) {
    List<Field> fieldList=(List<Field>)uploadForm.getFieldList();
    for (    Field f : fieldList) {
      if (!(f instanceof FileField)) {
        break;
      }
      final FileField fileField=(FileField)f;
      final FileItem fileFromUpload=fileField.getFileItem();
      final String name=fileFromUpload.getName();
      final String mimeType=fileFromUpload.getContentType();
      if (name != null && !("".equals(name))) {
        Command transaction=Services.createCommand(TransactionCommand.class);
        s=(StructrNode)transaction.execute(new StructrTransaction(){
          @Override public Object execute() throws Throwable {
            Command createNode=Services.createCommand(CreateNodeCommand.class);
            Command createRel=Services.createCommand(CreateRelationshipCommand.class);
            String mimeProperty=null;
            if (mimeType != null && mimeType.startsWith("image")) {
              mimeProperty="Image";
            }
 else {
              mimeProperty="File";
            }
            StructrNode newNode=(StructrNode)createNode.execute(new NodeAttribute(StructrNode.TYPE_KEY,mimeProperty),user);
            String relativeFilePath=newNode.getId() + "_" + System.currentTimeMillis();
            String path=FILES_PATH + "/" + relativeFilePath;
            long size=fileFromUpload.getSize();
            java.io.File fileOnDisk=new java.io.File(path);
            String fileUrl="file:///" + fileOnDisk.getPath();
            try {
              fileFromUpload.write(fileOnDisk);
            }
 catch (            Exception e) {
              okMsg="";
              errorMsg="Error while write uploaded file(s) to disk: " + e.getStackTrace();
            }
            Date now=new Date();
            newNode.setProperty(StructrNode.NAME_KEY,name);
            newNode.setProperty(StructrNode.CREATED_DATE_KEY,now);
            newNode.setProperty(StructrNode.LAST_MODIFIED_DATE_KEY,now);
            newNode.setProperty(File.CONTENT_TYPE_KEY,mimeType);
            newNode.setProperty(File.SIZE_KEY,String.valueOf(size));
            newNode.setProperty(File.URL_KEY,fileUrl);
            newNode.setProperty(File.RELATIVE_FILE_PATH_KEY,relativeFilePath);
            StructrNode parentNode=node;
            createRel.execute(parentNode,newNode,RelType.HAS_CHILD);
            newNodeForm.clearValues();
            addTreeNode(newNode,getCurrentTreeNode());
            return (newNode);
          }
        }
);
      }
 else {
        warnMsg="No file was selected.";
      }
    }
    okMsg="New " + s.getType() + " node "+ s.getName()+ " has been created.";
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put(NODE_ID_KEY,String.valueOf(getNodeId()));
    parameters.put(RENDER_MODE_KEY,renderMode);
    parameters.put(OK_MSG_KEY,okMsg);
    setRedirect(getRedirectPage(node),parameters);
  }
  if (!uploadForm.isValid()) {
    uploadFormIsInvalid="true";
    return true;
  }
  return false;
}
