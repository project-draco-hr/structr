{
  onPreviewReport();
  final String reportFileName=reportName.getValue() + ".csv";
  Map methodCache=new HashMap<Object,Object>();
  List<String[]> resultList=new ArrayList<String[]>();
  List<String> keys=new ArrayList<String>();
  for (  Column c : columns) {
    keys.add(c.getName());
  }
  resultList.add((keys.toArray(new String[keys.size()])));
  if (reportResults == null) {
    return false;
  }
  for (  StructrNode s : reportResults) {
    List<String> values=new ArrayList<String>();
    for (    Column c : columns) {
      Object value=PropertyUtils.getValue(s,c.getName(),methodCache);
      if (value != null) {
        values.add(value.toString());
      }
 else {
        values.add("");
      }
    }
    String[] sa=values.toArray(new String[values.size()]);
    resultList.add(sa);
  }
  final File reportFile=new File("/tmp/" + reportFileName);
  CSVWriter csvw=null;
  try {
    char sepChar;
    char quoteChar;
    char escChar;
    String sepFieldValue=reportForm.getFieldValue(CSV_SEPARATOR_CHAR);
    String quoteFieldValue=reportForm.getFieldValue(CSV_QUOTE_CHAR);
    String escFieldValue=reportForm.getFieldValue(CSV_ESCAPE_CHAR);
    if (sepFieldValue != null && !(sepFieldValue.isEmpty())) {
      sepChar=sepFieldValue.charAt(0);
      if (quoteFieldValue != null && !(quoteFieldValue.isEmpty())) {
        quoteChar=quoteFieldValue.charAt(0);
        if (escFieldValue != null && !(escFieldValue.isEmpty())) {
          escChar=escFieldValue.charAt(0);
          csvw=new CSVWriter(new FileWriter(reportFile),sepChar,quoteChar,escChar);
        }
 else {
          csvw=new CSVWriter(new FileWriter(reportFile),sepChar,quoteChar);
        }
      }
 else {
        csvw=new CSVWriter(new FileWriter(reportFile),sepChar);
      }
    }
    csvw.writeAll(resultList);
    csvw.flush();
    csvw.close();
    StructrNode s=null;
    Command transaction=Services.createCommand(TransactionCommand.class);
    s=(StructrNode)transaction.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command createNode=Services.createCommand(CreateNodeCommand.class);
        Command createRel=Services.createCommand(CreateRelationshipCommand.class);
        StructrNode newNode=(StructrNode)createNode.execute(new NodeAttribute(StructrNode.TYPE_KEY,File.class.getSimpleName()),user);
        String relativeFilePath=newNode.getId() + "_" + System.currentTimeMillis();
        String targetPath=FILES_PATH + "/" + relativeFilePath;
        String fileUrl="file:///" + reportFile.getPath();
        FileUtils.moveFile(reportFile,new File(targetPath));
        Date now=new Date();
        newNode.setProperty(StructrNode.NAME_KEY,reportFileName);
        newNode.setProperty(StructrNode.CREATED_DATE_KEY,now);
        newNode.setProperty(StructrNode.LAST_MODIFIED_DATE_KEY,now);
        newNode.setProperty(org.structr.core.entity.File.CONTENT_TYPE_KEY,"text/csv");
        newNode.setProperty(org.structr.core.entity.File.SIZE_KEY,String.valueOf(reportFile.length()));
        newNode.setProperty(org.structr.core.entity.File.URL_KEY,fileUrl);
        newNode.setProperty(org.structr.core.entity.File.RELATIVE_FILE_PATH_KEY,relativeFilePath);
        StructrNode parentNode=user;
        createRel.execute(parentNode,newNode,RelType.HAS_CHILD);
        return newNode;
      }
    }
);
  }
 catch (  IOException ex) {
    Logger.getLogger(Report.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    if (csvw != null) {
      try {
        csvw.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  return false;
}
