{
  List<LineString> result=new ArrayList<LineString>();
  int index=0;
  while (index < edges.size()) {
    LineString ls=(LineString)edges.get(index);
    Coordinate key=ls.getCoordinateN(0);
    List<LineString> nodeList=nodes.get(key);
    if (nodeList == null) {
      index++;
      continue;
    }
 else     if (!nodeList.contains(ls)) {
      index++;
      continue;
    }
    removeFromHash(nodes,ls);
    Coordinate key2=ls.getCoordinateN(ls.getNumPoints() - 1);
    List<LineString> nodeList2=nodes.get(key2);
    if ((nodeList.size() == 0) && (nodeList2.size() == 0)) {
      result.add(ls);
      index++;
      continue;
    }
    if (nodeList.size() > 0) {
      LineString ls2=getLongest(nodeList);
      ls=merge(ls,ls2);
      removeFromHash(nodes,ls2);
    }
    if (nodeList2.size() > 0) {
      LineString ls2=getLongest(nodeList2);
      ls=merge(ls,ls2);
      removeFromHash(nodes,ls2);
    }
    edges.set(index,ls);
    putInNodeHash(ls.getCoordinateN(0),ls,nodes);
    putInNodeHash(ls.getCoordinateN(ls.getNumPoints() - 1),ls,nodes);
  }
  return result;
}
