{
  needsOrdering=true;
  try {
    String label=(String)symbolizer.getLabel().evaluate(feature,String.class);
    if (label == null)     return;
    label=label.trim();
    if (label.length() == 0) {
      return;
    }
    double priorityValue=getPriority(symbolizer,feature);
    boolean group=getBooleanOption(symbolizer,TextSymbolizer.GROUP_KEY,false);
    if (!(group)) {
      LabelCacheItem item=buildLabelCacheItem(layerId,symbolizer,feature,shape,scaleRange,label,priorityValue);
      labelCacheNonGrouped.add(item);
    }
 else {
      LabelCacheItem lci=(LabelCacheItem)labelCache.get(label);
      if (lci == null) {
        lci=buildLabelCacheItem(layerId,symbolizer,feature,shape,scaleRange,label,priorityValue);
        labelCache.put(label,lci);
      }
 else {
        if ((symbolizer.getPriority() != null) && (!(symbolizer.getPriority() instanceof Literal)))         lci.setPriority(lci.getPriority() + priorityValue);
        lci.getGeoms().add(shape.getGeometry());
      }
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.FINE,"Error adding label to the label cache",e);
  }
}
