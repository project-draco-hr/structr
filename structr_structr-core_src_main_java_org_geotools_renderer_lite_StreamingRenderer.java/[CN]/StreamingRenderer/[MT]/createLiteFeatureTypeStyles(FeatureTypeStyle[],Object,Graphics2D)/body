{
  ArrayList<LiteFeatureTypeStyle> result=new ArrayList<LiteFeatureTypeStyle>();
  List<Rule> rules;
  List<Rule> ruleList;
  List<Rule> elseRuleList;
  LiteFeatureTypeStyle lfts;
  BufferedImage image;
  final int length=featureStyles.length;
  for (int i=0; i < length; i++) {
    FeatureTypeStyle fts=featureStyles[i];
    if (typeDescription == null || typeDescription.toString().indexOf(fts.getFeatureTypeName()) == -1) {
      continue;
    }
    rules=fts.rules();
    ruleList=new ArrayList<Rule>();
    elseRuleList=new ArrayList<Rule>();
    for (    Rule r : rules) {
      if (isWithInScale(r)) {
        if (r.isElseFilter()) {
          elseRuleList.add(r);
        }
 else {
          ruleList.add(r);
        }
      }
    }
    if ((ruleList.size() == 0) && (elseRuleList.size() == 0)) {
      continue;
    }
    if (result.size() == 0 || !isOptimizedFTSRenderingEnabled()) {
      lfts=new LiteFeatureTypeStyle(graphics,ruleList,elseRuleList);
    }
 else {
      lfts=new LiteFeatureTypeStyle(new DelayedBackbufferGraphic(graphics,screenSize),ruleList,elseRuleList);
    }
    result.add(lfts);
  }
  return result;
}
