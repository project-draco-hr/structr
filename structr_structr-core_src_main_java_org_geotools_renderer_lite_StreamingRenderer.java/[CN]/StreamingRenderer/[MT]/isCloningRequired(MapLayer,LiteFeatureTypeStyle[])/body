{
  final Set<Key> hints=layer.getFeatureSource().getSupportedHints();
  if (!hints.contains(Hints.FEATURE_DETACHED)) {
    return true;
  }
  StyleAttributeExtractor extractor=new StyleAttributeExtractor();
  FeatureType featureType=layer.getFeatureSource().getSchema();
  Set<String> plainGeometries=new java.util.HashSet<String>();
  Set<String> txGeometries=new java.util.HashSet<String>();
  for (  LiteFeatureTypeStyle lft : lfts) {
    for (    Rule r : lft.ruleList) {
      for (      Symbolizer s : r.symbolizers()) {
        if (s.getGeometry() == null) {
          String attribute=featureType.getGeometryDescriptor().getName().getLocalPart();
          if (txGeometries.contains(attribute)) {
            return true;
          }
          plainGeometries.add(attribute);
        }
 else         if (s.getGeometry() instanceof PropertyName) {
          String attribute=((PropertyName)s.getGeometry()).getPropertyName();
          if (txGeometries.contains(attribute)) {
            return true;
          }
          plainGeometries.add(attribute);
        }
 else {
          Expression g=s.getGeometry();
          extractor.clear();
          g.accept(extractor,null);
          Set<String> attributes=extractor.getAttributeNameSet();
          for (          String attribute : attributes) {
            if (plainGeometries.contains(attribute)) {
              return true;
            }
            if (txGeometries.contains(attribute)) {
              return true;
            }
            txGeometries.add(attribute);
          }
        }
      }
    }
  }
  return false;
}
