{
  String type=Location.class.getSimpleName();
  String encodedAddress;
  try {
    encodedAddress=URLEncoder.encode(address,"UTF-8");
  }
 catch (  UnsupportedEncodingException ex) {
    logger.log(Level.WARNING,"Unsupported Encoding",ex);
    return null;
  }
  Document xmlDoc;
  try {
    String protocol="xml";
    URL mapsUrl=new URL("http://maps.google.com/maps/api/geocode/" + protocol + "?sensor=false&address="+ encodedAddress);
    HttpURLConnection connection=(HttpURLConnection)mapsUrl.openConnection();
    connection.connect();
    SAXReader reader=new SAXReader();
    BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    xmlDoc=reader.read(rd);
    connection.disconnect();
    rd.close();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,"Connection to geocoding service failed",ioe);
    return null;
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,"Could not read result document",de);
    return null;
  }
  Element root=xmlDoc.getRootElement();
  String status=root.element("status").getTextTrim();
  boolean ok="OK".equals(status);
  if (!ok) {
    logger.log(Level.WARNING,"Status not OK for address {0}: {1}",new Object[]{address,status});
    return null;
  }
 else {
    String latitude=root.element("result").element("geometry").element("location").element("lat").getTextTrim();
    String longitude=root.element("result").element("geometry").element("location").element("lng").getTextTrim();
    double lat=Double.parseDouble(latitude);
    double lon=Double.parseDouble(longitude);
    logger.log(Level.INFO,"Coordinates found for address {0}: lat= {1}, lon={2}",new Object[]{address,lat,lon});
    final Map<String,Object> props=new HashMap<String,Object>();
    props.put(AbstractNode.Key.type.name(),Location.class.getSimpleName());
    props.put(Location.Key.latitude.name(),latitude);
    props.put(Location.Key.longitude.name(),longitude);
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        return Services.command(SecurityContext.getSuperUserInstance(),CreateNodeCommand.class).execute(props);
      }
    }
;
    Location location=(Location)Services.command(SecurityContext.getSuperUserInstance(),TransactionCommand.class).execute(transaction);
    return location;
  }
}
