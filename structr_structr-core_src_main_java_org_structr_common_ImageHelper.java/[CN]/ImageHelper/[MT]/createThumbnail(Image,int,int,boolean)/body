{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    long start=System.nanoTime();
    InputStream in=originalImage.getInputStream();
    BufferedImage source=null;
    try {
      source=ImageIO.read(in);
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Could not read original image {0} ({1})",new Object[]{originalImage.getName(),originalImage.getId()});
    }
 finally {
      if (in != null) {
        in.close();
      }
    }
    if (source != null) {
      int sourceWidth=source.getWidth();
      int sourceHeight=source.getHeight();
      originalImage.setWidth(sourceWidth);
      originalImage.setHeight(sourceHeight);
      float scaleX=1.0f * sourceWidth / maxWidth;
      float scaleY=1.0f * sourceHeight / maxHeight;
      float scale;
      if (crop) {
        scale=Math.min(scaleX,scaleY);
      }
 else {
        scale=Math.max(scaleX,scaleY);
      }
      if (scale > 1.0000f) {
        int destWidth=Math.max(3,Math.round(sourceWidth / scale));
        int destHeight=Math.max(3,Math.round(sourceHeight / scale));
        ResampleOp resampleOp=new ResampleOp(destWidth,destHeight);
        BufferedImage resampled=resampleOp.filter(source,null);
        BufferedImage result=null;
        if (crop) {
          int offsetX=Math.abs(maxWidth - destWidth) / 2;
          int offsetY=Math.abs(maxHeight - destHeight) / 2;
          logger.log(Level.FINE,"Offset and Size (x,y,w,h): {0},{1},{2},{3}",new Object[]{offsetX,offsetY,maxWidth,maxHeight});
          result=resampled.getSubimage(offsetX,offsetY,maxWidth,maxHeight);
          tn.setWidth(maxWidth);
          tn.setHeight(maxHeight);
        }
 else {
          result=resampled;
          tn.setWidth(destWidth);
          tn.setHeight(destHeight);
        }
        ImageIO.write(result,Thumbnail.FORMAT,baos);
      }
 else {
        ImageIO.write(source,Thumbnail.FORMAT,baos);
        tn.setWidth(sourceWidth);
        tn.setHeight(sourceHeight);
      }
    }
 else {
      logger.log(Level.WARNING,"Thumbnail could not be created");
      return null;
    }
    long end=System.nanoTime();
    long time=(end - start) / 1000000;
    logger.log(Level.FINE,"Thumbnail created. Reading, scaling and writing took {0} ms",time);
    tn.setBytes(baos.toByteArray());
    return tn;
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Error creating thumbnail");
  }
 finally {
    try {
      if (baos != null) {
        baos.close();
      }
    }
 catch (    Exception ignore) {
    }
  }
  return null;
}
