{
  List<Node> children=startNode.childNodes();
  int localIndex=0;
  for (  Node node : children) {
    String tag=node.nodeName();
    String type=CaseHelper.toUpperCamelCase(tag);
    String content=null;
    String id=null;
    StringBuilder classString=new StringBuilder();
    if (ArrayUtils.contains(ignoreElementNames,type)) {
      continue;
    }
    if (node instanceof Element) {
      Element el=((Element)node);
      Set<String> classes=el.classNames();
      for (      String cls : classes) {
        classString.append(cls).append(" ");
      }
      id=el.id();
    }
    if (type.equals("#data")) {
      type="Content";
      tag="";
      content=((DataNode)node).getWholeData();
      if (StringUtils.isBlank(content)) {
        continue;
      }
    }
    if (type.equals("#text")) {
      type="Content";
      tag="";
      content=((TextNode)node).text();
      if (StringUtils.isBlank(content)) {
        continue;
      }
    }
    List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
    if (content != null) {
      attrs.add(new NodeAttribute("content",content));
    }
    attrs.add(new NodeAttribute("tag",tag));
    if (StringUtils.isNotBlank(id)) {
      attrs.add(new NodeAttribute(PropertyView.Html + "id",id));
    }
    if (StringUtils.isNotBlank(classString.toString())) {
      attrs.add(new NodeAttribute(PropertyView.Html + "class",StringUtils.trim(classString.toString())));
    }
    for (    Attribute nodeAttr : node.attributes()) {
      attrs.add(new NodeAttribute(PropertyView.Html + nodeAttr.getKey(),nodeAttr.getValue()));
    }
    AbstractNode newNode=createNode(type,"New " + type + " "+ Math.random(),(NodeAttribute[])attrs.toArray(new NodeAttribute[attrs.size()]));
    linkNodes(parent,newNode,resourceId,localIndex);
    createChildNodes(node,newNode,resourceId);
    localIndex++;
  }
}
