{
  if (basePath.equals(newPath)) {
    return "./";
  }
  String[] absoluteAncestors=basePath.split("/");
  String[] relativeAncestors=newPath.split("/");
  int length=(absoluteAncestors.length < relativeAncestors.length) ? absoluteAncestors.length : relativeAncestors.length;
  int lastCommonRoot=-1;
  int i;
  for (i=0; i < length; i++) {
    if (absoluteAncestors[i].equals(relativeAncestors[i])) {
      lastCommonRoot=i;
    }
 else {
      break;
    }
  }
  if (lastCommonRoot != -1) {
    StringBuilder newRelativePath=new StringBuilder();
    for (i=lastCommonRoot + 1; i < absoluteAncestors.length; i++) {
      if (absoluteAncestors[i].length() > 0) {
        newRelativePath.append("../");
      }
    }
    for (i=lastCommonRoot + 1; i < relativeAncestors.length - 1; i++) {
      newRelativePath.append(relativeAncestors[i]).append("/");
    }
    newRelativePath.append(relativeAncestors[relativeAncestors.length - 1]);
    return newRelativePath.toString();
  }
  return "./";
}
