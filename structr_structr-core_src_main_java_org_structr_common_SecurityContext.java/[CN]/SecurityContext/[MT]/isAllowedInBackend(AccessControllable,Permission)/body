{
  User user=getUser();
  if (node == null) {
    return false;
  }
  if ((user != null) && (user instanceof SuperUser)) {
    return true;
  }
switch (permission) {
case AccessControl:
    if (user == null) {
      return false;
    }
  if (user instanceof SuperUser) {
    return true;
  }
if (node.equals(user)) {
  return true;
}
StructrRelationship r=null;
if (user.equals(node.getOwnerNode())) {
return true;
}
r=node.getSecurityRelationship(user);
if ((r != null) && r.isAllowed(StructrRelationship.Key.accessControl.name())) {
return true;
}
return false;
case CreateNode:
return node.hasPermission(StructrRelationship.Key.createNode.name(),user);
case CreateRelationship:
return node.hasPermission(StructrRelationship.Key.addRelationship.name(),user);
case DeleteNode:
return node.hasPermission(StructrRelationship.Key.deleteNode.name(),user);
case DeleteRelationship:
return node.hasPermission(StructrRelationship.Key.removeRelationship.name(),user);
case EditProperty:
return node.hasPermission(StructrRelationship.Key.editProperties.name(),user);
case Execute:
return node.hasPermission(StructrRelationship.Key.execute.name(),user);
case Read:
return node.hasPermission(StructrRelationship.Key.read.name(),user);
case ShowTree:
return node.hasPermission(StructrRelationship.Key.showTree.name(),user);
case Write:
return node.hasPermission(StructrRelationship.Key.write.name(),user);
}
return (false);
}
