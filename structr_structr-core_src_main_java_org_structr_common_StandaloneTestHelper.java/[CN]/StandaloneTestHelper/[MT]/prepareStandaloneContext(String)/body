{
  Map<String,Object> context=new Hashtable<String,Object>();
  context.put(Services.DATABASE_PATH_IDENTIFIER,databasePath);
  context.put(Services.ENTITY_PACKAGES_IDENTIFIER,"org.structr.core.entity");
  context.put(Services.STRUCTR_PAGE_PREDICATE,new Predicate(){
    @Override public boolean evaluate(    Object obj){
      return (false);
    }
  }
);
  try {
    Class.forName("javax.servlet.ServletContext");
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  context.put(Services.SERVLET_CONTEXT,new ServletContext(){
    private Vector emptyList=new Vector();
    private Set emptySet=new LinkedHashSet();
    @Override public String getContextPath(){
      return ("/dummy");
    }
    @Override public ServletContext getContext(    String uripath){
      return (this);
    }
    @Override public int getMajorVersion(){
      return (0);
    }
    @Override public int getMinorVersion(){
      return (0);
    }
    @Override public String getMimeType(    String file){
      return ("application/octet-stream");
    }
    @Override public Set getResourcePaths(    String path){
      return (emptySet);
    }
    @Override public URL getResource(    String path) throws MalformedURLException {
      return (null);
    }
    @Override public InputStream getResourceAsStream(    String path){
      return (null);
    }
    @Override public RequestDispatcher getRequestDispatcher(    String path){
      return (null);
    }
    @Override public RequestDispatcher getNamedDispatcher(    String name){
      return (null);
    }
    @Override public Servlet getServlet(    String name) throws ServletException {
      return (null);
    }
    @Override public Enumeration getServlets(){
      return (emptyList.elements());
    }
    @Override public Enumeration getServletNames(){
      return (emptyList.elements());
    }
    @Override public void log(    String msg){
    }
    @Override public void log(    Exception exception,    String msg){
    }
    @Override public void log(    String message,    Throwable throwable){
    }
    @Override public String getRealPath(    String path){
      return ("/temp/" + path);
    }
    @Override public String getServerInfo(){
      return ("DummyServer");
    }
    @Override public String getInitParameter(    String name){
      return (null);
    }
    @Override public Enumeration getInitParameterNames(){
      return (emptyList.elements());
    }
    @Override public Object getAttribute(    String name){
      return (null);
    }
    @Override public Enumeration getAttributeNames(){
      return (emptyList.elements());
    }
    @Override public void setAttribute(    String name,    Object object){
    }
    @Override public void removeAttribute(    String name){
    }
    @Override public String getServletContextName(){
      return ("DummyContext");
    }
  }
);
  return (context);
}
