{
  Map<String,Object> context=new Hashtable<String,Object>();
  context.put(Services.DATABASE_PATH,databasePath);
  try {
    Class.forName("javax.servlet.ServletContext");
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  context.put(Services.SERVLET_CONTEXT,new ServletContext(){
    private Vector emptyList=new Vector();
    private Set emptySet=new LinkedHashSet();
    @Override public String getContextPath(){
      return ("/dummy");
    }
    @Override public ServletContext getContext(    String uripath){
      return (this);
    }
    @Override public int getMajorVersion(){
      return (0);
    }
    @Override public int getMinorVersion(){
      return (0);
    }
    @Override public String getMimeType(    String file){
      return ("application/octet-stream");
    }
    @Override public Set getResourcePaths(    String path){
      return (emptySet);
    }
    @Override public URL getResource(    String path) throws MalformedURLException {
      return (null);
    }
    @Override public InputStream getResourceAsStream(    String path){
      return (null);
    }
    @Override public RequestDispatcher getRequestDispatcher(    String path){
      return (null);
    }
    @Override public RequestDispatcher getNamedDispatcher(    String name){
      return (null);
    }
    @Override public Servlet getServlet(    String name) throws ServletException {
      return (null);
    }
    @Override public Enumeration getServlets(){
      return (emptyList.elements());
    }
    @Override public Enumeration getServletNames(){
      return (emptyList.elements());
    }
    @Override public void log(    String msg){
    }
    @Override public void log(    Exception exception,    String msg){
    }
    @Override public void log(    String message,    Throwable throwable){
    }
    @Override public String getRealPath(    String path){
      return ("/temp/" + path);
    }
    @Override public String getServerInfo(){
      return ("DummyServer");
    }
    @Override public String getInitParameter(    String name){
      return (null);
    }
    @Override public Enumeration getInitParameterNames(){
      return (emptyList.elements());
    }
    @Override public Object getAttribute(    String name){
      return (null);
    }
    @Override public Enumeration getAttributeNames(){
      return (emptyList.elements());
    }
    @Override public void setAttribute(    String name,    Object object){
    }
    @Override public void removeAttribute(    String name){
    }
    @Override public String getServletContextName(){
      return ("DummyContext");
    }
    @Override public int getEffectiveMajorVersion(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public int getEffectiveMinorVersion(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public boolean setInitParameter(    String string,    String string1){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Dynamic addServlet(    String string,    String string1){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Dynamic addServlet(    String string,    Servlet srvlt){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Dynamic addServlet(    String string,    Class<? extends Servlet> type){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public <T extends Servlet>T createServlet(    Class<T> type) throws ServletException {
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public ServletRegistration getServletRegistration(    String string){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Map<String,? extends ServletRegistration> getServletRegistrations(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public FilterRegistration.Dynamic addFilter(    String string,    String string1){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public FilterRegistration.Dynamic addFilter(    String string,    Filter filter){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public FilterRegistration.Dynamic addFilter(    String string,    Class<? extends Filter> type){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public <T extends Filter>T createFilter(    Class<T> type) throws ServletException {
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public FilterRegistration getFilterRegistration(    String string){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Map<String,? extends FilterRegistration> getFilterRegistrations(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public SessionCookieConfig getSessionCookieConfig(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public void setSessionTrackingModes(    Set<SessionTrackingMode> set){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Set<SessionTrackingMode> getDefaultSessionTrackingModes(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public Set<SessionTrackingMode> getEffectiveSessionTrackingModes(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public void addListener(    String string){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public <T extends EventListener>void addListener(    T t){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public void addListener(    Class<? extends EventListener> type){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public <T extends EventListener>T createListener(    Class<T> type) throws ServletException {
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public JspConfigDescriptor getJspConfigDescriptor(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public ClassLoader getClassLoader(){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public void declareRoles(    String... strings){
      throw new UnsupportedOperationException("Not supported yet.");
    }
  }
);
  return (context);
}
