{
  logger.log(Level.INFO,"Servlet context created");
  Map<String,Object> context=new ConcurrentHashMap<String,Object>(20,0.9f,8);
  ServletContext servletContext=sce.getServletContext();
  String configFilePath=servletContext.getInitParameter(Services.CONFIG_FILE_PATH);
  context.put(Services.CONFIG_FILE_PATH,configFilePath);
  context.put(Services.SERVLET_CONTEXT,servletContext);
  try {
    Properties properties=new Properties();
    properties.load(new FileInputStream(configFilePath));
    String configuredServices=properties.getProperty(Services.CONFIGURED_SERVICES);
    logger.log(Level.INFO,"Config file configured services: {0}",configuredServices);
    String appTitle=properties.getProperty(Services.APPLICATION_TITLE);
    logger.log(Level.INFO,"Config file application title: {0}",appTitle);
    String tmpPath=properties.getProperty(Services.TMP_PATH);
    logger.log(Level.INFO,"Config file temp path: {0}",tmpPath);
    String basePath=properties.getProperty(Services.BASE_PATH);
    logger.log(Level.INFO,"Config file base path: {0}",basePath);
    String databasePath=properties.getProperty(Services.DATABASE_PATH);
    logger.log(Level.INFO,"Config file database path: {0}",databasePath);
    String filesPath=properties.getProperty(Services.FILES_PATH);
    logger.log(Level.INFO,"Config file files path: {0}",filesPath);
    String modulesPath=properties.getProperty(Services.MODULES_PATH);
    logger.log(Level.INFO,"Config file modules path: {0}",modulesPath);
    String serverIp=properties.getProperty(Services.SERVER_IP);
    logger.log(Level.INFO,"Config file server IP: {0}",serverIp);
    String tcpPort=properties.getProperty(Services.TCP_PORT);
    logger.log(Level.INFO,"Config file TCP port: {0}",tcpPort);
    String udpPort=properties.getProperty(Services.UDP_PORT);
    logger.log(Level.INFO,"Config file UDP port: {0}",udpPort);
    String superuserUsername=properties.getProperty(Services.SUPERUSER_USERNAME);
    logger.log(Level.INFO,"Config file superuser username: {0}",superuserUsername);
    String superuserPassword=properties.getProperty(Services.SUPERUSER_PASSWORD);
    logger.log(Level.INFO,"Config file superuser password: {0}",superuserPassword);
    if (configuredServices != null) {
      context.put(Services.CONFIGURED_SERVICES,configuredServices);
    }
    if (appTitle != null) {
      context.put(Services.APPLICATION_TITLE,appTitle);
    }
    if (tmpPath != null) {
      context.put(Services.TMP_PATH,tmpPath);
    }
    if (basePath != null) {
      context.put(Services.BASE_PATH,basePath);
    }
    if (databasePath != null) {
      context.put(Services.DATABASE_PATH,databasePath);
    }
    if (filesPath != null) {
      context.put(Services.FILES_PATH,filesPath);
    }
    if (modulesPath != null) {
      context.put(Services.MODULES_PATH,modulesPath);
    }
    if (tcpPort != null) {
      context.put(Services.TCP_PORT,tcpPort);
    }
    if (serverIp != null) {
      context.put(Services.SERVER_IP,serverIp);
    }
    if (udpPort != null) {
      context.put(Services.UDP_PORT,udpPort);
    }
    if (superuserUsername != null) {
      context.put(Services.SUPERUSER_USERNAME,superuserUsername);
    }
    if (superuserPassword != null) {
      context.put(Services.SUPERUSER_PASSWORD,superuserPassword);
    }
    for (    String name : properties.stringPropertyNames()) {
      if (!context.containsKey(name)) {
        context.put(name,properties.getProperty(name));
      }
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Could not inititialize all values");
  }
  Services.initialize(context);
  logger.log(Level.INFO,"structr application context initialized (structr started successfully)");
}
