{
  Command indexCommand=Services.command(SecurityContext.getSuperUserInstance(),IndexNodeCommand.class);
  long transactionKey=transactionKeyMap.get(Thread.currentThread());
  try {
    ErrorBuffer errorBuffer=new ErrorBuffer();
    boolean hasError=false;
    Map<Node,Map<String,Object>> removedProperties=new LinkedHashMap<Node,Map<String,Object>>();
    SecurityContext securityContext=SecurityContext.getSuperUserInstance();
    StructrNodeFactory factory=new StructrNodeFactory(securityContext);
    Set<AbstractNode> modifiedNodes=new LinkedHashSet<AbstractNode>();
    Set<AbstractNode> createdNodes=new LinkedHashSet<AbstractNode>();
    Set<StructrRelationship> createdRels=new LinkedHashSet<StructrRelationship>();
    Set<StructrRelationship> deletedRels=new LinkedHashSet<StructrRelationship>();
    begin(securityContext,transactionKey,errorBuffer);
    for (    PropertyEntry<Node> entry : data.removedNodeProperties()) {
      Node node=entry.entity();
      Map<String,Object> propertyMap=removedProperties.get(node);
      if (propertyMap == null) {
        propertyMap=new LinkedHashMap<String,Object>();
        removedProperties.put(node,propertyMap);
      }
      propertyMap.put(entry.key(),entry.previouslyCommitedValue());
    }
    for (    Node node : data.createdNodes()) {
      AbstractNode entity=factory.createNode(securityContext,node);
      hasError|=graphObjectCreated(securityContext,transactionKey,errorBuffer,entity);
      createdNodes.add(entity);
    }
    for (    Relationship rel : data.createdRelationships()) {
      StructrRelationship relationship=new StructrRelationship(securityContext,rel);
      hasError|=relationshipCreated(securityContext,transactionKey,errorBuffer,relationship);
      createdRels.add(relationship);
    }
    for (    Relationship rel : data.deletedRelationships()) {
      StructrRelationship relationship=new StructrRelationship(securityContext,rel);
      hasError|=relationshipDeleted(securityContext,transactionKey,errorBuffer,relationship);
      deletedRels.add(relationship);
    }
    for (    Node node : data.deletedNodes()) {
      hasError|=graphObjectDeleted(securityContext,transactionKey,errorBuffer,node.getId(),removedProperties.get(node));
    }
    for (    PropertyEntry<Node> entry : data.assignedNodeProperties()) {
      AbstractNode entity=factory.createNode(securityContext,entry.entity());
      String key=entry.key();
      Object value=entry.value();
      PropertyValidator validator=EntityContext.getPropertyValidator(securityContext,entity.getClass(),key);
      if (validator != null) {
        logger.log(Level.FINE,"Using validator of type {0} for property {1}",new Object[]{validator.getClass().getSimpleName(),key});
        Value parameter=EntityContext.getPropertyValidationParameter(entity.getClass(),key);
        hasError|=!(validator.isValid(key,value,parameter,errorBuffer));
      }
      hasError|=propertyModified(securityContext,transactionKey,errorBuffer,entity,key,entry.previouslyCommitedValue(),value);
      indexCommand.execute(entity,key);
      modifiedNodes.add(entity);
    }
    for (    AbstractNode node : modifiedNodes) {
      if (!createdNodes.contains(node)) {
        hasError|=graphObjectModified(securityContext,transactionKey,errorBuffer,node);
      }
    }
    hasError|=commit(securityContext,transactionKey,errorBuffer);
    if (hasError) {
      throw new FrameworkException(422,errorBuffer);
    }
  }
 catch (  FrameworkException fex) {
    exceptionMap.put(transactionKey,fex);
    throw new IllegalStateException("Rollback");
  }
  return transactionKey;
}
