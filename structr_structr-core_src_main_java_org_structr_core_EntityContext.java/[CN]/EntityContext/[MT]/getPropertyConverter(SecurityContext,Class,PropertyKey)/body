{
  Class clazz=getAggregatedPropertyConverterMapForType(type).get(propertyKey);
  if (clazz == null) {
    Map<PropertyKey,Class<? extends PropertyConverter>> converterMap=null;
    Class localType=type;
    while ((clazz == null) && !localType.equals(Object.class)) {
      converterMap=getPropertyConverterMapForType(localType);
      clazz=converterMap.get(propertyKey);
      if (clazz == null) {
        for (        Class interfaceClass : getInterfacesForType(localType)) {
          clazz=getPropertyConverterMapForType(interfaceClass).get(propertyKey);
          if (clazz != null) {
            break;
          }
        }
      }
      localType=localType.getSuperclass();
    }
    getAggregatedPropertyConverterMapForType(type).put(propertyKey,clazz);
  }
  PropertyConverter propertyConverter=null;
  if (clazz != null) {
    try {
      propertyConverter=(PropertyConverter)clazz.newInstance();
      propertyConverter.setSecurityContext(securityContext);
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"Unable to instantiate property PropertyConverter {0}: {1}",new Object[]{clazz.getName(),t.getMessage()});
    }
  }
  return propertyConverter;
}
