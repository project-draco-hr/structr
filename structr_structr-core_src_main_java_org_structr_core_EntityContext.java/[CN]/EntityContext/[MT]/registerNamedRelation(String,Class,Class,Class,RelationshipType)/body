{
  globalRelationshipNameMap.put(relationName,new NamedRelation(relationName,sourceType,destType,relType));
  globalRelationshipClassMap.put(combinedRelType(sourceType,destType,relType),relationshipEntityType);
  try {
    AbstractRelationship rel=(AbstractRelationship)relationshipEntityType.newInstance();
    PropertyKey startNodeIdentifierKey=rel.getStartNodeIdentifier();
    PropertyKey endNodeIdentifierKey=rel.getEndNodeIdentifier();
    if (startNodeIdentifierKey != null && endNodeIdentifierKey != null) {
      String startNodeIdentifier=startNodeIdentifierKey.name();
      String endNodeIdentifier=endNodeIdentifierKey.name();
      EntityContext.registerPropertyConverter(relationshipEntityType,startNodeIdentifier,RelationshipStartNodeIdProvider.class);
      EntityContext.registerPropertyConverter(relationshipEntityType,endNodeIdentifier,RelationshipEndNodeIdProvider.class);
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Unable to register start and/or end node provider for named relation.",t);
  }
}
