{
  List<DataContainer> transportSet=new LinkedList<DataContainer>();
  Set<RelationshipDataContainer> transportRelationships=new HashSet<RelationshipDataContainer>();
  int maxSize=4096;
  if (recursive) {
    List<AbstractNode> nodes=node.getAllChildren(user);
    for (    AbstractNode n : nodes) {
      DataContainer container;
      if (n instanceof File) {
        container=new FileNodeDataContainer(n);
      }
 else {
        container=new NodeDataContainer(n);
      }
      maxSize=Math.max(maxSize,container.getEstimatedSize());
      transportSet.add(container);
      List<StructrRelationship> rels=n.getOutgoingRelationships();
      for (      StructrRelationship r : rels) {
        AbstractNode startNode=r.getStartNode();
        AbstractNode endNode=r.getEndNode();
        if (nodes.contains(startNode) && nodes.contains(endNode)) {
          transportRelationships.add(new RelationshipDataContainer(r));
        }
      }
    }
    transportSet.addAll(transportRelationships);
  }
 else {
    transportSet.add(new NodeDataContainer(node));
  }
  Log.set(Log.LEVEL_DEBUG);
  Client client=new Client(maxSize * 8,maxSize * 2);
  client.start();
  logger.log(Level.INFO,"KryoNet client started, buffer sizes {0}, {1}",new Object[]{maxSize * 8,maxSize * 2});
  Kryo kryo=client.getKryo();
  CloudService.registerClasses(kryo);
  try {
    client.connect(5000,remoteHost,remoteTcpPort,remoteUdpPort);
    logger.log(Level.INFO,"Connected to structr instance on {0} (tcp port: {1}, udp port: {2})",new Object[]{remoteHost,remoteTcpPort,remoteUdpPort});
    int size=transportSet.size();
    if (size < 16) {
      client.sendTCP(transportSet);
    }
 else {
      client.sendTCP(CloudService.BEGIN_TRANSACTION);
      for (      DataContainer container : transportSet) {
        client.sendTCP(container);
      }
      client.sendTCP(CloudService.END_TRANSACTION);
    }
    logger.log(Level.INFO,"Transport set with {0} nodes/relationships was sent",transportSet.size());
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,"Error while sending nodes to remote instance",ex);
  }
}
