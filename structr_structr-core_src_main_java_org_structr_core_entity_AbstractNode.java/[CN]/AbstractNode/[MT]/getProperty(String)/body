{
  Class type=this.getClass();
  Object value=null;
  if (EntityContext.getRelations(type).containsKey(key)) {
    DirectedRelationship rel=EntityContext.getRelations(type).get(key);
    if (rel != null) {
      return getTraversalResults(rel.getRelType(),rel.getDirection());
    }
  }
  if (isDirty) {
    value=properties.get(key);
  }
  if (key.equals(Key.isPublic.name()) && dbNode.hasProperty("public")) {
    final Object oldValue=dbNode.getProperty("public");
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        dbNode.setProperty(Key.isPublic.name(),oldValue);
        dbNode.removeProperty("public");
        return null;
      }
    }
;
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (transaction.getCause() != null) {
      logger.log(Level.WARNING,"Error while setting property",transaction.getCause());
    }
  }
  if ((key != null) && dbNode.hasProperty(key)) {
    value=dbNode.getProperty(key);
  }
  PropertyConverter converter=EntityContext.getPropertyConverter(securityContext,type,key);
  if (converter != null) {
    Value conversionValue=EntityContext.getPropertyConversionParameter(type,key);
    value=converter.convertForGetter(value,conversionValue);
  }
  return value;
}
