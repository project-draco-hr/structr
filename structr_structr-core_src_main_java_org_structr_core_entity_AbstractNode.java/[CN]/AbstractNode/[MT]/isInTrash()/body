{
  return (countIterableElements(traverseDepthFirst(RelType.HAS_CHILD,Direction.INCOMING,new Evaluator(){
    @Override public Evaluation evaluate(    Path path){
      Node node=path.endNode();
      if (node.hasProperty(Key.type.name()) && node.getProperty(Key.type.name()).equals("Trash")) {
        return (Evaluation.INCLUDE_AND_PRUNE);
      }
 else {
        return (Evaluation.EXCLUDE_AND_CONTINUE);
      }
    }
  }
)) > 0);
}
