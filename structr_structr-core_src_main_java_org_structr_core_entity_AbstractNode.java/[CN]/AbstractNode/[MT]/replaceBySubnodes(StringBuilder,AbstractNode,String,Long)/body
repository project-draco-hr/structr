{
  List<AbstractNode> callingNodeSubnodes=null;
  List<AbstractNode> callingNodeSubnodesAndLinkedNodes=null;
  template=startNode.getTemplate();
  AbstractNode callingNode=null;
  if (template != null) {
    callingNode=template.getCallingNode();
    if (callingNode != null) {
      callingNodeSubnodesAndLinkedNodes=callingNode.getSortedDirectChildAndLinkNodes();
      callingNodeSubnodes=callingNode.getSortedDirectChildNodes();
    }
  }
  Command findNode=Services.command(FindNodeCommand.class);
  int start=content.indexOf(NODE_KEY_PREFIX);
  while (start > -1) {
    int end=content.indexOf(NODE_KEY_SUFFIX,start + NODE_KEY_PREFIX.length());
    if (end < 0) {
      logger.log(Level.WARNING,"Node key suffix {0} not found in template {1}",new Object[]{NODE_KEY_SUFFIX,template.getName()});
      break;
    }
    String key=content.substring(start + NODE_KEY_PREFIX.length(),end);
    int indexOfComma=key.indexOf(",");
    int indexOfDot=key.indexOf(".");
    String templateKey=null;
    String methodKey=null;
    Template customTemplate=null;
    if (indexOfComma > 0) {
      String[] splitted=StringUtils.split(key,",");
      key=splitted[0];
      templateKey=splitted[1];
      if (StringUtils.isNotEmpty(templateKey)) {
        customTemplate=(Template)findNode.execute(user,this,new XPath(templateKey));
      }
    }
 else     if (indexOfDot > 0) {
      String[] splitted=StringUtils.split(key,".");
      key=splitted[0];
      methodKey=splitted[1];
    }
    StructrOutputStream replacement=new StructrOutputStream();
    if ((callingNode != null) && key.equals(CALLING_NODE_SUBNODES_KEY)) {
      for (      AbstractNode s : callingNodeSubnodes) {
        s.renderNode(replacement,startNode,editUrl,editNodeId);
      }
    }
 else     if ((callingNode != null) && key.equals(CALLING_NODE_SUBNODES_AND_LINKED_NODES_KEY)) {
      for (      AbstractNode s : callingNodeSubnodesAndLinkedNodes) {
        s.renderNode(replacement,startNode,editUrl,editNodeId);
      }
    }
 else {
      Object result=findNode.execute(user,this,key);
      if (result instanceof List) {
        List<AbstractNode> nodes=(List<AbstractNode>)result;
        if (nodes != null) {
          for (          AbstractNode s : nodes) {
            if (customTemplate != null) {
              s.setTemplate(customTemplate);
            }
            s.renderNode(replacement,startNode,editUrl,editNodeId);
          }
        }
      }
 else       if (result instanceof AbstractNode) {
        AbstractNode s=(AbstractNode)result;
        if (customTemplate != null) {
          s.setTemplate(customTemplate);
        }
        if (StringUtils.isNotEmpty(methodKey)) {
          methodKey=toGetter(methodKey);
          Method getter=null;
          try {
            getter=s.getClass().getMethod(methodKey);
            Object value=null;
            try {
              value=getter.invoke(s);
              replacement.append(value);
            }
 catch (            Exception ex) {
              logger.log(Level.FINE,"Cannot invoke method {0} on {1}",new Object[]{getter,s});
            }
          }
 catch (          Exception ex) {
            logger.log(Level.FINE,"Cannot invoke method {0}",methodKey);
          }
        }
 else {
          s.renderNode(replacement,startNode,editUrl,editNodeId);
        }
      }
 else {
        replacement.append(result);
      }
    }
    String replaceBy=replacement.toString();
    content.replace(start,end + NODE_KEY_SUFFIX.length(),replaceBy);
    start=content.indexOf(NODE_KEY_PREFIX,start + replaceBy.length() + 1);
  }
}
