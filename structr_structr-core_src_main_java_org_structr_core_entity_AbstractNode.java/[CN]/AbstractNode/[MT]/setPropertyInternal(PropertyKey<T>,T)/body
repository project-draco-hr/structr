{
  final Class type=this.getClass();
  if (key == null) {
    logger.log(Level.SEVERE,"Tried to set property with null key (action was denied)");
    throw new FrameworkException(type.getSimpleName(),new NullArgumentToken(base));
  }
  if (EntityContext.isReadOnlyProperty(type,key) || (EntityContext.isWriteOnceProperty(type,key) && (dbNode != null) && dbNode.hasProperty(key.dbName()))) {
    if (readOnlyPropertiesUnlocked) {
      readOnlyPropertiesUnlocked=false;
    }
 else {
      throw new FrameworkException(type.getSimpleName(),new ReadOnlyPropertyToken(key));
    }
  }
  PropertyGroup propertyGroup=EntityContext.getPropertyGroup(type,key);
  if (propertyGroup != null) {
    propertyGroup.setGroupedProperties(securityContext,value,this);
    return;
  }
  RelationClass rel=EntityContext.getRelationClass(type,key);
  if (rel != null) {
    if (value != null) {
      if (value instanceof Iterable) {
        Collection<GraphObject> collection=(Collection)rel.getNotion().getCollectionAdapterForSetter(securityContext).adapt(value);
        for (        GraphObject graphObject : collection) {
          if (graphObject instanceof AbstractNode) {
            rel.createRelationship(securityContext,this,(AbstractNode)graphObject);
          }
        }
      }
 else {
        GraphObject graphObject=(GraphObject)rel.getNotion().getAdapterForSetter(securityContext).adapt(value);
        if (graphObject instanceof AbstractNode) {
          rel.createRelationship(securityContext,this,(AbstractNode)graphObject);
        }
      }
    }
 else {
      Object existingValue=getProperty(key);
      if (existingValue == null) {
        return;
      }
      if (existingValue instanceof Iterable) {
        for (        Object val : ((Iterable)existingValue)) {
          GraphObject graphObject=(GraphObject)rel.getNotion().getAdapterForSetter(securityContext).adapt(val);
          if (graphObject instanceof AbstractNode) {
            rel.removeRelationship(securityContext,this,(AbstractNode)graphObject);
          }
        }
      }
 else {
        GraphObject graphObject=(GraphObject)rel.getNotion().getAdapterForSetter(securityContext).adapt(existingValue);
        if (graphObject instanceof AbstractNode) {
          rel.removeRelationship(securityContext,this,(AbstractNode)graphObject);
        }
      }
    }
  }
 else {
    PropertyConverter converter=key.databaseConverter(securityContext,this);
    final Object convertedValue;
    if (converter != null) {
      convertedValue=converter.convert(value);
    }
 else {
      convertedValue=value;
    }
    final Object oldValue=getProperty(key);
    if (((convertedValue == null) && (oldValue == null)) || ((convertedValue != null) && (oldValue != null) && convertedValue.equals(oldValue))) {
      return;
    }
    if (isDirty) {
      properties.put(key,convertedValue);
    }
 else {
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          try {
            if (convertedValue == null) {
              dbNode.removeProperty(key.dbName());
            }
 else {
              if (!key.equals(AbstractNode.lastModifiedDate)) {
                dbNode.setProperty(key.dbName(),convertedValue);
                dbNode.setProperty(AbstractNode.lastModifiedDate.dbName(),System.currentTimeMillis());
              }
 else {
                logger.log(Level.FINE,"Tried to set lastModifiedDate explicitely (action was denied)");
              }
            }
          }
  finally {
          }
          return null;
        }
      }
;
      Services.command(securityContext,TransactionCommand.class).execute(transaction);
    }
  }
  cachedConvertedProperties.remove(key);
  cachedRawProperties.remove(key);
}
