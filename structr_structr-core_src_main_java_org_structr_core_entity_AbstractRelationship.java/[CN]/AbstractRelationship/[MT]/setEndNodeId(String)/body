{
  final String type=this.getClass().getSimpleName();
  final String key=getStartNodeIdKey().name();
  if (endNodeId == null) {
    throw new FrameworkException(type,new NullPropertyToken(key));
  }
  Command transaction=Services.command(securityContext,TransactionCommand.class);
  transaction.execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      Command findNode=Services.command(securityContext,FindNodeCommand.class);
      Command deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
      Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
      Command nodeFactory=Services.command(securityContext,NodeFactoryCommand.class);
      AbstractNode startNode=(AbstractNode)nodeFactory.execute(getStartNode());
      AbstractNode newEndNode=getNodeByUuid(endNodeId);
      if (newEndNode == null) {
        throw new FrameworkException(type,new IdNotFoundToken(endNodeId));
      }
      RelationshipType type=dbRelationship.getType();
      properties=getProperties();
      deleteRel.execute(dbRelationship);
      AbstractRelationship newRel=(AbstractRelationship)createRel.execute(startNode,newEndNode,type);
      newRel.setProperties(properties);
      dbRelationship=newRel.getRelationship();
      return (null);
    }
  }
);
}
