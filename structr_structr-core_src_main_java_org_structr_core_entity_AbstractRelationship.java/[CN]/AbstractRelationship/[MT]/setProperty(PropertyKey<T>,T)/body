{
  PropertyKey startNodeIdKey=getStartNodeIdKey();
  PropertyKey endNodeIdKey=getEndNodeIdKey();
  cachedConvertedProperties.remove(key);
  cachedRawProperties.remove(key);
  if ((startNodeIdKey != null) && key.equals(startNodeIdKey)) {
    setStartNodeId((String)value);
    return;
  }
  if ((endNodeIdKey != null) && key.equals(endNodeIdKey)) {
    setEndNodeId((String)value);
    return;
  }
  Class type=this.getClass();
  if (EntityContext.isReadOnlyProperty(type,key) || (EntityContext.isWriteOnceProperty(type,key) && (dbRelationship != null) && dbRelationship.hasProperty(key.dbName()))) {
    if (readOnlyPropertiesUnlocked) {
      readOnlyPropertiesUnlocked=false;
    }
 else {
      throw new FrameworkException(type.getSimpleName(),new ReadOnlyPropertyToken(key));
    }
  }
  PropertyGroup propertyGroup=EntityContext.getPropertyGroup(type,key);
  if (propertyGroup != null) {
    propertyGroup.setGroupedProperties(securityContext,value,this);
    return;
  }
  PropertyConverter converter=key.databaseConverter(securityContext,this);
  final Object convertedValue;
  if (converter != null) {
    convertedValue=converter.convert(value);
  }
 else {
    convertedValue=value;
  }
  final Object oldValue=getProperty(key);
  if (((convertedValue == null) && (oldValue == null)) || ((convertedValue != null) && (oldValue != null) && convertedValue.equals(oldValue))) {
    return;
  }
  StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      try {
        if (convertedValue == null) {
          dbRelationship.removeProperty(key.dbName());
        }
 else {
          dbRelationship.setProperty(key.dbName(),convertedValue);
        }
      }
  finally {
      }
      return null;
    }
  }
;
  Services.command(securityContext,TransactionCommand.class).execute(transaction);
  cachedConvertedProperties.remove(key);
  cachedRawProperties.remove(key);
}
