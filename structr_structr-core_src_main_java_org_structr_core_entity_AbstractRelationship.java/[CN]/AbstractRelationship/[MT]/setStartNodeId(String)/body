{
  final String type=this.getClass().getSimpleName();
  final PropertyKey key=getStartNodeIdKey();
  if (startNodeId == null) {
    throw new FrameworkException(type,new NullPropertyToken(key));
  }
  if (getStartNodeId().equals(startNodeId)) {
    return;
  }
  Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      DeleteRelationshipCommand deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
      CreateRelationshipCommand createRel=Services.command(securityContext,CreateRelationshipCommand.class);
      AbstractNode newStartNode=getNodeByUuid(startNodeId);
      AbstractNode endNode=getEndNode();
      if (newStartNode == null) {
        throw new FrameworkException(type,new IdNotFoundToken(startNodeId));
      }
      RelationshipType type=dbRelationship.getType();
      properties=getProperties();
      deleteRel.execute(dbRelationship);
      AbstractRelationship newRel=(AbstractRelationship)createRel.execute(newStartNode,endNode,type,properties,false);
      dbRelationship=newRel.getRelationship();
      return (null);
    }
  }
);
}
