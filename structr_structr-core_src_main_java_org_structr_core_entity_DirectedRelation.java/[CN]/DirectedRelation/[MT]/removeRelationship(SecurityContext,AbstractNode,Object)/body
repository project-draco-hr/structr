{
  AbstractNode targetNode=null;
  if (value instanceof AbstractNode) {
    targetNode=(AbstractNode)value;
  }
 else {
    targetNode=(AbstractNode)Services.command(securityContext,FindNodeCommand.class).execute(value);
  }
  if ((sourceNode != null) && (targetNode != null)) {
    final AbstractNode finalTargetNode=targetNode;
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
switch (cardinality) {
case ManyToOne:
case OneToOne:
{
            String destType=finalTargetNode.getType();
            List<StructrRelationship> rels=sourceNode.getRelationships(relType,direction);
            for (            StructrRelationship rel : rels) {
              if (rel.getOtherNode(sourceNode).getType().equals(destType)) {
                rel.delete(securityContext);
              }
            }
            break;
          }
case OneToMany:
{
          List<StructrRelationship> rels=finalTargetNode.getRelationships(relType,Direction.INCOMING);
          for (          StructrRelationship rel : rels) {
            if (rel.getOtherNode(finalTargetNode).getType().equals(sourceNode.getType())) {
              rel.delete(securityContext);
            }
          }
        }
case ManyToMany:
{
        List<StructrRelationship> rels=finalTargetNode.getRelationships(relType,Direction.BOTH);
        for (        StructrRelationship rel : rels) {
          if (rel.getOtherNode(finalTargetNode).equals(sourceNode)) {
            rel.delete(securityContext);
          }
        }
      }
  }
  return null;
}
}
;
Services.command(securityContext,TransactionCommand.class).execute(transaction);
}
 else {
String type="unknown";
if (sourceNode != null) {
type=sourceNode.getType();
}
 else if (targetNode != null) {
type=targetNode.getType();
}
throw new FrameworkException(type,new IdNotFoundToken(value));
}
}
