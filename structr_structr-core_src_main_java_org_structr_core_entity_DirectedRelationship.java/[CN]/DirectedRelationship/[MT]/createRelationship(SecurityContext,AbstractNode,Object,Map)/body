{
  final Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
  AbstractNode targetNode=null;
  if (value instanceof AbstractNode) {
    targetNode=(AbstractNode)value;
  }
 else {
    targetNode=(AbstractNode)Services.command(securityContext,FindNodeCommand.class).execute(value);
  }
  if ((sourceNode != null) && (targetNode != null)) {
    final AbstractNode finalTargetNode=targetNode;
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        if (cardinality.equals(Cardinality.ManyToOne) || cardinality.equals(Cardinality.OneToOne)) {
          String destType=finalTargetNode.getType();
          List<StructrRelationship> rels=sourceNode.getRelationships(relType,direction);
          for (          StructrRelationship rel : rels) {
            if (rel.getOtherNode(sourceNode).getType().equals(destType)) {
              rel.delete(securityContext);
            }
          }
        }
        StructrRelationship newRel;
        if (direction.equals(Direction.OUTGOING)) {
          newRel=(StructrRelationship)createRel.execute(sourceNode,finalTargetNode,relType);
        }
 else {
          newRel=(StructrRelationship)createRel.execute(finalTargetNode,sourceNode,relType);
        }
        newRel.setProperties(properties);
        return newRel;
      }
    }
;
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
  }
 else {
    String type="unknown";
    if (sourceNode != null) {
      type=sourceNode.getType();
    }
 else     if (targetNode != null) {
      type=targetNode.getType();
    }
    throw new FrameworkException(type,new IdNotFoundToken(value));
  }
}
