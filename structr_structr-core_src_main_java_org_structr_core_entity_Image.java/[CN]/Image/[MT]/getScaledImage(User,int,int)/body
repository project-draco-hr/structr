{
  thumbnailRelationships=getThumbnailRelationships();
  Image thumbnail=null;
  final Image originalImage=this;
  int origWidth=originalImage.getWidth();
  int origHeight=originalImage.getHeight();
  if (thumbnailRelationships != null && !(thumbnailRelationships.isEmpty())) {
    for (    StructrRelationship r : thumbnailRelationships) {
      Integer w=(Integer)r.getProperty(Image.WIDTH_KEY);
      Integer h=(Integer)r.getProperty(Image.HEIGHT_KEY);
      if (w != null && h != null) {
        if ((w == maxWidth && h <= maxHeight) || (w <= maxWidth && h == maxHeight) || (origWidth <= w && origHeight <= h)) {
          thumbnail=(Image)r.getEndNode();
          if (!(originalImage.getLastModifiedDate().after(thumbnail.getLastModifiedDate()))) {
            return thumbnail;
          }
        }
      }
    }
  }
  logger.log(Level.INFO,"Creating thumbnail for {0}",getName());
  Command transactionCommand=Services.command(TransactionCommand.class);
  thumbnail=(Image)transactionCommand.execute(new StructrTransaction(){
    @Override public Object execute() throws Throwable {
      Command createNode=Services.command(CreateNodeCommand.class);
      Command createRel=Services.command(CreateRelationshipCommand.class);
      NodeAttribute typeAttr=new NodeAttribute(StructrNode.TYPE_KEY,Image.class.getSimpleName());
      NodeAttribute contentTypeAttr=new NodeAttribute(Image.CONTENT_TYPE_KEY,"image/" + Thumbnail.FORMAT);
      Thumbnail thumbnailData=ImageHelper.createThumbnail(originalImage,maxWidth,maxHeight);
      if (thumbnailData != null) {
        Image thumbnail=(Image)createNode.execute(user,typeAttr,contentTypeAttr,false);
        if (thumbnail != null) {
          StructrRelationship thumbnailRelationship=(StructrRelationship)createRel.execute(originalImage,thumbnail,RelType.THUMBNAIL);
          String relativeFilePath=thumbnail.getId() + "_" + System.currentTimeMillis();
          String path=Services.getFilesPath() + "/" + relativeFilePath;
          java.io.File imageFile=new java.io.File(path);
          try {
            FileUtils.writeByteArrayToFile(imageFile,thumbnailData.getBytes());
          }
 catch (          IOException ex) {
            logger.log(Level.SEVERE,"Could not write thumbnail data to file",ex);
            return null;
          }
          long size=imageFile.length();
          thumbnail.setSize(size);
          int tnWidth=thumbnailData.getWidth();
          int tnHeight=thumbnailData.getHeight();
          thumbnailRelationship.setProperty(Image.WIDTH_KEY,tnWidth);
          thumbnailRelationship.setProperty(Image.HEIGHT_KEY,tnHeight);
          thumbnail.setRelativeFilePath(relativeFilePath);
          thumbnail.setName(originalImage.getName() + "_thumb_" + tnWidth+ "x"+ tnHeight);
        }
        return thumbnail;
      }
 else {
        logger.log(Level.WARNING,"Could not create thumbnail for image {0} ({1})",new Object[]{getName(),getId()});
        return null;
      }
    }
  }
);
  return thumbnail;
}
