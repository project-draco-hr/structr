{
  thumbnailRelationships=getThumbnailRelationships();
  Image thumbnail=null;
  final Image originalImage=this;
  Integer origWidth=originalImage.getWidth();
  Integer origHeight=originalImage.getHeight();
  if ((origWidth != null) && (origHeight != null)) {
    if ((thumbnailRelationships != null) && !(thumbnailRelationships.isEmpty())) {
      for (      AbstractRelationship r : thumbnailRelationships) {
        Integer w=(Integer)r.getProperty(Key.width.name());
        Integer h=(Integer)r.getProperty(Key.height.name());
        if ((w != null) && (h != null)) {
          if (((w == maxWidth) && (h <= maxHeight)) || ((w <= maxWidth) && (h == maxHeight)) || ((origWidth <= w) && (origHeight <= h))) {
            thumbnail=(Image)r.getEndNode();
            if (!(originalImage.getLastModifiedDate().after(thumbnail.getLastModifiedDate()))) {
              return thumbnail;
            }
          }
        }
      }
    }
  }
  logger.log(Level.INFO,"Creating thumbnail for {0}",getName());
  try {
    Command transactionCommand=Services.command(securityContext,TransactionCommand.class);
    thumbnail=(Image)transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
        Thumbnail thumbnailData=ImageHelper.createThumbnail(originalImage,maxWidth,maxHeight,cropToFit);
        if (thumbnailData != null) {
          Integer tnWidth=thumbnailData.getWidth();
          Integer tnHeight=thumbnailData.getHeight();
          Image thumbnail=null;
          try {
            byte[] data=thumbnailData.getBytes();
            int size=data.length;
            thumbnail=ImageHelper.createImage(securityContext,data,"image/" + Thumbnail.FORMAT,Image.class);
            thumbnail.setSize(size);
            thumbnail.setName(originalImage.getName() + "_thumb_" + tnWidth+ "x"+ tnHeight);
            thumbnail.setHidden(originalImage.getHidden());
            thumbnail.setVisibleToPublicUsers(originalImage.getVisibleToPublicUsers());
            thumbnail.setVisibleToAuthenticatedUsers(originalImage.getVisibleToAuthenticatedUsers());
          }
 catch (          IOException ex) {
            logger.log(Level.WARNING,"Could not create thumbnail image",ex);
          }
          if (thumbnail != null) {
            AbstractRelationship thumbnailRelationship=(AbstractRelationship)createRel.execute(originalImage,thumbnail,RelType.THUMBNAIL);
            thumbnailRelationships.add(thumbnailRelationship);
            thumbnailRelationship.setProperty(Key.width.name(),tnWidth);
            thumbnailRelationship.setProperty(Key.height.name(),tnHeight);
          }
          return thumbnail;
        }
 else {
          logger.log(Level.WARNING,"Could not create thumbnail for image {0} ({1})",new Object[]{getName(),getId()});
          return null;
        }
      }
    }
);
    Services.command(securityContext,IndexNodeCommand.class).execute(thumbnail);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Unable to create thumbnail",fex);
  }
  return thumbnail;
}
