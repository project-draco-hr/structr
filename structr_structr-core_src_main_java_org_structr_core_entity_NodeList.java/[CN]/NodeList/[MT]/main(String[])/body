{
  Services.initialize(prepareStandaloneContext());
  Services.createCommand(TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws Throwable {
      GraphDatabaseService graphDb=(GraphDatabaseService)Services.createCommand(GraphDatabaseCommand.class).execute();
      Command factory=Services.createCommand(NodeFactoryCommand.class);
      NodeList nodeList=null;
      for (      Node node : graphDb.getAllNodes()) {
        StructrNode n=(StructrNode)factory.execute(node);
        System.out.println("node: " + node);
        if (n instanceof NodeList) {
          nodeList=(NodeList)n;
          break;
        }
      }
      if (nodeList == null) {
        Node node=graphDb.createNode();
        node.setProperty(TYPE_KEY,"NodeList");
        graphDb.getReferenceNode().createRelationshipTo(node,RelType.HAS_CHILD);
        nodeList=(NodeList)factory.execute(node);
      }
      if (nodeList != null) {
        boolean exit=false;
        while (!exit) {
          try {
            System.out.println("#######################");
            System.out.println("list size: " + nodeList.size());
            for (            StructrNode node : nodeList) {
              System.out.println(node.getId() + ": " + node);
              for (              Relationship rel : node.getNode().getRelationships(Direction.OUTGOING)) {
                System.out.println("          " + rel.getId() + ": "+ rel.getType()+ " -> "+ rel.getEndNode());
              }
              System.out.println();
            }
            String line=JOptionPane.showInputDialog(null,"Kommando:");
            if ("exit".equals(line)) {
              exit=true;
            }
 else             if (line.startsWith("add")) {
              Node nn=graphDb.createNode();
              nn.setProperty(TYPE_KEY,"PlainText");
              StructrNode newNode=(StructrNode)factory.execute(nn);
              int index=-1;
              try {
                index=Integer.parseInt(line.substring(line.indexOf(" ") + 1));
              }
 catch (              Throwable t) {
              }
              if (index != -1) {
                System.out.println("adding node at " + index);
                nodeList.add(index,newNode);
              }
 else {
                System.out.println("appending node");
                nodeList.add(newNode);
              }
            }
 else             if (line.startsWith("del")) {
              int index=-1;
              try {
                index=Integer.parseInt(line.substring(line.indexOf(" ") + 1));
              }
 catch (              Throwable t) {
              }
              if (index != -1) {
                System.out.println("removing node #" + index);
                nodeList.remove(index);
              }
 else {
                System.out.println("removing last node");
                nodeList.remove(nodeList.size() - 1);
              }
            }
          }
 catch (          Throwable t) {
            System.out.println(t.getMessage());
          }
        }
      }
      return (null);
    }
  }
);
  Services.shutdown();
}
