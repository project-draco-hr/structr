{
  final NodeFactory<T> nodeFactory=new NodeFactory<T>(securityContext);
  final List<T> nodeList=new LinkedList<T>();
  Iterable<Node> nodes=Traversal.description().uniqueness(Uniqueness.NODE_PATH).breadthFirst().relationships(relType,direction).evaluator(new Evaluator(){
    @Override public Evaluation evaluate(    Path path){
      int len=path.length();
      if (len <= 1) {
        if (len == 0) {
          return Evaluation.EXCLUDE_AND_CONTINUE;
        }
 else {
          try {
            T abstractNode=nodeFactory.createNode(path.endNode());
            if (abstractNode != null) {
              if ((destType != null) && destType.isAssignableFrom(abstractNode.getClass())) {
                nodeList.add(abstractNode);
                return Evaluation.INCLUDE_AND_CONTINUE;
              }
 else {
                return Evaluation.EXCLUDE_AND_CONTINUE;
              }
            }
          }
 catch (          FrameworkException fex) {
            logger.log(Level.WARNING,"Unable to instaniate node: {0}",fex.getMessage());
          }
        }
      }
      return Evaluation.EXCLUDE_AND_PRUNE;
    }
  }
).traverse(node.getNode()).nodes();
  for (  Node n : nodes) {
  }
  return nodeList;
}
