{
  List<AbstractNode> objects=getObjectsOfCategory(categoryName);
  if (sortBy != null) {
    Collections.sort(objects,new Comparator<AbstractNode>(){
      @Override public int compare(      AbstractNode nodeOne,      AbstractNode nodeTwo){
        if (nodeOne instanceof NodeLink) {
          nodeOne=((NodeLink)nodeOne).getStructrNode();
        }
        if (nodeTwo instanceof NodeLink) {
          nodeTwo=((NodeLink)nodeTwo).getStructrNode();
        }
        Method getterOne=null;
        try {
          getterOne=nodeOne.getClass().getMethod(sortBy);
        }
 catch (        Exception ex) {
          logger.log(Level.FINE,"Cannot invoke method {0}",sortBy);
        }
        Method getterTwo=null;
        try {
          getterTwo=nodeOne.getClass().getMethod(sortBy);
        }
 catch (        Exception ex) {
          logger.log(Level.FINE,"Cannot invoke method {0}",sortBy);
        }
        int result=0;
        if ((getterOne != null) && (getterTwo != null)) {
          Object valueOne=null;
          try {
            valueOne=getterOne.invoke(nodeOne);
          }
 catch (          Exception ex) {
            logger.log(Level.FINE,"Cannot invoke method {0} on {1}",new Object[]{getterOne,nodeOne});
          }
          Object valueTwo=null;
          try {
            valueTwo=getterTwo.invoke(nodeTwo);
          }
 catch (          Exception ex) {
            logger.log(Level.FINE,"Cannot invoke method {0} on {1}",new Object[]{getterTwo,nodeTwo});
          }
          if ((valueOne != null) && (valueTwo != null)) {
            if ((valueOne instanceof Comparable) && (valueTwo instanceof Comparable)) {
              if ((sortDirection != null) && sortDirection.equals("asc")) {
                result=((Comparable)valueOne).compareTo((Comparable)valueTwo);
              }
 else {
                result=((Comparable)valueTwo).compareTo((Comparable)valueOne);
              }
            }
 else {
              if ((sortDirection != null) && sortDirection.equals("asc")) {
                result=valueOne.toString().compareTo(valueTwo.toString());
              }
 else {
                result=valueTwo.toString().compareTo(valueOne.toString());
              }
            }
          }
        }
        return result;
      }
    }
);
  }
  return objects;
}
