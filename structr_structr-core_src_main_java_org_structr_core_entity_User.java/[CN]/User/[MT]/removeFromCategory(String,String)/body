{
  final User user=this;
  if (categoryName == null) {
    logger.log(Level.SEVERE,"Empty category name!");
    return;
  }
  try {
    final AbstractNode object=(AbstractNode)Services.command(securityContext,FindNodeCommand.class).execute(objectId);
    if (object == null) {
      logger.log(Level.SEVERE,"Object not found!");
      return;
    }
    Category cat=null;
    List<AbstractNode> children=this.getDirectChildNodes();
    for (    AbstractNode child : children) {
      if ((child instanceof Category) && categoryName.equals(child.getName())) {
        cat=(Category)child;
      }
    }
    if (cat == null) {
      logger.log(Level.SEVERE,"Category not found!");
      return;
    }
    StructrRelationship relationshipToRemove=null;
    List<StructrRelationship> outgoingRelationships=cat.getOutgoingLinkRelationships();
    for (    StructrRelationship rel : outgoingRelationships) {
      AbstractNode endNode=rel.getEndNode();
      if (endNode.equals(object)) {
        relationshipToRemove=rel;
      }
    }
    if (relationshipToRemove != null) {
      final StructrRelationship relToDel=relationshipToRemove;
      Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          Services.command(securityContext,DeleteRelationshipCommand.class).execute(relToDel);
          return null;
        }
      }
);
    }
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Unable to remove node from category",fex);
    return;
  }
}
