{
  Command graphDbCommand=Services.command(GraphDatabaseCommand.class);
  GraphDatabaseService graphDb=(GraphDatabaseService)graphDbCommand.execute();
  MapContext mapContext=null;
  try {
    long t0=System.currentTimeMillis();
    String featureName=null;
    String staticFeatureName=getStaticFeatureName();
    if (StringUtils.isNotBlank(staticFeatureName)) {
      featureName=staticFeatureName;
    }
 else {
      HttpServletRequest request=getRequest();
      String featureNameParamName=getFeatureNameParamName();
      if (featureNameParamName == null) {
        featureNameParamName=defaultFeatureParamName;
      }
      if (request != null) {
        featureName=request.getParameter(featureNameParamName);
      }
    }
    int cx=getCanvasX();
    int cy=getCanvasY();
    boolean auto=getAutoEnvelope();
    List<MapLayer> layers=new ArrayList<MapLayer>();
    MapLayer layer=null;
    ReferencedEnvelope envelope=null;
    String shapeFilePath=getShapeFile();
    if (shapeFilePath != null) {
      File shapeFile=new File(shapeFilePath);
      ShapefileDataStore dataStore=new ShapefileDataStore(shapeFile.toURI().toURL());
      StyleBuilder sb=new StyleBuilder();
      Symbolizer sym=sb.createLineSymbolizer(Color.decode(getLineColor()),getLineWidth());
      layer=new MapLayer(dataStore.getFeatureSource(),sb.createStyle(sym));
      layers.add(layer);
    }
    Neo4jSpatialDataStore n4jstore=new Neo4jSpatialDataStore(graphDb);
    String layerName=getLayer();
    if (StringUtils.isEmpty(layerName)) {
      logger.log(Level.SEVERE,"No layer name!");
    }
    SimpleFeatureSource featureSource=n4jstore.getFeatureSource(layerName);
    if (auto) {
      if (featureName == null) {
        envelope=featureSource.getBounds();
      }
 else {
        List<Filter> filterList=new ArrayList<Filter>();
        filterList.add(CQL.toFilter("NAME like '" + StringEscapeUtils.escapeSql(featureName) + "'"));
        Filter filter=MapHelper.featureFactory.or(filterList);
        Query query=new Query(layerName,filter);
        SimpleFeatureCollection featureCollection=featureSource.getFeatures(query);
        if (featureCollection != null && !(featureCollection.isEmpty())) {
          SimpleFeature requestedFeature=featureCollection.features().next();
          envelope=(ReferencedEnvelope)requestedFeature.getBounds();
        }
      }
    }
 else {
      Double eminx=getEnvelopeMinX();
      Double emaxx=getEnvelopeMaxX();
      Double eminy=getEnvelopeMinY();
      Double emaxy=getEnvelopeMaxY();
      if (eminx != null && emaxx != null && eminy != null && emaxy != null) {
        envelope=new ReferencedEnvelope(eminx,emaxx,eminy,emaxy,null);
      }
 else {
        logger.log(Level.WARNING,"Manual envelope parameter incomplete");
      }
    }
    MapHelper.expandEnvelope(envelope,new Double(cx),new Double(cy));
    SimpleFeatureCollection features=MapHelper.getIntersectingFeatures(graphDb,envelope,layerName);
    Symbolizer polygonSymbolizer=MapHelper.createPolygonSymbolizer(getLineColor(),getLineWidth(),getLineOpacity(),getFillColor(),getFillOpacity());
    Symbolizer textSymbolizer=MapHelper.createTextSymbolizer(getFontName(),getFontSize(),getFontColor(),getFontOpacity());
    Rule rule=MapHelper.styleFactory.createRule();
    rule.symbolizers().add(polygonSymbolizer);
    rule.symbolizers().add(textSymbolizer);
    FeatureTypeStyle fts=MapHelper.styleFactory.createFeatureTypeStyle(new Rule[]{rule});
    Style style=MapHelper.styleFactory.createStyle();
    style.featureTypeStyles().add(fts);
    layers.add(new MapLayer(features,style));
    mapContext=new DefaultMapContext(layers.toArray(new MapLayer[]{}));
    MapHelper.renderSVGDocument(out,mapContext,envelope,cx,cy,getOptimizeFtsRendering(),getLineWidthOptimization());
    mapContext.dispose();
    long t1=System.currentTimeMillis();
    logger.log(Level.INFO,"SVG image successfully rendered in {0} ms",(t1 - t0));
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,"Error while rendering map to SVG",t);
  }
 finally {
    if (mapContext != null) {
      mapContext.dispose();
    }
  }
}
