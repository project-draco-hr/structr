{
  final String entityTypeName=(String)attributes.get("type");
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final SecurityContext superUserContext=SecurityContext.getSuperUserInstance();
  final NodeFactory nodeFactory=new NodeFactory(superUserContext);
  long nodeCount=0L;
  if (entityTypeName != null) {
    final Class type=EntityContext.getEntityClassForRawType(entityTypeName);
    if (type != null) {
      final Result<AbstractNode> result=nodeFactory.createAllNodes(GlobalGraphOperations.at(graphDb).getAllNodes());
      final List<AbstractNode> nodes=result.getResults();
      logger.log(Level.INFO,"Start setting UUID on all nodes of type {1}",new Object[]{AbstractNode.uuid,type.getSimpleName()});
      final Iterator<AbstractNode> nodeIterator=nodes.iterator();
      while (nodeIterator.hasNext()) {
        nodeCount+=Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction<Integer>(){
          @Override public Integer execute() throws FrameworkException {
            int count=0;
            while (nodeIterator.hasNext()) {
              AbstractNode abstractNode=nodeIterator.next();
              if (!abstractNode.getClass().equals(type)) {
                continue;
              }
              try {
                abstractNode.setProperty(AbstractNode.uuid,UUID.randomUUID().toString().replaceAll("[\\-]+",""));
              }
 catch (              Throwable t) {
                logger.log(Level.WARNING,"Unable to set UUID on {0}: {1}",new Object[]{type.getSimpleName(),t.getMessage()});
              }
              if (++count == 1000) {
                break;
              }
            }
            return count;
          }
        }
);
        logger.log(Level.INFO,"Set UUID on {0} nodes ...",nodeCount);
      }
      logger.log(Level.INFO,"Done");
      return;
    }
  }
  logger.log(Level.INFO,"Unable to determine entity type to set UUID.");
}
