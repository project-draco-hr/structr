{
  if (user == null || user instanceof SuperUser) {
    return null;
  }
  LogNodeList userLogNodeList=loggerCache.get(user);
  if (userLogNodeList == null) {
    for (    AbstractNode s : user.getDirectChildNodes(user)) {
      if (s instanceof LogNodeList) {
        userLogNodeList=(LogNodeList)s;
        loggerCache.put(user,userLogNodeList);
        return userLogNodeList;
      }
    }
    userLogNodeList=(LogNodeList)Services.command(TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command createNode=Services.command(CreateNodeCommand.class);
        Command createRel=Services.command(CreateRelationshipCommand.class);
        LogNodeList<Activity> newLogNodeList=(LogNodeList<Activity>)createNode.execute(user,new NodeAttribute(AbstractNode.TYPE_KEY,LogNodeList.class.getSimpleName()),new NodeAttribute(AbstractNode.NAME_KEY,user.getName() + "'s Activity Log"));
        createRel.execute(user,newLogNodeList,RelType.HAS_CHILD);
        return (newLogNodeList);
      }
    }
);
    loggerCache.put(user,userLogNodeList);
  }
  return userLogNodeList;
}
