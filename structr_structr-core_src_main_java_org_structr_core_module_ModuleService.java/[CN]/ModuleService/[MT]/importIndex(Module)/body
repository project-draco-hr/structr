{
  String modulePath=module.getModulePath();
  ZipFile zipFile=new ZipFile(modulePath);
  Set<String> libraries=module.getLibraries();
  for (  String library : libraries) {
    String destinationPath=createResourceFileName(servletContext,"WEB-INF/lib",library);
    try {
      ZipEntry entry=zipFile.getEntry(library);
      InputStream inputStream=zipFile.getInputStream(entry);
      File destinationFile=new File(destinationPath);
      deployFile(inputStream,destinationFile);
      logger.log(Level.INFO,"Deploying library {0} to {1}",new Object[]{entry.getName(),destinationFile});
    }
 catch (    Throwable t) {
    }
  }
  Set<String> classes=module.getClasses();
  for (  final String className : classes) {
    logger.log(Level.FINE,"Deploying class {0} ",className);
    try {
      String sourcePath=className.replaceAll("[\\.]+","/").concat(".class");
      String destinationFile=createResourceFileName(servletContext,"WEB-INF/classes",sourcePath);
      logger.log(Level.FINE,"sourcePath: {0}, destinationFile: {1}",new Object[]{sourcePath,destinationFile});
      ZipEntry entry=zipFile.getEntry(sourcePath);
      if (entry != null) {
        InputStream inputStream=zipFile.getInputStream(entry);
        if (inputStream != null) {
          deployFile(inputStream,new File(destinationFile));
        }
 else {
          logger.log(Level.WARNING,"Invalid input stream: {0}",sourcePath);
        }
      }
 else {
      }
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"error deploying class {0}: {1}",new Object[]{className,t});
    }
  }
  Set<String> properties=module.getProperties();
  for (  final String propertiesName : properties) {
    try {
      String sourcePath=propertiesName.replaceAll("[\\.]+","/").concat(".properties");
      String destinationFile=createResourceFileName(servletContext,"WEB-INF/classes",sourcePath);
      ZipEntry entry=zipFile.getEntry(sourcePath);
      if (entry != null) {
        InputStream inputStream=zipFile.getInputStream(entry);
        if (inputStream != null) {
          deployFile(inputStream,new File(destinationFile));
        }
 else {
          logger.log(Level.WARNING,"Invalid input stream: {0}",sourcePath);
        }
      }
 else {
        logger.log(Level.WARNING,"Invalid entry: {0}",sourcePath);
      }
    }
 catch (    Throwable t) {
      logger.log(Level.WARNING,"error deploying properties file {0}: {1}",new Object[]{propertiesName,t});
    }
  }
  for (  final String className : classes) {
    logger.log(Level.FINE,"Instantiating class {0} ",className);
    try {
      Class clazz=Class.forName(className);
      logger.log(Level.FINE,"Class {0} instantiated: {1}",new Object[]{className,clazz});
      if (!Modifier.isAbstract(clazz.getModifiers())) {
        if (AbstractNode.class.isAssignableFrom(clazz)) {
          String simpleName=clazz.getSimpleName();
          String fullName=clazz.getName();
          entityClassCache.put(simpleName,clazz);
          entityPackages.add(fullName.substring(0,fullName.lastIndexOf(".")));
        }
        if (Service.class.isAssignableFrom(clazz)) {
          Services.registerServiceClass(clazz);
        }
        if (Agent.class.isAssignableFrom(clazz)) {
          String simpleName=clazz.getSimpleName();
          String fullName=clazz.getName();
          agentClassCache.put(simpleName,clazz);
          agentPackages.add(fullName.substring(0,fullName.lastIndexOf(".")));
        }
        if (structrPagePredicate.evaluate(clazz)) {
          String fullName=clazz.getName();
          String packageName=fullName.substring(0,fullName.lastIndexOf("."));
          pagePackages.add(packageName);
          String parentPackage=packageName.substring(0,packageName.lastIndexOf("."));
          pagePackages.add(parentPackage);
        }
      }
    }
 catch (    Throwable t) {
    }
    Set<String> resources=module.getResources();
    for (    String resource : resources) {
      String destinationPath=createResourceFileName(servletContext,resource);
      try {
        ZipEntry entry=zipFile.getEntry(resource);
        InputStream inputStream=zipFile.getInputStream(entry);
        File destinationFile=new File(destinationPath);
        deployFile(inputStream,destinationFile);
      }
 catch (      Throwable t) {
      }
    }
  }
}
