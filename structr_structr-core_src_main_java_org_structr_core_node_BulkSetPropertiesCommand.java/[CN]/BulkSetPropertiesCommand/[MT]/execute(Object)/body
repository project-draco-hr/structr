{
  final GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  final NodeFactory nodeFactory=(NodeFactory)arguments.get("nodeFactory");
  final Command searchNode=Services.command(SecurityContext.getSuperUserInstance(),SearchNodeCommand.class);
  if (!((parameters != null) && (parameters.length == 1) && (parameters[0] instanceof Map)&& !((Map)parameters[0]).isEmpty())) {
    throw new IllegalArgumentException("This command requires one argument of type Map. Map must not be empty.");
  }
  final Map<String,Object> properties=(Map<String,Object>)parameters[0];
  if (graphDb != null) {
    final Command transactionCommand=Services.command(securityContext,TransactionCommand.class);
    transactionCommand.execute(new BatchTransaction(){
      @Override public Object execute(      Transaction tx) throws FrameworkException {
        long n=0L;
        List<AbstractNode> nodes=null;
        if (properties.containsKey(AbstractNode.Key.type.name())) {
          List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
          attrs.add(Search.andExactType((String)properties.get(AbstractNode.Key.type.name())));
          nodes=(List<AbstractNode>)searchNode.execute(null,false,false,attrs);
          properties.remove(AbstractNode.Key.type.name());
        }
 else {
          nodes=(List<AbstractNode>)nodeFactory.createNodes(securityContext,GlobalGraphOperations.at(graphDb).getAllNodes());
        }
        for (        AbstractNode node : nodes) {
          if (node.getStringProperty(AbstractNode.Key.uuid) != null) {
            for (            Entry entry : properties.entrySet()) {
              String key=(String)entry.getKey();
              Object val=entry.getValue();
              node.unlockReadOnlyPropertiesOnce();
              node.setProperty(key,val);
            }
            if (n > 1000 && n % 1000 == 0) {
              logger.log(Level.INFO,"Set properties on {0} nodes, committing results to database.",n);
              tx.success();
              tx.finish();
              tx=graphDb.beginTx();
              logger.log(Level.FINE,"######## committed ########",n);
            }
            n++;
          }
        }
        logger.log(Level.INFO,"Finished setting properties on {0} nodes",n);
        return null;
      }
    }
);
  }
  return null;
}
