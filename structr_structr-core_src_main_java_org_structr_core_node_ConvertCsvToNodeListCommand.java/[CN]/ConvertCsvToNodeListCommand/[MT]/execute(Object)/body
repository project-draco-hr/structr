{
  if (parameters == null || parameters.length < 2) {
    throw new UnsupportedArgumentError("Wrong number of arguments");
  }
  Long csvNodeId=null;
  StructrNode sourceNode=null;
  Class targetClass=null;
  File csvFileNode=null;
  String filePath=null;
  User user=null;
  for (  Object o : parameters) {
    if (o instanceof StructrNode) {
      sourceNode=(StructrNode)o;
      if (sourceNode.getType().equals(CsvFile.class.getSimpleName())) {
        csvFileNode=new CsvFile();
        csvFileNode.init(sourceNode);
        filePath=Services.getFilesPath() + "/" + csvFileNode.getRelativeFilePath();
      }
    }
    if (o instanceof Long) {
      csvNodeId=(Long)o;
      sourceNode=(StructrNode)Services.createCommand(FindNodeCommand.class).execute(new SuperUser(),csvNodeId);
      if (sourceNode.getType().equals(CsvFile.class.getSimpleName())) {
        csvFileNode=new CsvFile();
        csvFileNode.init(sourceNode);
        filePath=Services.getFilesPath() + "/" + csvFileNode.getRelativeFilePath();
      }
    }
    if (o instanceof Class) {
      targetClass=(Class)o;
    }
    if (o instanceof User) {
      user=(User)o;
    }
  }
  try {
    CSVReader reader=new CSVReader(new FileReader(filePath),'|','\"');
    String[] keys=reader.readNext();
    Field[] fields=targetClass.getFields();
    Map<Integer,String> fieldIndex=new HashMap<Integer,String>();
    StructrNode o=(StructrNode)targetClass.newInstance();
    int col=0;
    for (    String key : keys) {
      for (      Field f : fields) {
        String fieldName=(String)f.get(o);
        if (fieldName.toUpperCase().equals(key.toUpperCase())) {
          fieldIndex.put(col,fieldName);
        }
      }
      col++;
    }
    List<String[]> lines=reader.readAll();
    final List<NodeAttribute> attrList=new ArrayList<NodeAttribute>();
    final User userCopy=user;
    final StructrNode sourceNodeCopy=sourceNode;
    final Command transactionCommand=Services.createCommand(TransactionCommand.class);
    final NodeList<StructrNode> nodeListNode=(NodeList<StructrNode>)transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command createNode=Services.createCommand(CreateNodeCommand.class);
        Command createRel=Services.createCommand(CreateRelationshipCommand.class);
        NodeList<StructrNode> result=new NodeList<StructrNode>();
        StructrNode s=(StructrNode)createNode.execute(userCopy,new NodeAttribute(StructrNode.TYPE_KEY,NodeList.class.getSimpleName()),new NodeAttribute(StructrNode.NAME_KEY,sourceNodeCopy.getName() + " List"));
        result.init(s);
        createRel.execute(sourceNodeCopy,result,RelType.HAS_CHILD);
        return result;
      }
    }
);
    NodeAttribute typeAttr=new NodeAttribute(StructrNode.TYPE_KEY,targetClass.getSimpleName());
    attrList.add(typeAttr);
    for (    String[] line : lines) {
      for (int i=0; i < col; i++) {
        String csvValue=line[i];
        NodeAttribute attr=new NodeAttribute(fieldIndex.get(i),csvValue);
        attrList.add(attr);
        logger.log(Level.FINEST,"Created node attribute {0}={1}",new Object[]{attr.getKey(),attr.getValue()});
      }
      StructrNode newNode=(StructrNode)transactionCommand.execute(new StructrTransaction(){
        @Override public Object execute() throws Throwable {
          Command createNode=Services.createCommand(CreateNodeCommand.class);
          StructrNode newNode=(StructrNode)createNode.execute(userCopy,attrList);
          transactionCommand.setExitCode(createNode.getExitCode());
          transactionCommand.setErrorMessage(createNode.getErrorMessage());
          return newNode;
        }
      }
);
      nodeListNode.add(newNode);
      logger.log(Level.INFO,"Node {0} added to node list",newNode.getId());
    }
    return nodeListNode;
  }
 catch (  Throwable t) {
    t.printStackTrace(System.out);
  }
  return null;
}
