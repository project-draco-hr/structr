{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  StructrNodeFactory nodeFactory=(StructrNodeFactory)arguments.get("nodeFactory");
  User user=securityContext.getUser();
  AbstractNode node=null;
  boolean updateIndex=true;
  if (graphDb != null) {
    Date now=new Date();
    Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
    Map<String,Object> attrs=new HashMap<String,Object>();
    for (    Object o : parameters) {
      if (o instanceof Map) {
        Map<String,Object> map=(Map<String,Object>)o;
        attrs.putAll(map);
      }
 else       if (o instanceof Collection) {
        Collection<NodeAttribute> c=(Collection)o;
        for (        NodeAttribute attr : c) {
          attrs.put(attr.getKey(),attr.getValue());
        }
      }
 else       if (o instanceof NodeAttribute) {
        NodeAttribute attr=(NodeAttribute)o;
        attrs.put(attr.getKey(),attr.getValue());
      }
 else       if (o instanceof Boolean) {
        updateIndex=(Boolean)o;
      }
    }
    Object typeObject=attrs.get(AbstractNode.Key.type.name());
    String nodeType=typeObject != null ? typeObject.toString() : "GenericNode";
    node=nodeFactory.createNode(securityContext,graphDb.createNode(),nodeType);
    logger.log(Level.FINE,"Node {0} created",node.getId());
    node.setProperty(AbstractNode.Key.type.name(),nodeType);
    attrs.remove(AbstractNode.Key.type.name());
    ErrorBuffer errorBuffer=new ErrorBuffer();
    for (    Entry<String,Object> attr : attrs.entrySet()) {
      try {
        node.setProperty(attr.getKey(),attr.getValue());
      }
 catch (      Throwable t) {
        errorBuffer.add(t.getMessage());
      }
    }
    if (errorBuffer.hasError()) {
      throw new IllegalArgumentException(errorBuffer.toString());
    }
    attrs.clear();
    if ((user != null) && !(user instanceof SuperUser)) {
      createRel.execute(user,node,RelType.OWNS);
      logger.log(Level.FINEST,"Relationship to owner {0} added",user.getName());
      Principal principal;
      Group group=user.getGroupNode();
      if (group != null) {
        principal=group;
      }
 else {
        principal=user;
      }
      StructrRelationship securityRel=(StructrRelationship)createRel.execute(principal,node,RelType.SECURITY);
      securityRel.setAllowed(StructrRelationship.Permission.values());
      logger.log(Level.FINEST,"All permissions given to {0}",principal.getName());
      node.setProperty(AbstractNode.Key.createdBy.name(),user.getRealName() + " (" + user.getName()+ ")",false);
    }
    node.setProperty(AbstractNode.Key.createdDate.name(),now,false);
    node.setProperty(AbstractNode.Key.lastModifiedDate.name(),now,false);
  }
  if (node != null) {
    node.onNodeCreation();
    for (    Transformation<AbstractNode> transformation : EntityContext.getPostCreationTransformations(node.getClass())) {
      transformation.apply(securityContext,node);
    }
  }
  return node;
}
