{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  relationshipFactory=(RelationshipFactory)arguments.get("relationshipFactory");
  if ((graphDb != null) && (parameters.length == 3)) {
    Object arg0=parameters[0];
    Object arg1=parameters[1];
    Object arg2=parameters[2];
    RelationshipType relType=null;
    if (arg2 instanceof String) {
      relType=getRelationshipTypeFor((String)arg2);
    }
 else     if (arg2 instanceof RelationshipType) {
      relType=(RelationshipType)arg2;
    }
 else {
      throw new UnsupportedArgumentError("Wrong argument type(s).");
    }
    if ((arg0 instanceof AbstractNode) && (arg1 instanceof AbstractNode)) {
      AbstractNode startNode=(AbstractNode)arg0;
      AbstractNode endNode=(AbstractNode)arg1;
      return createRelationship(startNode,endNode,relType,null);
    }
 else {
      throw new UnsupportedArgumentError("Wrong argument type(s).");
    }
  }
 else   if ((graphDb != null) && (parameters.length == 5)) {
    Object arg0=parameters[0];
    Object arg1=parameters[1];
    Object arg2=parameters[2];
    Object arg3=parameters[3];
    Object arg4=parameters[4];
    Map<String,Object> properties=null;
    RelationshipType relType=null;
    if (arg2 instanceof String) {
      relType=getRelationshipTypeFor((String)arg2);
    }
 else     if (arg2 instanceof RelationshipType) {
      relType=(RelationshipType)arg2;
    }
 else {
      throw new UnsupportedArgumentError("Wrong argument type(s).");
    }
    if (arg3 instanceof Map) {
      properties=(Map<String,Object>)arg3;
    }
    boolean checkDuplicates=false;
    if (arg4 instanceof Boolean) {
      checkDuplicates=((Boolean)arg4) == true;
    }
    if ((arg0 instanceof AbstractNode) && (arg1 instanceof AbstractNode)) {
      AbstractNode startNode=(AbstractNode)arg0;
      AbstractNode endNode=(AbstractNode)arg1;
      if (checkDuplicates) {
        List<AbstractRelationship> incomingRels=endNode.getIncomingRelationships();
        for (        AbstractRelationship rel : incomingRels) {
          if (rel.getRelType().equals(relType) && rel.getStartNode().equals(startNode)) {
            Map<String,Object> relProps=rel.getProperties();
            boolean propsEqual=true;
            for (            Entry entry : properties.entrySet()) {
              String key=(String)entry.getKey();
              Object val=entry.getValue();
              if (!relProps.containsKey(key) || !relProps.get(key).equals(val)) {
                propsEqual=false;
                break;
              }
            }
            if (propsEqual) {
              logger.log(Level.WARNING,"Creation of duplicate relationship was blocked");
              return null;
            }
          }
        }
      }
      return createRelationship(startNode,endNode,relType,properties);
    }
 else {
      throw new UnsupportedArgumentError("Wrong argument type(s).");
    }
  }
  return null;
}
