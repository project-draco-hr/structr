{
  RelationshipFactory relFactory=(RelationshipFactory)arguments.get("relationshipFactory");
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  NodeFactory nodeFactory=(NodeFactory)arguments.get("nodeFactory");
  ExecutionEngine engine=new ExecutionEngine(graphDb);
  String query=null;
  Map<String,Object> params=null;
  boolean includeHiddenAndDeleted=true;
  boolean publicOnly=false;
switch (parameters.length) {
case 0:
    throw new UnsupportedArgumentError("No parameters given. Required parameters: String query");
case 4:
  publicOnly=(Boolean)parameters[2];
case 3:
includeHiddenAndDeleted=(Boolean)parameters[2];
case 2:
params=(Map<String,Object>)parameters[1];
case 1:
query=(String)parameters[0];
if (query == null) {
logger.log(Level.WARNING,"Query parameter is null");
return Collections.EMPTY_LIST;
}
}
if (parameters[0] instanceof String) {
List<GraphObject> resultList=new LinkedList<GraphObject>();
ExecutionResult result=null;
if (params != null) {
result=engine.execute(query,params);
}
 else {
result=engine.execute(query);
}
for (String column : result.columns()) {
for (Object o : IteratorUtil.asIterable(result.columnAs(column))) {
if (o instanceof Node) {
AbstractNode node=nodeFactory.createNode(securityContext,(Node)o,includeHiddenAndDeleted,publicOnly);
if (node != null) {
resultList.add(node);
}
}
 else if (o instanceof Relationship) {
AbstractRelationship rel=relFactory.createRelationship(securityContext,(Relationship)o);
if (rel != null) {
resultList.add(rel);
}
}
}
}
return resultList;
}
 else {
throw new UnsupportedArgumentError("First argument must be of type String!");
}
}
