{
  RelationshipFactory relFactory=(RelationshipFactory)arguments.get("relationshipFactory");
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  NodeFactory nodeFactory=(NodeFactory)arguments.get("nodeFactory");
  ExecutionEngine engine=new ExecutionEngine(graphDb);
  if (parameters.length < 1) {
    throw new UnsupportedArgumentError("No parameters given. Required parameters: String query");
  }
  if (parameters[0] instanceof String) {
    List<GraphObject> resultList=new LinkedList<GraphObject>();
    String query=(String)parameters[0];
    ExecutionResult result=null;
    Map<String,Object> params=null;
    if (parameters.length > 1 && parameters[1] instanceof Map) {
      params=(Map<String,Object>)parameters[1];
    }
    if (params != null) {
      result=engine.execute(query,params);
    }
 else {
      result=engine.execute(query);
    }
    for (    String column : result.columns()) {
      for (      Object o : IteratorUtil.asIterable(result.columnAs(column))) {
        if (o instanceof Node) {
          AbstractNode node=nodeFactory.createNode(securityContext,(Node)o);
          if (node != null) {
            resultList.add(node);
          }
        }
 else         if (o instanceof Relationship) {
          AbstractRelationship rel=relFactory.createRelationship(securityContext,(Relationship)o);
          if (rel != null) {
            resultList.add(rel);
          }
        }
      }
    }
    return resultList;
  }
 else {
    throw new UnsupportedArgumentError("First argument must be of type String!");
  }
}
