{
  if (node.getStringProperty(AbstractNode.Key.uuid) == null) {
    logger.log(Level.WARNING,"Will not delete node which has no UUID");
    return null;
  }
  final Command transactionCommand=Services.command(securityContext,TransactionCommand.class);
  final Command removeNodeFromIndex=Services.command(securityContext,RemoveNodeFromIndex.class);
  final Command deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
  transactionCommand.execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      try {
        if (cascade) {
          List<AbstractRelationship> outgoingRels=node.getOutgoingRelationships();
          for (          AbstractRelationship rel : outgoingRels) {
            int cascadeDelete=rel.cascadeDelete();
            if ((cascadeDelete == RelationClass.DELETE_OUTGOING) || (cascadeDelete == RelationClass.DELETE_BOTH)) {
              AbstractNode endNode=rel.getEndNode();
              removeNodeFromIndex.execute(endNode);
              doDeleteNode(endNode,cascade);
            }
          }
          List<AbstractRelationship> incomingRels=node.getIncomingRelationships();
          for (          AbstractRelationship rel : incomingRels) {
            int cascadeDelete=rel.cascadeDelete();
            if ((cascadeDelete == RelationClass.DELETE_INCOMING) || (cascadeDelete == RelationClass.DELETE_BOTH)) {
              AbstractNode startNode=rel.getStartNode();
              removeNodeFromIndex.execute(startNode);
              doDeleteNode(startNode,cascade);
              doDeleteNode(rel.getStartNode(),cascade);
            }
          }
        }
        node.onNodeDeletion();
        List<AbstractRelationship> rels=node.getRelationships();
        for (        AbstractRelationship r : rels) {
          deleteRel.execute(r);
        }
        removeNodeFromIndex.execute(node);
        node.getNode().delete();
      }
 catch (      Throwable t) {
        logger.log(Level.WARNING,"Exception while deleting node: {0}",t);
      }
      return null;
    }
  }
);
  return null;
}
