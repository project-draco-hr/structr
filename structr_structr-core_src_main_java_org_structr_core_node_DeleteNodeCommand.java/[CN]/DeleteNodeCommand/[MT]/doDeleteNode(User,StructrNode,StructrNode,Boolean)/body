{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  StructrNode newParentNode=null;
  Node node=graphDb.getNodeById(structrNode.getId());
  if (node != null) {
    Command findNode=Services.createCommand(FindNodeCommand.class);
    if (parentNode == null) {
      if (recursive) {
        Relationship parentRel=node.getSingleRelationship(RelType.HAS_CHILD,Direction.INCOMING);
        newParentNode=(StructrNode)findNode.execute(user,parentRel.getStartNode().getId());
        newParentNode=structrNode.getParentNode(user);
        parentRel.delete();
        for (        Path p : Traversal.description().breadthFirst().relationships(RelType.HAS_CHILD,Direction.OUTGOING).traverse(node)) {
          Node n=p.endNode();
          for (          Relationship l : n.getRelationships(Direction.OUTGOING)) {
            try {
              l.delete();
            }
 catch (            IllegalStateException ise) {
              logger.log(Level.WARNING,"Relationship {0} already deleted in this transaction",l.getId());
            }
          }
          for (          Relationship l : n.getRelationships(Direction.INCOMING)) {
            try {
              l.delete();
            }
 catch (            IllegalStateException ise) {
              logger.log(Level.WARNING,"Relationship {0} already deleted in this transaction",l.getId());
            }
          }
          n.delete();
        }
      }
 else {
        if (structrNode.hasChildren()) {
          setExitCode(Command.exitCode.FAILURE);
          setErrorMessage("Could not delete node " + node.getId() + " because it has still child nodes");
          logger.log(Level.WARNING,getErrorMessage());
          return null;
        }
        Relationship parentRel=node.getSingleRelationship(RelType.HAS_CHILD,Direction.INCOMING);
        if (parentRel != null) {
          newParentNode=structrNode.getParentNode(user);
          parentRel.delete();
        }
        List<StructrRelationship> incomingRels=structrNode.getIncomingRelationships();
        for (        StructrRelationship r : incomingRels) {
          r.getRelationship().delete();
        }
        node.delete();
      }
    }
 else {
      for (      Relationship r : node.getRelationships(RelType.LINK,Direction.INCOMING)) {
        StructrNode p=(StructrNode)findNode.execute(user,r.getStartNode().getId());
        if (p.equals(parentNode)) {
          r.delete();
        }
      }
      newParentNode=parentNode;
    }
  }
 else {
    setExitCode(Command.exitCode.FAILURE);
    setErrorMessage("Node was null");
    return null;
  }
  setExitCode(Command.exitCode.SUCCESS);
  return newParentNode;
}
