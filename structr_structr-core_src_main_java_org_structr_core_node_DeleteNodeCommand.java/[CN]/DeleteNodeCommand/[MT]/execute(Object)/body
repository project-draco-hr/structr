{
  AbstractNode node=null;
  AbstractNode parentNode=null;
  Boolean recursive=false;
  Command findNode=Services.command(securityContext,FindNodeCommand.class);
switch (parameters.length) {
case 2:
    if (parameters[0] instanceof Long) {
      long id=((Long)parameters[0]).longValue();
      node=(AbstractNode)findNode.execute(id);
    }
 else     if (parameters[0] instanceof AbstractNode) {
      node=((AbstractNode)parameters[0]);
    }
 else     if (parameters[0] instanceof String) {
      long id=Long.parseLong((String)parameters[0]);
      node=(AbstractNode)findNode.execute(id);
    }
  break;
case 3:
if (parameters[0] instanceof Long) {
  long id=((Long)parameters[0]).longValue();
  node=(AbstractNode)findNode.execute(id);
}
 else if (parameters[0] instanceof AbstractNode) {
  node=((AbstractNode)parameters[0]);
}
 else if (parameters[0] instanceof String) {
  long id=Long.parseLong((String)parameters[0]);
  node=(AbstractNode)findNode.execute(id);
}
if (parameters[1] instanceof Long) {
long id=((Long)parameters[1]).longValue();
parentNode=(AbstractNode)findNode.execute(id);
}
 else if (parameters[1] instanceof AbstractNode) {
parentNode=(AbstractNode)parameters[1];
}
 else if (parameters[1] instanceof String) {
long id=Long.parseLong((String)parameters[1]);
parentNode=(AbstractNode)findNode.execute(id);
}
break;
case 4:
if (parameters[0] instanceof Long) {
long id=((Long)parameters[0]).longValue();
node=(AbstractNode)findNode.execute(id);
}
 else if (parameters[0] instanceof AbstractNode) {
node=((AbstractNode)parameters[0]);
}
 else if (parameters[0] instanceof String) {
long id=Long.parseLong((String)parameters[0]);
node=(AbstractNode)findNode.execute(id);
}
if (parameters[1] instanceof Long) {
long id=((Long)parameters[1]).longValue();
parentNode=(AbstractNode)findNode.execute(id);
}
 else if (parameters[1] instanceof AbstractNode) {
parentNode=(AbstractNode)parameters[1];
}
 else if (parameters[1] instanceof String) {
long id=Long.parseLong((String)parameters[1]);
parentNode=(AbstractNode)findNode.execute(id);
}
if (parameters[2] instanceof String) {
recursive=Boolean.parseBoolean((String)parameters[2]);
}
 else if (parameters[2] instanceof Boolean) {
recursive=(Boolean)parameters[2];
}
break;
default :
break;
}
if (node == null) {
setExitCode(Command.exitCode.FAILURE);
setErrorMessage("Could not delete node null");
logger.log(Level.WARNING,getErrorMessage());
return null;
}
if (node.getId() == 0) {
setExitCode(Command.exitCode.FAILURE);
setErrorMessage("Deleting the root node is not allowed.");
logger.log(Level.WARNING,getErrorMessage());
return null;
}
return doDeleteNode(node,parentNode,recursive);
}
