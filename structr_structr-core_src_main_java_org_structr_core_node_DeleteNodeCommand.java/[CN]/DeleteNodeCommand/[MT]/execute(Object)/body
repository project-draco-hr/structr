{
  AbstractNode node=null;
  Boolean cascade=false;
  Command findNode=Services.command(securityContext,FindNodeCommand.class);
switch (parameters.length) {
case 1:
    if (parameters[0] instanceof Long) {
      long id=((Long)parameters[0]).longValue();
      node=(AbstractNode)findNode.execute(id);
    }
 else     if (parameters[0] instanceof AbstractNode) {
      node=((AbstractNode)parameters[0]);
    }
 else     if (parameters[0] instanceof String) {
      long id=Long.parseLong((String)parameters[0]);
      node=(AbstractNode)findNode.execute(id);
    }
  break;
case 2:
if (parameters[0] instanceof Long) {
  long id=((Long)parameters[0]).longValue();
  node=(AbstractNode)findNode.execute(id);
}
 else if (parameters[0] instanceof AbstractNode) {
  node=((AbstractNode)parameters[0]);
}
 else if (parameters[0] instanceof String) {
  long id=Long.parseLong((String)parameters[0]);
  node=(AbstractNode)findNode.execute(id);
}
if (parameters[1] instanceof String) {
cascade=Boolean.parseBoolean((String)parameters[2]);
}
 else if (parameters[1] instanceof Boolean) {
cascade=(Boolean)parameters[1];
}
break;
default :
break;
}
if (node == null) {
setExitCode(Command.exitCode.FAILURE);
setErrorMessage("Could not delete node null");
logger.log(Level.WARNING,getErrorMessage());
return null;
}
if (node.getId() == 0) {
setExitCode(Command.exitCode.FAILURE);
setErrorMessage("Deleting the root node is not allowed.");
logger.log(Level.WARNING,getErrorMessage());
return null;
}
doDeleteNode(node,cascade);
return null;
}
