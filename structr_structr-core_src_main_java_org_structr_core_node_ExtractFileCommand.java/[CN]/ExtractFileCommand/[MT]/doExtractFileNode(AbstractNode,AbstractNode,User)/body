{
  if (node != null) {
    if (!(node instanceof File)) {
      setExitCode(Command.exitCode.FAILURE);
      setErrorMessage("Could not extract content of node" + node.getId());
      logger.log(Level.WARNING,getErrorMessage());
      return;
    }
    File archiveNode=(File)node;
    BufferedInputStream in=new BufferedInputStream(archiveNode.getInputStream());
    ArchiveInputStream input=null;
    try {
      input=new ArchiveStreamFactory().createArchiveInputStream(in);
      if (input != null) {
        Command createNode=Services.command(securityContext,CreateNodeCommand.class);
        Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
        Map<String,AbstractNode> createdPaths=new HashMap<String,AbstractNode>();
        try {
          ArchiveEntry ae=input.getNextEntry();
          do {
            String name=ae.getName();
            long size=ae.getSize();
            boolean isDirectory=ae.isDirectory();
            if (!isDirectory) {
              if (name.indexOf("/") > 0) {
                AbstractNode parentNode=targetNode;
                String[] pathElements=name.split(PATH_SEPARATOR);
                int count=0;
                for (                String p : pathElements) {
                  List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
                  if (count < pathElements.length - 1) {
                    attrs.add(new NodeAttribute(AbstractNode.Key.type.name(),"Folder"));
                  }
 else {
                    String contentType=getContentTypeFromFilename(ae.getName());
                    attrs.add(new NodeAttribute(File.Key.contentType.name(),contentType));
                    if (contentType != null && contentType.startsWith("image")) {
                      attrs.add(new NodeAttribute(AbstractNode.Key.type.name(),Image.class.getSimpleName()));
                    }
 else {
                      attrs.add(new NodeAttribute(AbstractNode.Key.type.name(),File.class.getSimpleName()));
                    }
                  }
                  StringBuilder path=new StringBuilder();
                  for (int i=0; i <= count; i++) {
                    path.append(pathElements[i]).append(PATH_SEPARATOR);
                  }
                  if (!(createdPaths.containsKey(path.toString()))) {
                    attrs.add(new NodeAttribute(AbstractNode.Key.name.name(),p));
                    AbstractNode childNode=(AbstractNode)createNode.execute(attrs,user,true);
                    if (childNode instanceof org.structr.core.entity.File) {
                      writeFile(childNode,input);
                    }
                    createRel.execute(parentNode,childNode,RelType.CONTAINS);
                    parentNode=childNode;
                    createdPaths.put(path.toString(),parentNode);
                  }
 else {
                    parentNode=(AbstractNode)createdPaths.get(path.toString());
                  }
                  count++;
                }
              }
 else {
                NodeAttribute typeAttr=new NodeAttribute(AbstractNode.Key.type.name(),"File");
                NodeAttribute sizeAttr=new NodeAttribute(File.Key.size.name(),size);
                NodeAttribute nameAttr=new NodeAttribute(AbstractNode.Key.name.name(),name);
                AbstractNode fileNode=(AbstractNode)createNode.execute(nameAttr,typeAttr,sizeAttr,user);
                createRel.execute(targetNode,fileNode,RelType.CONTAINS);
                writeFile(fileNode,input);
              }
            }
            ae=input.getNextEntry();
          }
 while (ae != null);
        }
 catch (        IOException e) {
          setErrorMessage("Could not read from archive stream");
          setExitCode(Command.exitCode.FAILURE);
          logger.log(Level.WARNING,getErrorMessage().concat(": {0}"),e.getMessage());
          return;
        }
      }
    }
 catch (    ArchiveException e) {
      setErrorMessage("Unknown Archive format");
      setExitCode(Command.exitCode.FAILURE);
      logger.log(Level.WARNING,getErrorMessage().concat(": {0}"),e.getMessage());
      return;
    }
 finally {
      try {
        if (input != null) {
          input.close();
        }
      }
 catch (      IOException e) {
        logger.log(Level.WARNING,"Exception while closing input stream: " + e.getMessage());
      }
    }
  }
 else {
    setErrorMessage("Node to extract was null");
    setExitCode(Command.exitCode.FAILURE);
    logger.log(Level.WARNING,getErrorMessage());
    return;
  }
  setExitCode(Command.exitCode.SUCCESS);
}
