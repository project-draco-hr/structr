{
  Object result=null;
  if (argument instanceof Node) {
    result=nodeFactory.createNode(securityContext,(Node)argument);
  }
 else   if (argument instanceof Long) {
    long id=((Long)argument).longValue();
    Node node=null;
    try {
      node=graphDb.getNodeById(id);
      result=nodeFactory.createNode(securityContext,node);
    }
 catch (    NotFoundException nfe) {
      logger.log(Level.WARNING,"Node with id {0} not found in database!",id);
    }
  }
 else   if (argument instanceof String) {
    try {
      long id=Long.parseLong((String)argument);
      Node node=graphDb.getNodeById(id);
      result=nodeFactory.createNode(securityContext,node);
    }
 catch (    NumberFormatException ex) {
      logger.log(Level.FINE,"Could not parse {0} to number",argument);
      String path=(String)argument;
      Node rootNode=graphDb.getReferenceNode();
      if (path.endsWith("*")) {
        result=TreeHelper.getNodesByPath(nodeFactory.createNode(securityContext,rootNode),path,true);
      }
 else {
        result=TreeHelper.getNodeByPath(nodeFactory.createNode(securityContext,rootNode),path,true);
      }
    }
  }
 else   if (argument instanceof XPath) {
    Node rootNode=graphDb.getReferenceNode();
    XPath xpath=(XPath)argument;
    String path=xpath.getXPath();
    if (path.endsWith("*")) {
      result=TreeHelper.getNodesByPath(nodeFactory.createNode(securityContext,rootNode),path,true);
    }
 else {
      result=TreeHelper.getNodeByPath(nodeFactory.createNode(securityContext,rootNode),path,true);
    }
  }
 else   if (argument instanceof ReferenceNode) {
    Node node=graphDb.getReferenceNode();
    result=nodeFactory.createNode(securityContext,node);
  }
 else   if (argument instanceof NodeAttribute) {
    throw new UnsupportedOperationException("Not supported yet, use SearchNodeCommand instead!");
  }
 else   if (argument instanceof AbstractNode) {
    AbstractNode startNode=(AbstractNode)argument;
    Node s=null;
    if (startNode == null) {
      s=graphDb.getReferenceNode();
    }
 else {
      s=graphDb.getNodeById(startNode.getId());
    }
    result=nodeFactory.createNodes(securityContext,Traversal.description().breadthFirst().relationships(RelType.HAS_CHILD,Direction.OUTGOING).traverse(s).nodes());
  }
  return result;
}
