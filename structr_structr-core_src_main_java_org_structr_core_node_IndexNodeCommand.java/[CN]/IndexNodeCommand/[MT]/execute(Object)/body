{
  index=(Index<Node>)arguments.get("index");
  long id=0;
  AbstractNode node=null;
  String key=null;
switch (parameters.length) {
case 1:
    if (parameters[0] instanceof Long) {
      id=((Long)parameters[0]).longValue();
      Command findNode=Services.command(FindNodeCommand.class);
      node=(AbstractNode)findNode.execute(new SuperUser(),id);
      indexNode(node);
    }
 else     if (parameters[0] instanceof String) {
      id=Long.parseLong((String)parameters[0]);
      Command findNode=Services.command(FindNodeCommand.class);
      node=(AbstractNode)findNode.execute(new SuperUser(),id);
      indexNode(node);
    }
 else     if (parameters[0] instanceof AbstractNode) {
      node=(AbstractNode)parameters[0];
      indexNode(node);
    }
 else     if (parameters[0] instanceof List) {
      indexNodes((List<AbstractNode>)parameters[0]);
    }
  break;
case 2:
if (parameters[0] instanceof Long) {
  id=((Long)parameters[0]).longValue();
  Command findNode=Services.command(FindNodeCommand.class);
  node=(AbstractNode)findNode.execute(new SuperUser(),id);
}
 else if (parameters[0] instanceof String) {
  id=Long.parseLong((String)parameters[0]);
  Command findNode=Services.command(FindNodeCommand.class);
  node=(AbstractNode)findNode.execute(new SuperUser(),id);
}
 else if (parameters[0] instanceof AbstractNode) {
  node=(AbstractNode)parameters[0];
}
if (parameters[1] instanceof String) {
key=(String)parameters[1];
}
indexProperty(node,key);
break;
default :
logger.log(Level.SEVERE,"Wrong number of parameters for the index property command: {0}",parameters);
return null;
}
return null;
}
