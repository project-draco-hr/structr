{
  if (key == null) {
    logger.log(Level.SEVERE,"Node {0} has null key",new Object[]{node.getId()});
    return;
  }
  boolean emptyKey=StringUtils.isEmpty((String)key);
  if (emptyKey) {
    logger.log(Level.SEVERE,"Node {0} has empty, not-null key, removing property",new Object[]{node.getId()});
    node.getNode().removeProperty(key);
    return;
  }
  if (!(node.getNode().hasProperty(key))) {
    logger.log(Level.FINE,"Node {0} has no key {1}, ignoring",new Object[]{node.getId(),key});
    return;
  }
  Object value=node.getPropertyForIndexing(key);
  boolean emptyValue=((value instanceof String) && StringUtils.isEmpty((String)value));
  if (value == null) {
    logger.log(Level.SEVERE,"Node {0} has null value for key {1}, removing property",new Object[]{node.getId(),key});
    node.getNode().removeProperty(key);
  }
 else   if (emptyValue) {
    logger.log(Level.WARNING,"Node {0} has empty, non-null value for key {1}",new Object[]{node.getId(),key});
  }
 else {
    index.remove(node.getNode(),key);
    logger.log(Level.FINE,"Node {0}: Old value for key {1} removed from index",new Object[]{node.getId(),key});
    index.add(node.getNode(),key,value);
    logger.log(Level.FINE,"Node {0}: New value {2} added to index for key {1}",new Object[]{node.getId(),key,value});
  }
}
