{
  return (new Iterator<T>(){
    private boolean hasNextCalled=false;
    private T currentElement=null;
    @Override public boolean hasNext(){
      do {
        if (sourceIterator.hasNext()) {
          currentElement=sourceIterator.next();
        }
 else {
          currentElement=null;
        }
      }
 while (currentElement != null && !accept(currentElement));
      hasNextCalled=true;
      return (currentElement != null);
    }
    @Override public T next(){
      if (!hasNextCalled) {
        hasNext();
      }
 else {
        hasNextCalled=false;
      }
      return (currentElement);
    }
    @Override public void remove(){
      throw new UnsupportedOperationException("IterableFilterIterator does not support removal of elements");
    }
  }
);
}
