{
  StringBuilder ret=new StringBuilder(200);
  AbstractNode currentNode=null;
  Callback callback=null;
  String commandLine=null;
  SecurityContext securityContext=null;
  if (parameters.length == 4) {
    if (parameters[0] instanceof SecurityContext) {
      securityContext=(SecurityContext)parameters[0];
    }
    if (parameters[1] instanceof AbstractNode) {
      currentNode=(AbstractNode)parameters[1];
    }
    if (parameters[2] instanceof String) {
      commandLine=(String)parameters[2];
    }
    if (parameters[3] instanceof Callback) {
      callback=(Callback)parameters[3];
    }
    if (commandLine != null) {
      User user=securityContext.getUser();
      boolean superUser=(user != null) && (user instanceof SuperUser);
      ret.append("<p>");
      ret.append((user != null) ? user.getName() : "anonymous");
      ret.append("@structr");
      ret.append(superUser ? "# " : "$ ");
      ret.append(commandLine);
      ret.append("</p>");
      Object[] commands=splitCommandLine(commandLine);
      if (commands.length > 0) {
        try {
          PrimaryOperation primaryOperation=null;
          for (int currentPosition=0; currentPosition < commands.length; currentPosition++) {
            Operation operation=getOperation(securityContext,commands[currentPosition]);
            if (operation != null) {
              if (currentNode != null) {
                operation.setCurrentNode(currentNode);
              }
              currentPosition+=handleParameters(ret,currentPosition,commands,operation);
              if (primaryOperation == null) {
                if (operation instanceof PrimaryOperation) {
                  primaryOperation=(PrimaryOperation)operation;
                  if (callback != null) {
                    primaryOperation.addCallback(callback);
                  }
                }
 else {
                  throw new InvalidOperationException(operation.getKeyword() + " is not a primary operation");
                }
              }
 else {
                if (operation instanceof Transformation) {
                  Transformation transformation=(Transformation)operation;
                  transformation.transform(primaryOperation);
                }
 else {
                  throw new InvalidOperationException(operation.getKeyword() + " is not a transformation");
                }
              }
            }
 else {
              throw new InvalidOperationException(commands[currentPosition].toString() + " not found");
            }
          }
          if ((primaryOperation != null) && primaryOperation.canExecute()) {
            StringBuilder stdOut=new StringBuilder(200);
            if (!primaryOperation.executeOperation(stdOut)) {
              ret.append("<p class=\"error\">Execution failed</p>\n");
            }
            if (stdOut.length() > 0) {
              ret.append("<p>");
              ret.append(stdOut.toString());
              ret.append("</p>\n");
            }
          }
 else {
            ret.append("<p class=\"error\">Cannot execute</p>\n");
          }
        }
 catch (        NodeCommandException ncex) {
          ret.append("<p class=\"error\">ERROR: ").append(ncex.getMessage()).append("</p>\n");
        }
      }
    }
  }
  return (ret.toString());
}
