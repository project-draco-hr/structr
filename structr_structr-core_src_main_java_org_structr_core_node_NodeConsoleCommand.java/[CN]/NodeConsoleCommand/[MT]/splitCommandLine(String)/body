{
  ArrayList<String> parts=new ArrayList<String>();
  StringBuilder currentPart=new StringBuilder(50);
  int len=commandLine.length();
  boolean inQuotes=false;
  boolean equals=false;
  for (int i=0; i < len; i++) {
    char ch=commandLine.charAt(i);
switch (ch) {
case '\'':
case '"':
      inQuotes=!inQuotes;
    if (!equals) {
      if (currentPart.toString().trim().length() > 0) {
        parts.add(currentPart.toString().trim());
      }
      currentPart.setLength(0);
    }
  break;
case '=':
if (!inQuotes) {
  equals=true;
  currentPart.append("=");
}
break;
case ',':
if (!inQuotes) {
if (currentPart.toString().trim().length() > 0) {
parts.add(currentPart.toString().trim());
}
currentPart.setLength(0);
parts.add(",");
}
case ' ':
if (inQuotes) {
currentPart.append(ch);
}
 else {
if (currentPart.toString().trim().length() > 0) {
parts.add(currentPart.toString().trim());
}
currentPart.setLength(0);
}
break;
default :
equals=false;
currentPart.append(ch);
break;
}
}
if (currentPart.toString().trim().length() > 0) {
parts.add(currentPart.toString().trim());
}
List<String> secondPassResult=new LinkedList<String>();
{
StringBuilder buf=new StringBuilder(40);
int size=parts.size();
for (int i=0; i < size; i++) {
String nextPart=parts.size() > i + 1 ? parts.get(i + 1) : null;
String part=parts.get(i);
if ("=".equals(nextPart)) {
buf.append(part);
buf.append("=");
i++;
}
 else {
if (buf.length() > 0) {
buf.append(part);
secondPassResult.add(buf.toString());
buf.setLength(0);
}
 else {
secondPassResult.add(part);
}
}
}
if (buf.length() > 0) {
secondPassResult.add(buf.toString());
}
}
ArrayList thirdPassResult=new ArrayList();
{
List<String> list=new LinkedList<String>();
int size=secondPassResult.size();
for (int i=0; i < size; i++) {
String nextPart=secondPassResult.size() > i + 1 ? secondPassResult.get(i + 1) : null;
String part=secondPassResult.get(i);
if (",".equals(nextPart)) {
list.add(part);
i++;
}
 else {
if (!list.isEmpty()) {
list.add(part);
thirdPassResult.add(list);
list=new LinkedList<String>();
}
 else {
thirdPassResult.add(part);
}
}
}
if (!list.isEmpty()) {
thirdPassResult.add(list);
}
}
return (thirdPassResult.toArray());
}
