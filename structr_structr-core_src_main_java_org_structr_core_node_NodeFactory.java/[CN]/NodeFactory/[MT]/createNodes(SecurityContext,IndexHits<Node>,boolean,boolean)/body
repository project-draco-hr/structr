{
  int size=input.size();
  if (size <= 0) {
    return Collections.EMPTY_LIST;
  }
  List<AbstractNode> nodes=new ArrayList<AbstractNode>(size + 1);
  if (input != null && input instanceof SpatialRecordHits) {
    Command graphDbCommand=Services.command(securityContext,GraphDatabaseCommand.class);
    GraphDatabaseService graphDb=(GraphDatabaseService)graphDbCommand.execute();
    if (input.iterator().hasNext()) {
      for (      Node node : input) {
        AbstractNode n=createNode(securityContext,graphDb.getNodeById((Long)node.getProperty("id")));
        addIfReadable(securityContext,n,nodes,includeDeleted,publicOnly);
        for (        AbstractNode nodeAt : getNodesAt(n)) {
          addIfReadable(securityContext,nodeAt,nodes,includeDeleted,publicOnly);
        }
      }
    }
  }
 else {
    if ((input != null) && input.iterator().hasNext()) {
      for (      Node node : input) {
        AbstractNode n=createNode(securityContext,(Node)node);
        addIfReadable(securityContext,n,nodes,includeDeleted,publicOnly);
      }
    }
  }
  return nodes;
}
