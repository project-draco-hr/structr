{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Map<RelationshipType,Long> statistics=new LinkedHashMap<RelationshipType,Long>();
  Object arg0=parameters[0];
  Object arg1=parameters[1];
  AbstractNode sNode=(AbstractNode)arg0;
  Direction dir=(Direction)arg1;
  Node node=null;
  long id=-1;
  try {
    id=sNode.getId();
    if (id > -1) {
      node=graphDb.getNodeById(sNode.getId());
    }
 else {
      return statistics;
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,"Not found: " + id,e.getMessage());
    return statistics;
  }
  Iterable<Relationship> rels;
  if (arg1 != null) {
    rels=node.getRelationships(dir);
  }
 else {
    rels=node.getRelationships();
  }
  try {
    Map<RelationshipType,LongValueHolder> values=new LinkedHashMap<RelationshipType,LongValueHolder>();
    for (    Relationship r : rels) {
      RelationshipType relType=r.getType();
      LongValueHolder count=values.get(relType);
      if (count == null) {
        count=new LongValueHolder();
        values.put(relType,count);
      }
      count.inc();
    }
    for (    Entry<RelationshipType,LongValueHolder> entry : values.entrySet()) {
      RelationshipType key=entry.getKey();
      LongValueHolder value=entry.getValue();
      statistics.put(key,value.getValue());
    }
  }
 catch (  RuntimeException e) {
    logger.log(Level.WARNING,"Exception occured.",e);
  }
  return statistics;
}
