{
  Command findNode=Services.command(securityContext,FindNodeCommand.class);
  AbstractNode node=null;
  List<AbstractNode> nodeList=null;
  User user=null;
  long id=0;
switch (parameters.length) {
case 2:
    if (parameters[0] instanceof Long) {
      id=((Long)parameters[0]).longValue();
    }
 else     if (parameters[0] instanceof AbstractNode) {
      id=((AbstractNode)parameters[0]).getId();
    }
 else     if (parameters[0] instanceof List) {
      nodeList=(List<AbstractNode>)parameters[0];
    }
 else     if (parameters[0] instanceof String) {
      id=Long.parseLong((String)parameters[0]);
    }
 else {
      throw new IllegalArgumentException("Unable to get node id from " + parameters[0]);
    }
  node=(AbstractNode)findNode.execute(id);
if (parameters[1] instanceof User) {
  user=(User)parameters[1];
}
 else {
  throw new IllegalArgumentException("Second parameter is no user: " + parameters[1]);
}
break;
default :
break;
}
if (user != null) {
if (nodeList != null) {
setOwner(nodeList,user);
}
 else {
setOwner(node,user);
}
}
return null;
}
