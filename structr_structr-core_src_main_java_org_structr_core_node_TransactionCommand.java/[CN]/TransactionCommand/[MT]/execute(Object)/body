{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  boolean topLevelTransaction=false;
  FrameworkException exception=null;
  Object ret=null;
  if ((parameters.length > 0) && (parameters[0] instanceof StructrTransaction)) {
    StructrTransaction transaction=(StructrTransaction)parameters[0];
    Transaction tx=graphDb.beginTx();
    topLevelTransaction=tx instanceof TopLevelTransaction;
    try {
      ret=transaction.execute();
      tx.success();
      logger.log(Level.FINEST,"Transaction successfull");
    }
 catch (    FrameworkException frameworkException) {
      tx.failure();
      logger.log(Level.WARNING,"Transaction failure",frameworkException);
      exception=frameworkException;
    }
catch (    DeadlockDetectedException ddex) {
      tx.failure();
      logger.log(Level.SEVERE,"Neo4j detected a deadlock!",ddex.getMessage());
    }
 finally {
synchronized (TransactionCommand.class) {
        long transactionKey=nextLong();
        EntityContext.setSecurityContext(securityContext);
        EntityContext.setTransactionKey(transactionKey);
        try {
          tx.finish();
        }
 catch (        Throwable t) {
          exception=EntityContext.getFrameworkException(transactionKey);
        }
      }
    }
  }
 else   if ((parameters.length > 0) && (parameters[0] instanceof BatchTransaction)) {
    BatchTransaction transaction=(BatchTransaction)parameters[0];
    Transaction tx=graphDb.beginTx();
    topLevelTransaction=tx instanceof TopLevelTransaction;
    try {
      ret=transaction.execute(tx);
      tx.success();
      logger.log(Level.FINEST,"Transaction successfull");
    }
 catch (    FrameworkException frameworkException) {
      tx.failure();
      logger.log(Level.WARNING,"Transaction failure",frameworkException);
      exception=frameworkException;
    }
catch (    DeadlockDetectedException ddex) {
      tx.failure();
      logger.log(Level.SEVERE,"Neo4j detected a deadlock!",ddex.getMessage());
    }
 finally {
synchronized (TransactionCommand.class) {
        long transactionKey=nextLong();
        EntityContext.setSecurityContext(securityContext);
        EntityContext.setTransactionKey(transactionKey);
        try {
          tx.finish();
        }
 catch (        Throwable t) {
          exception=EntityContext.getFrameworkException(transactionKey);
        }
      }
    }
  }
  if (exception != null) {
    throw exception;
  }
  if (topLevelTransaction) {
    TransactionChangeSet changeSet=EntityContext.getTransactionChangeSet();
    final Queue<AbstractNode> propagationQueue=changeSet.getPropagationQueue();
    final Set<AbstractNode> propagationSet=new LinkedHashSet<AbstractNode>();
    propagationSet.addAll(propagationQueue);
    if (!propagationQueue.isEmpty()) {
      do {
        final AbstractNode node=propagationQueue.poll();
        if (!propagationSet.contains(node)) {
          propagationSet.addAll(node.getNodesForModificationPropagation());
        }
      }
 while (!propagationQueue.isEmpty());
    }
    Transaction postProcessingTransaction=graphDb.beginTx();
    try {
      propagateModification(securityContext,propagationSet);
      afterCreation(securityContext,changeSet.getCreatedNodes());
      afterCreation(securityContext,changeSet.getCreatedRelationships());
      afterModification(securityContext,changeSet.getModifiedNodes());
      afterModification(securityContext,changeSet.getModifiedRelationships());
      afterDeletion(securityContext,changeSet.getDeletedNodes());
      afterDeletion(securityContext,changeSet.getDeletedRelationships());
      afterOwnerModification(securityContext,changeSet.getOwnerModifiedNodes());
      afterSecurityModification(securityContext,changeSet.getSecurityModifiedNodes());
      afterLocationModification(securityContext,changeSet.getLocationModifiedNodes());
      EntityContext.clearTransactionData();
      postProcessingTransaction.success();
    }
 catch (    Throwable t) {
      postProcessingTransaction.failure();
    }
 finally {
      long transactionKey=nextLong();
      EntityContext.setSecurityContext(securityContext);
      EntityContext.setTransactionKey(transactionKey);
      try {
        postProcessingTransaction.finish();
      }
 catch (      Throwable t) {
        logger.log(Level.FINE,"Transaction failure",t);
      }
      EntityContext.clearTransactionData();
    }
  }
  return ret;
}
