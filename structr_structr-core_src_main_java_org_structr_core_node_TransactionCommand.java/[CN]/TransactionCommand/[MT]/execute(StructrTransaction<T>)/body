{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Long transactionKey=transactionKeys.get();
  Transaction tx=tramsactions.get();
  Throwable exception=null;
  T ret=null;
  if (tx == null || transactionKey == null) {
    tx=graphDb.beginTx();
    transactionKey=nextLong();
    transactionKeys.set(transactionKey);
    tramsactions.set(tx);
    EntityContext.setSecurityContext(securityContext);
    EntityContext.setTransactionKey(transactionKey);
    try {
      ret=transaction.execute();
      tx.success();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      tx.failure();
      exception=t;
    }
 finally {
      tramsactions.remove();
      transactionKeys.remove();
synchronized (TransactionCommand.class) {
        try {
          tx.finish();
        }
 catch (        Throwable t) {
          t.printStackTrace();
          exception=EntityContext.getFrameworkException(transactionKey);
        }
      }
    }
    if (exception != null) {
      exception.printStackTrace();
      if (exception instanceof FrameworkException) {
        EntityContext.clearTransactionData(transactionKey);
        throw (FrameworkException)exception;
      }
    }
    final TransactionChangeSet changeSet=EntityContext.getTransactionChangeSet(transactionKey);
    Long depthValue=depths.get();
    long depth=0;
    if (depthValue != null) {
      depth=depthValue.longValue();
    }
    if (debug) {
      indent();
      System.out.println("BEFORE CHANGESET: " + transactionKey);
    }
    if (changeSet != null) {
      if (debug) {
        indent();
        System.out.println("BEFORE DEPTH: " + depth);
      }
      if (depth < MAX_DEPTH && !changeSet.systemOnly()) {
        if (debug) {
          indent();
          System.out.println("AFTER DEPTH: " + depth);
        }
        depths.set(depth + 1);
        try {
          Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
            @Override public Object execute() throws FrameworkException {
              notifyChangeSet(changeSet);
              return null;
            }
          }
);
        }
 catch (        Throwable t) {
          t.printStackTrace();
        }
        depths.set(depth);
      }
 else {
        if (depth == MAX_DEPTH) {
          logger.log(Level.SEVERE,"Maximum depth of nested modifications reached! You probably forgot to mark a property as a system property.");
        }
        if (debug) {
          indent();
          System.out.println("CHANGESET STATS: " + changeSet.toString());
        }
      }
    }
    EntityContext.clearTransactionData(transactionKey);
    return ret;
  }
 else {
    if (debug) {
      indent();
      System.out.println("EXISTING TRANSACTION: " + transactionKey);
    }
    return transaction.execute();
  }
}
