{
  Command findNodeCommand=Services.command(securityContext,FindNodeCommand.class);
  AbstractNode ret=null;
  if (parameter instanceof Collection) {
    throw new InvalidParameterException("MOVE does not take multiple arguments");
  }
 else {
    try {
      Object findNodeReturnValue=findNodeCommand.execute(currentNode,parameter);
      if (findNodeReturnValue instanceof Collection) {
        throw new InvalidParameterException("MOVE does not support wildcards");
      }
 else       if (findNodeReturnValue instanceof AbstractNode) {
        ret=(AbstractNode)findNodeReturnValue;
      }
 else {
        throw new InvalidParameterException("Node " + parameter.toString() + " not found");
      }
    }
 catch (    FrameworkException fex) {
      fex.printStackTrace();
    }
  }
  return (ret);
}
