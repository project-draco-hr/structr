{
  if ((parameters == null) || (parameters.length < 4)) {
    logger.log(Level.WARNING,"4 or more parameters are required for advanced search.");
    return Collections.emptyList();
  }
  List<SearchAttribute> searchAttrs=new ArrayList<SearchAttribute>();
  AbstractNode topNode=null;
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  String sortKey=null;
  boolean sortDescending=false;
  int pageSize=NodeFactory.DEFAULT_PAGE_SIZE;
  int page=NodeFactory.DEFAULT_PAGE;
  String offsetId=null;
  Integer sortType=null;
switch (parameters.length) {
case 10:
    if (parameters[9] instanceof Integer) {
      sortType=((Integer)parameters[9]).intValue();
    }
case 9:
  if (parameters[8] instanceof String) {
    offsetId=(String)parameters[8];
  }
case 8:
if (parameters[7] instanceof Integer) {
  page=((Integer)parameters[7]).intValue();
}
case 7:
if (parameters[6] instanceof Integer) {
pageSize=((Integer)parameters[6]).intValue();
}
case 6:
if (parameters[5] instanceof Boolean) {
sortDescending=(Boolean)parameters[5];
}
case 5:
if (parameters[4] instanceof String) {
sortKey=(String)parameters[4];
}
 else if (parameters[4] instanceof PropertyKey) {
sortKey=((PropertyKey)parameters[4]).name();
}
case 4:
if (parameters[0] instanceof AbstractNode) {
topNode=(AbstractNode)parameters[0];
}
if (parameters[1] instanceof Boolean) {
includeDeletedAndHidden=(Boolean)parameters[1];
}
if (parameters[2] instanceof Boolean) {
publicOnly=(Boolean)parameters[2];
}
if (parameters[3] instanceof List) {
searchAttrs=(List<SearchAttribute>)parameters[3];
}
break;
}
return search(securityContext,topNode,includeDeletedAndHidden,publicOnly,searchAttrs,sortKey,sortDescending,pageSize,page,offsetId,sortType);
}
