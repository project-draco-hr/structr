{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Index<Node> index=(Index<Node>)arguments.get("index");
  StructrNodeFactory nodeFactory=(StructrNodeFactory)arguments.get("nodeFactory");
  Map<String,String> typesAndKeys=new LinkedHashMap<String,String>();
  List<AbstractNode> finalResult=new LinkedList<AbstractNode>();
  if (graphDb != null) {
    BooleanQuery query=new BooleanQuery();
    List<BooleanSearchAttribute> booleanAttributes=new LinkedList<BooleanSearchAttribute>();
    String textualQueryString="";
    for (    SearchAttribute attr : searchAttrs) {
      if (attr instanceof SearchAttributeGroup) {
        SearchAttributeGroup attributeGroup=(SearchAttributeGroup)attr;
        List<SearchAttribute> groupedAttributes=attributeGroup.getSearchAttributes();
        String subQueryString="";
        if (!(groupedAttributes.isEmpty())) {
          BooleanQuery subQuery=new BooleanQuery();
          String subQueryPrefix=(StringUtils.isBlank(textualQueryString) ? "" : attributeGroup.getSearchOperator()) + " ( ";
          for (          SearchAttribute groupedAttr : groupedAttributes) {
            if (groupedAttr instanceof TextualSearchAttribute) {
              extractTypeAndKey(groupedAttr,typesAndKeys);
              subQuery.add(toQuery((TextualSearchAttribute)groupedAttr),translateToBooleanClauseOccur(groupedAttr.getSearchOperator()));
              subQueryString+=toQueryString((TextualSearchAttribute)groupedAttr,StringUtils.isBlank(subQueryString));
            }
          }
          query.add(subQuery,translateToBooleanClauseOccur(attributeGroup.getSearchOperator()));
          String subQuerySuffix=" ) ";
          if (StringUtils.isNotBlank(subQueryString)) {
            textualQueryString+=subQueryPrefix + subQueryString + subQuerySuffix;
          }
        }
      }
 else       if (attr instanceof TextualSearchAttribute) {
        extractTypeAndKey(attr,typesAndKeys);
        query.add(toQuery((TextualSearchAttribute)attr),translateToBooleanClauseOccur(attr.getSearchOperator()));
        textualQueryString+=toQueryString((TextualSearchAttribute)attr,StringUtils.isBlank(textualQueryString));
      }
 else       if (attr instanceof BooleanSearchAttribute) {
        booleanAttributes.add((BooleanSearchAttribute)attr);
      }
    }
    List<AbstractNode> intermediateResult;
    if (searchAttrs.isEmpty() || StringUtils.isBlank(textualQueryString)) {
      if (topNode != null) {
        intermediateResult=topNode.getAllChildren();
      }
 else {
        intermediateResult=new LinkedList<AbstractNode>();
      }
    }
 else {
      long t0=System.currentTimeMillis();
      logger.log(Level.FINE,"Textual Query String: {0}",textualQueryString);
      for (      Entry<String,String> requiredLock : typesAndKeys.entrySet()) {
        String type=requiredLock.getKey();
        String key=requiredLock.getValue();
        Semaphore semaphore=EntityContext.getSemaphoreForTypeAndProperty(type,key);
        if (semaphore != null) {
          try {
            semaphore.acquire();
          }
 catch (          InterruptedException iex) {
          }
        }
      }
      IndexHits hits=index.query(new QueryContext(textualQueryString));
      long t1=System.currentTimeMillis();
      for (      Entry<String,String> requiredLock : typesAndKeys.entrySet()) {
        String type=requiredLock.getKey();
        String key=requiredLock.getValue();
        Semaphore semaphore=EntityContext.getSemaphoreForTypeAndProperty(type,key);
        if (semaphore != null) {
          semaphore.release();
        }
      }
      logger.log(Level.FINE,"Querying index took {0} ms, {1} results retrieved.",new Object[]{t1 - t0,hits.size()});
      intermediateResult=nodeFactory.createNodes(securityContext,hits,includeDeleted,publicOnly);
      long t2=System.currentTimeMillis();
      logger.log(Level.FINE,"Creating structr nodes took {0} ms, {1} nodes made.",new Object[]{t2 - t1,intermediateResult.size()});
    }
    long t2=System.currentTimeMillis();
    if (booleanAttributes.isEmpty()) {
      finalResult.addAll(intermediateResult);
    }
 else {
      for (      AbstractNode node : intermediateResult) {
        for (        BooleanSearchAttribute attr : booleanAttributes) {
          String key=attr.getKey();
          Boolean searchValue=attr.getValue();
          SearchOperator op=attr.getSearchOperator();
          Object nodeValue=node.getProperty(key);
          if (op.equals(SearchOperator.NOT)) {
            if ((nodeValue != null) && !(nodeValue.equals(searchValue))) {
              attr.addToResult(node);
            }
          }
 else {
            if ((nodeValue == null) && (searchValue == null)) {
              attr.addToResult(node);
            }
            if ((nodeValue != null) && nodeValue.equals(searchValue)) {
              attr.addToResult(node);
            }
          }
        }
      }
      for (      BooleanSearchAttribute attr : booleanAttributes) {
        SearchOperator op=attr.getSearchOperator();
        List<AbstractNode> result=attr.getResult();
        if (op.equals(SearchOperator.AND)) {
          intermediateResult=ListUtils.intersection(intermediateResult,result);
        }
 else         if (op.equals(SearchOperator.AND)) {
          intermediateResult=ListUtils.sum(intermediateResult,result);
        }
 else         if (op.equals(SearchOperator.NOT)) {
          intermediateResult=ListUtils.subtract(intermediateResult,result);
        }
      }
      finalResult.addAll(intermediateResult);
    }
    long t3=System.currentTimeMillis();
    logger.log(Level.FINE,"Filtering nodes took {0} ms. Result size now {1}.",new Object[]{t3 - t2,finalResult.size()});
  }
  long t4=System.currentTimeMillis();
  Collections.sort(finalResult);
  long t5=System.currentTimeMillis();
  logger.log(Level.FINE,"Sorting nodes took {0} ms.",new Object[]{t5 - t4});
  return finalResult;
}
