{
  if (page == 0 || pageSize <= 0) {
    return Result.EMPTY_RESULT;
  }
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  NodeFactory nodeFactory=new NodeFactory(securityContext,includeDeletedAndHidden,publicOnly,pageSize,page,offsetId);
  Result finalResult=new Result(new ArrayList<AbstractNode>(),null,true,false);
  boolean allExactMatch=true;
  final Index<Node> index;
  if (graphDb != null) {
    List<FilterSearchAttribute> filters=new ArrayList<FilterSearchAttribute>();
    List<TextualSearchAttribute> textualAttributes=new ArrayList<TextualSearchAttribute>();
    StringBuilder queryString=new StringBuilder();
    DistanceSearchAttribute distanceSearch=null;
    GeoCodingResult coords=null;
    Double dist=null;
    for (    SearchAttribute attr : searchAttrs) {
      if (attr instanceof DistanceSearchAttribute) {
        distanceSearch=(DistanceSearchAttribute)attr;
        coords=GeoHelper.geocode(distanceSearch.getKey().name());
        dist=distanceSearch.getValue();
      }
 else       if (attr instanceof SearchAttributeGroup) {
        SearchAttributeGroup attributeGroup=(SearchAttributeGroup)attr;
        handleAttributeGroup(attributeGroup,queryString,textualAttributes,allExactMatch);
      }
 else       if (attr instanceof TextualSearchAttribute) {
        textualAttributes.add((TextualSearchAttribute)attr);
        queryString.append(toQueryString((TextualSearchAttribute)attr,StringUtils.isBlank(queryString.toString())));
        allExactMatch&=isExactMatch(((TextualSearchAttribute)attr).getValue());
      }
 else       if (attr instanceof FilterSearchAttribute) {
        filters.add((FilterSearchAttribute)attr);
      }
    }
    if (distanceSearch == null && textualAttributes.size() < 1) {
      throw new UnsupportedArgumentError("At least one texutal search attribute or distance search have to be present in search attributes!");
    }
    Result intermediateResult;
    if (searchAttrs.isEmpty() && StringUtils.isBlank(queryString.toString())) {
      intermediateResult=new Result(new ArrayList<AbstractNode>(),null,false,false);
    }
 else {
      long t0=System.nanoTime();
      logger.log(Level.FINE,"Textual Query String: {0}",queryString);
      QueryContext queryContext=new QueryContext(queryString);
      IndexHits hits=null;
      if (sortKey != null) {
        if (sortType != null) {
          queryContext.sort(new Sort(new SortField(sortKey.name(),sortType,sortDescending)));
        }
 else {
          queryContext.sort(new Sort(new SortField(sortKey.name(),Locale.getDefault(),sortDescending)));
        }
      }
      if (distanceSearch != null) {
        if (coords != null) {
          Map<String,Object> params=new HashMap<String,Object>();
          params.put(LayerNodeIndex.POINT_PARAMETER,coords.toArray());
          params.put(LayerNodeIndex.DISTANCE_IN_KM_PARAMETER,dist);
          index=(LayerNodeIndex)arguments.get(NodeIndex.layer.name());
synchronized (index) {
            hits=index.query(LayerNodeIndex.WITHIN_DISTANCE_QUERY,params);
          }
        }
      }
 else       if ((textualAttributes.size() == 1) && textualAttributes.get(0).getKey().equals(AbstractNode.uuid.name())) {
        index=(Index<Node>)arguments.get(NodeIndex.uuid.name());
synchronized (index) {
          hits=index.get(AbstractNode.uuid.name(),decodeExactMatch(textualAttributes.get(0).getValue()));
        }
      }
 else       if (allExactMatch) {
        index=(Index<Node>)arguments.get(NodeIndex.keyword.name());
synchronized (index) {
          try {
            hits=index.query(queryContext);
          }
 catch (          NumberFormatException nfe) {
            logger.log(Level.SEVERE,"Could not sort results",nfe);
            queryContext.sort(null);
            hits=index.query(queryContext);
          }
        }
      }
 else {
        index=(Index<Node>)arguments.get(NodeIndex.fulltext.name());
synchronized (index) {
          hits=index.query(queryContext);
        }
      }
      long t1=System.nanoTime();
      logger.log(Level.FINE,"Querying index took {0} ns, size() says {1} results.",new Object[]{t1 - t0,(hits != null) ? hits.size() : 0});
      intermediateResult=nodeFactory.createNodes(hits);
      if (hits != null) {
        hits.close();
      }
      long t2=System.nanoTime();
      logger.log(Level.FINE,"Creating structr nodes took {0} ns, {1} nodes made.",new Object[]{t2 - t1,intermediateResult.getResults().size()});
    }
    List<? extends GraphObject> intermediateResultList=intermediateResult.getResults();
    long t2=System.nanoTime();
    if (!filters.isEmpty()) {
      for (      GraphObject obj : intermediateResultList) {
        AbstractNode node=(AbstractNode)obj;
        for (        FilterSearchAttribute attr : filters) {
          PropertyKey key=attr.getKey();
          Object searchValue=attr.getValue();
          SearchOperator op=attr.getSearchOperator();
          Object nodeValue=node.getProperty(key);
          if (op.equals(SearchOperator.NOT)) {
            if ((nodeValue != null) && !(nodeValue.equals(searchValue))) {
              attr.addToResult(node);
            }
          }
 else {
            if ((nodeValue == null) && (searchValue == null)) {
              attr.addToResult(node);
            }
            if ((nodeValue != null) && nodeValue.equals(searchValue)) {
              attr.addToResult(node);
            }
          }
        }
      }
      for (      FilterSearchAttribute attr : filters) {
        SearchOperator op=attr.getSearchOperator();
        List<? extends GraphObject> result=attr.getResult();
        if (op.equals(SearchOperator.AND)) {
          intermediateResult=new Result(ListUtils.intersection(intermediateResultList,result),null,true,false);
        }
 else         if (op.equals(SearchOperator.OR)) {
          intermediateResult=new Result(ListUtils.sum(intermediateResultList,result),null,true,false);
        }
 else         if (op.equals(SearchOperator.NOT)) {
          intermediateResult=new Result(ListUtils.subtract(intermediateResultList,result),null,true,false);
        }
      }
    }
    if (coords != null) {
    }
    finalResult=intermediateResult;
    long t3=System.nanoTime();
    logger.log(Level.FINE,"Filtering nodes took {0} ns. Result size now {1}.",new Object[]{t3 - t2,finalResult.getResults().size()});
  }
  return finalResult;
}
