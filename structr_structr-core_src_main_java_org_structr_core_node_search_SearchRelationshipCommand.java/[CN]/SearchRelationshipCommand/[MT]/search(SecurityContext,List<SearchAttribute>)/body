{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  RelationshipFactory relationshipFactory=(RelationshipFactory)arguments.get("relationshipFactory");
  List<AbstractRelationship> finalResult=new LinkedList<AbstractRelationship>();
  boolean allExactMatch=true;
  final Index<Relationship> index;
  if (graphDb != null) {
    BooleanQuery query=new BooleanQuery();
    List<FilterSearchAttribute> filters=new LinkedList<FilterSearchAttribute>();
    List<TextualSearchAttribute> textualAttributes=new LinkedList<TextualSearchAttribute>();
    StringBuilder textualQueryString=new StringBuilder();
    for (    SearchAttribute attr : searchAttrs) {
      if (attr instanceof SearchAttributeGroup) {
        SearchAttributeGroup attributeGroup=(SearchAttributeGroup)attr;
        List<SearchAttribute> groupedAttributes=attributeGroup.getSearchAttributes();
        StringBuilder subQueryString=new StringBuilder();
        if (!(groupedAttributes.isEmpty())) {
          BooleanQuery subQuery=new BooleanQuery();
          String subQueryPrefix=(StringUtils.isBlank(textualQueryString.toString()) ? "" : attributeGroup.getSearchOperator()) + " ( ";
          for (          SearchAttribute groupedAttr : groupedAttributes) {
            if (groupedAttr instanceof TextualSearchAttribute) {
              textualAttributes.add((TextualSearchAttribute)groupedAttr);
              subQuery.add(toQuery((TextualSearchAttribute)groupedAttr),translateToBooleanClauseOccur(groupedAttr.getSearchOperator()));
              subQueryString.append(toQueryString((TextualSearchAttribute)groupedAttr,StringUtils.isBlank(subQueryString.toString())));
              allExactMatch&=isExactMatch(((TextualSearchAttribute)groupedAttr).getValue());
            }
          }
          query.add(subQuery,translateToBooleanClauseOccur(attributeGroup.getSearchOperator()));
          String subQuerySuffix=" ) ";
          if (StringUtils.isNotBlank(subQueryString.toString())) {
            textualQueryString.append(subQueryPrefix).append(subQueryString).append(subQuerySuffix);
          }
        }
      }
 else       if (attr instanceof TextualSearchAttribute) {
        textualAttributes.add((TextualSearchAttribute)attr);
        query.add(toQuery((TextualSearchAttribute)attr),translateToBooleanClauseOccur(attr.getSearchOperator()));
        textualQueryString.append(toQueryString((TextualSearchAttribute)attr,StringUtils.isBlank(textualQueryString.toString())));
        allExactMatch&=isExactMatch(((TextualSearchAttribute)attr).getValue());
      }
 else       if (attr instanceof FilterSearchAttribute) {
        filters.add((FilterSearchAttribute)attr);
      }
    }
    List<AbstractRelationship> intermediateResult;
    if (searchAttrs.isEmpty() || StringUtils.isBlank(textualQueryString.toString())) {
      intermediateResult=new LinkedList<AbstractRelationship>();
    }
 else {
      long t0=System.currentTimeMillis();
      logger.log(Level.FINE,"Textual Query String: {0}",textualQueryString);
      QueryContext queryContext=new QueryContext(textualQueryString);
      IndexHits hits;
      if ((textualAttributes.size() == 1) && textualAttributes.get(0).getKey().equals(AbstractRelationship.uuid.name())) {
        index=(Index<Relationship>)arguments.get(RelationshipIndex.rel_uuid.name());
synchronized (index) {
          hits=index.get(AbstractNode.uuid.name(),decodeExactMatch(textualAttributes.get(0).getValue()));
        }
      }
 else       if ((textualAttributes.size() > 1) && allExactMatch) {
        index=(Index<Relationship>)arguments.get(RelationshipIndex.rel_keyword.name());
synchronized (index) {
          hits=index.query(queryContext);
        }
      }
 else {
        index=(Index<Relationship>)arguments.get(RelationshipIndex.rel_fulltext.name());
synchronized (index) {
          hits=index.query(queryContext);
        }
      }
      long t1=System.currentTimeMillis();
      logger.log(Level.FINE,"Querying index took {0} ms, size() says {1} results.",new Object[]{t1 - t0,hits.size()});
      intermediateResult=relationshipFactory.createRelationships(securityContext,hits);
      hits.close();
      long t2=System.currentTimeMillis();
      logger.log(Level.FINE,"Creating structr relationships took {0} ms, {1} relationships made.",new Object[]{t2 - t1,intermediateResult.size()});
    }
    long t2=System.currentTimeMillis();
    if (!filters.isEmpty()) {
      for (      AbstractRelationship rel : intermediateResult) {
        for (        FilterSearchAttribute attr : filters) {
          PropertyKey key=attr.getKey();
          Object searchValue=attr.getValue();
          SearchOperator op=attr.getSearchOperator();
          Object nodeValue=rel.getProperty(key);
          if (op.equals(SearchOperator.NOT)) {
            if ((nodeValue != null) && !(nodeValue.equals(searchValue))) {
              attr.addToResult(rel);
            }
          }
 else {
            if ((nodeValue == null) && (searchValue == null)) {
              attr.addToResult(rel);
            }
            if ((nodeValue != null) && nodeValue.equals(searchValue)) {
              attr.addToResult(rel);
            }
          }
        }
      }
      for (      FilterSearchAttribute attr : filters) {
        SearchOperator op=attr.getSearchOperator();
        List<GraphObject> result=attr.getResult();
        if (op.equals(SearchOperator.AND)) {
          intermediateResult=ListUtils.intersection(intermediateResult,result);
        }
 else         if (op.equals(SearchOperator.OR)) {
          intermediateResult=ListUtils.sum(intermediateResult,result);
        }
 else         if (op.equals(SearchOperator.NOT)) {
          intermediateResult=ListUtils.subtract(intermediateResult,result);
        }
      }
    }
    finalResult.addAll(intermediateResult);
    long t3=System.currentTimeMillis();
    logger.log(Level.FINE,"Filtering nodes took {0} ms. Result size now {1}.",new Object[]{t3 - t2,finalResult.size()});
  }
  long t4=System.currentTimeMillis();
  Collections.sort(finalResult);
  long t5=System.currentTimeMillis();
  logger.log(Level.FINE,"Sorting relationships took {0} ms.",new Object[]{t5 - t4});
  return finalResult;
}
