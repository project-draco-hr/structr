{
  if (source != null) {
    List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
    if (source instanceof PropertySet) {
      PropertySet properties=(PropertySet)source;
      Map<String,Object> map=properties.getAttributes();
      GraphObject typeInstance=null;
      try {
        typeInstance=type.newInstance();
      }
 catch (      Throwable t) {
      }
      for (      Entry<String,Object> entry : map.entrySet()) {
        PropertyKey key=typeInstance != null ? typeInstance.getPropertyKeyForName(entry.getKey()) : new Property(entry.getKey());
        attrs.add(Search.andExactProperty(key,entry.getValue().toString()));
      }
    }
 else {
      attrs.add(Search.andExactUuid(source.toString()));
    }
    Result results=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(null,false,false,attrs);
    int size=results.size();
switch (size) {
case 0:
      GraphObject idResult=(GraphObject)Services.command(securityContext,FindNodeCommand.class).execute(source);
    if (idResult == null) {
      throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
    }
 else {
      return idResult;
    }
case 1:
  return results.get(0);
default :
logger.log(Level.WARNING,"Got more than one result for UUID {0}. Either this is not an UUID or we have a collision.",source.toString());
}
}
 else if (createIfNotExisting) {
Command transactionCommand=Services.command(securityContext,TransactionCommand.class);
return (AbstractNode)transactionCommand.execute(new StructrTransaction(){
@Override public Object execute() throws FrameworkException {
AbstractNode newNode=(AbstractNode)Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,type.getSimpleName()));
if (newNode == null) {
  logger.log(Level.WARNING,"Unable to create node of type {0} for property {1}",new Object[]{type.getSimpleName(),propertyKey.name()});
}
return newNode;
}
}
);
}
return null;
}
