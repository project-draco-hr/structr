{
  if (source != null) {
    List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
    if (source instanceof JsonInput) {
      JsonInput properties=(JsonInput)source;
      PropertySet map=PropertySet.convert(type,properties.getAttributes());
      for (      Entry<PropertyKey,Object> entry : map.entrySet()) {
        attrs.add(Search.andExactProperty(entry.getKey(),entry.getValue().toString()));
      }
    }
 else     if (source instanceof GraphObject) {
      GraphObject obj=(GraphObject)source;
      if (propertyKey != null) {
        attrs.add(Search.andExactProperty(propertyKey,obj.getProperty(propertyKey)));
      }
 else {
        PropertyKey<String> idProperty=obj.getPropertyKeyForName(AbstractNode.uuid.name());
        attrs.add(Search.andExactUuid(obj.getProperty(idProperty)));
      }
    }
 else {
      attrs.add(Search.andExactUuid(source.toString()));
    }
    Result results=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(attrs);
    int size=results.size();
switch (size) {
case 0:
      throw new FrameworkException(type.getSimpleName(),new IdNotFoundToken(source));
case 1:
    return results.get(0);
default :
  logger.log(Level.WARNING,"Got more than one result for UUID {0}. Either this is not an UUID or we have a collision.",source.toString());
}
}
 else if (createIfNotExisting) {
return Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction<AbstractNode>(){
@Override public AbstractNode execute() throws FrameworkException {
  AbstractNode newNode=Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,type.getSimpleName()));
  if (newNode == null) {
    logger.log(Level.WARNING,"Unable to create node of type {0} for property {1}",new Object[]{type.getSimpleName(),propertyKey.name()});
  }
  return newNode;
}
}
);
}
return null;
}
