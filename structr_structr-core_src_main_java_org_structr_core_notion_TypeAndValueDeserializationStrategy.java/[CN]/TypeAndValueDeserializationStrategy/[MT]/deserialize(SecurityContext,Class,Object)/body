{
  List<SearchAttribute> attrs=new LinkedList();
  attrs.add(Search.andExactTypeAndSubtypes(type.getSimpleName()));
  if (source != null) {
    attrs.add(Search.andExactProperty(propertyKey,source.toString()));
  }
  Result result=Services.command(securityContext,SearchNodeCommand.class).execute(attrs);
  int resultCount=result.size();
switch (resultCount) {
case 0:
    if ((source != null) && createIfNotExisting) {
      AbstractNode newNode=Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,type.getSimpleName()),new NodeAttribute(propertyKey,source.toString()));
      if (newNode != null) {
        return newNode;
      }
 else {
        logger.log(Level.WARNING,"Unable to create node of type {0} for property {1}",new Object[]{type.getSimpleName(),propertyKey.name()});
      }
    }
  break;
case 1:
GraphObject obj=result.get(0);
if (!type.isAssignableFrom(obj.getClass())) {
throw new FrameworkException("base",new TypeToken(propertyKey,type.getSimpleName()));
}
return obj;
}
if (source != null) {
Map<PropertyKey,Object> attributes=new LinkedHashMap<PropertyKey,Object>();
attributes.put(propertyKey,source.toString());
attributes.put(AbstractNode.type,type.getSimpleName());
throw new FrameworkException(type.getSimpleName(),new PropertiesNotFoundToken(AbstractNode.base,attributes));
}
return null;
}
