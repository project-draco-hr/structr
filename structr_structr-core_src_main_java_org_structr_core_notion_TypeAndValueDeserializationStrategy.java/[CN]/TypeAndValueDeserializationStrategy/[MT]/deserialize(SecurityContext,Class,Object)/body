{
  List<SearchAttribute> attrs=new LinkedList<SearchAttribute>();
  attrs.add(Search.andExactProperty(propertyKey,source.toString()));
  attrs.add(Search.andExactType(type.getSimpleName()));
  List<AbstractNode> nodes=(List<AbstractNode>)Services.command(securityContext,SearchNodeCommand.class).execute(null,false,false,attrs);
  ErrorBuffer buf=new ErrorBuffer();
  int resultCount=nodes.size();
switch (resultCount) {
case 0:
    if (createIfNotExisting) {
      AbstractNode newNode=(AbstractNode)Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.Key.type.name(),type.getSimpleName()),new NodeAttribute(propertyKey.name(),source.toString()));
      if (newNode != null) {
        return newNode;
      }
 else {
        buf.add("Unable to create new node of type ",type.getSimpleName()," for property ",propertyKey.name());
      }
    }
 else {
      buf.add(type.getSimpleName()," with ",propertyKey.name()," = '",source,"' not found.");
    }
  break;
case 1:
return nodes.get(0);
default :
buf.add(type.getSimpleName()," with ",propertyKey.name()," = '",source,"' is ambiguous.");
}
throw new IllegalArgumentException(buf.toString());
}
