{
  GraphDatabaseService graphDb=(GraphDatabaseService)arguments.get("graphDb");
  Index<Node> index=(Index<Node>)arguments.get("index");
  StructrNodeFactory nodeFactory=(StructrNodeFactory)arguments.get("nodeFactory");
  List<AbstractNode> result=Collections.emptyList();
  if (graphDb != null) {
    if (parameters == null || parameters.length != 5) {
      logger.log(Level.WARNING,"Exactly 5 parameters are required for advanced search.");
      return Collections.emptyList();
    }
    User user=null;
    if (parameters[0] instanceof User) {
      user=(User)parameters[0];
    }
    AbstractNode topNode=null;
    if (parameters[1] instanceof AbstractNode) {
      topNode=(AbstractNode)parameters[1];
    }
    boolean includeDeleted=false;
    if (parameters[2] instanceof Boolean) {
      includeDeleted=(Boolean)parameters[2];
    }
    boolean publicOnly=false;
    if (parameters[3] instanceof Boolean) {
      publicOnly=(Boolean)parameters[3];
    }
    List<SearchAttribute> searchAttrs=new ArrayList<SearchAttribute>();
    if (parameters[4] instanceof List) {
      searchAttrs=(List<SearchAttribute>)parameters[4];
    }
    for (int i=4; i < parameters.length; i++) {
      Object o=parameters[i];
      if (o instanceof SearchAttribute) {
        searchAttrs.add((SearchAttribute)o);
      }
    }
    BooleanQuery query=new BooleanQuery();
    String queryString="";
    int a=0;
    for (    SearchAttribute attr : searchAttrs) {
      if (attr instanceof SearchAttributeGroup) {
        SearchAttributeGroup attributeGroup=(SearchAttributeGroup)attr;
        List<SearchAttribute> groupedAttributes=attributeGroup.getSearchAttributes();
        String subQueryString="";
        if (!(groupedAttributes.isEmpty())) {
          BooleanQuery subQuery=new BooleanQuery();
          String subQueryPrefix=(a > 0 ? " " + attributeGroup.getSearchOperator() : "") + " ( ";
          int b=0;
          for (          SearchAttribute groupedAttr : groupedAttributes) {
            subQuery.add(toQuery((SingleSearchAttribute)groupedAttr),translateToBooleanClauseOccur(groupedAttr.getSearchOperator()));
            subQueryString+=toQueryString((SingleSearchAttribute)groupedAttr,b > 0);
            b++;
          }
          query.add(subQuery,translateToBooleanClauseOccur(attributeGroup.getSearchOperator()));
          String subQuerySuffix=" ) ";
          if (StringUtils.isNotBlank(subQueryString)) {
            queryString+=subQueryPrefix + subQueryString + subQuerySuffix;
          }
        }
        a++;
      }
 else       if (attr instanceof SingleSearchAttribute) {
        query.add(toQuery((SingleSearchAttribute)attr),translateToBooleanClauseOccur(attr.getSearchOperator()));
        queryString+=toQueryString((SingleSearchAttribute)attr,a > 0);
        a++;
      }
    }
    if (searchAttrs.isEmpty() || StringUtils.isBlank(queryString)) {
      if (topNode != null) {
        result=topNode.getAllChildren(user);
        Collections.sort(result);
        return result;
      }
 else {
        return Collections.emptyList();
      }
    }
    long t0=System.currentTimeMillis();
    logger.log(Level.INFO,"{0}",queryString);
    IndexHits hits=index.query(new QueryContext(queryString));
    long t1=System.currentTimeMillis();
    logger.log(Level.INFO,"Querying index took {0} ms, {1} results retrieved.",new Object[]{t1 - t0,hits.size()});
    result=nodeFactory.createNodes(hits,includeDeleted);
    long t2=System.currentTimeMillis();
    logger.log(Level.INFO,"Creating structr nodes took {0} ms, {1} nodes made.",new Object[]{t2 - t1,result.size()});
  }
  Collections.sort(result);
  return result;
}
