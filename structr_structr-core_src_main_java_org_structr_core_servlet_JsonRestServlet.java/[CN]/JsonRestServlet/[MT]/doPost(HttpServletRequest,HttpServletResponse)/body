{
  try {
    if (request.getPathInfo().endsWith("/node")) {
      final PropertySet propertySet=gson.fromJson(request.getReader(),PropertySet.class);
      AbstractNode newNode=(AbstractNode)Services.command(TransactionCommand.class).execute(new StructrTransaction(){
        @Override public Object execute() throws Throwable {
          Command createNodeCommand=Services.command(CreateNodeCommand.class);
          return (AbstractNode)createNodeCommand.execute(new SuperUser(),propertySet.getAttributes());
        }
      }
);
      StringBuilder uriBuilder=new StringBuilder(100);
      uriBuilder.append(request.getScheme());
      uriBuilder.append("://");
      uriBuilder.append(request.getServerName());
      uriBuilder.append(":");
      uriBuilder.append(request.getServerPort());
      uriBuilder.append(request.getContextPath());
      uriBuilder.append(request.getServletPath());
      uriBuilder.append("/");
      uriBuilder.append(newNode.getType().toLowerCase());
      uriBuilder.append("s/");
      uriBuilder.append(newNode.getId());
      response.setHeader("Location",uriBuilder.toString());
      response.setStatus(HttpServletResponse.SC_CREATED);
    }
 else     if (request.getPathInfo().endsWith("/rel")) {
      throw new IllegalPathException();
    }
 else {
      throw new IllegalPathException();
    }
  }
 catch (  PathException pathException) {
    response.setStatus(pathException.getStatus());
  }
catch (  JsonSyntaxException jsex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  JsonParseException jpex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  Throwable t) {
    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
}
