{
  try {
    final PropertySet propertySet=gson.fromJson(request.getReader(),PropertySet.class);
    final List<NodeAttribute> attributes=propertySet.getAttributes();
    GraphObject newGraphObject=null;
    String path=request.getPathInfo();
    if (path.endsWith("/node")) {
      newGraphObject=handleNodeCreation(attributes);
    }
 else     if (path.endsWith("/rel")) {
      newGraphObject=handleRelationshipCreation(attributes);
    }
 else {
      List<ResourceConstraint> constraintChain=parsePath(path);
      if (constraintChain.size() == 1) {
        ResourceConstraint constr=constraintChain.get(0);
        if (constr instanceof TypeConstraint) {
          TypeConstraint typeConstraint=(TypeConstraint)constr;
          String type=typeConstraint.getType();
          attributes.add(new NodeAttribute(AbstractNode.Key.type.name(),StringUtils.capitalize(type)));
          newGraphObject=handleNodeCreation(attributes);
        }
 else {
          throw new IllegalPathException();
        }
      }
 else {
        throw new IllegalPathException();
      }
    }
    if (newGraphObject != null) {
      response.setHeader("Location",buildLocationURI(request,newGraphObject.getType(),newGraphObject.getId()));
      response.setStatus(HttpServletResponse.SC_CREATED);
    }
 else {
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 catch (  IllegalArgumentException illegalArgumentException) {
    StringBuilder errorBuffer=new StringBuilder(100);
    errorBuffer.append(illegalArgumentException.getMessage());
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    response.setContentLength(errorBuffer.length());
    response.getWriter().append(errorBuffer.toString());
    response.getWriter().flush();
    response.getWriter().close();
  }
catch (  PathException pathException) {
    response.setStatus(pathException.getStatus());
  }
catch (  JsonSyntaxException jsex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  JsonParseException jpex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  Throwable t) {
    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    logger.log(Level.WARNING,"Exception",t);
  }
}
