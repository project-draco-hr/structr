{
  GraphObject newRelationship=null;
  long startNodeId=-1;
  long endNodeId=-1;
  String type=null;
  for (Iterator<NodeAttribute> it=attributes.iterator(); it.hasNext(); ) {
    NodeAttribute attr=it.next();
    if ("start".equals(attr.getKey())) {
      try {
        startNodeId=Long.parseLong(attr.getValue().toString());
      }
 catch (      Throwable t) {
      }
      it.remove();
    }
 else     if ("end".equals(attr.getKey())) {
      try {
        endNodeId=Long.parseLong(attr.getValue().toString());
      }
 catch (      Throwable t) {
      }
      it.remove();
    }
 else     if ("type".equals(attr.getKey())) {
      type=attr.getValue().toString();
      it.remove();
    }
  }
  if (startNodeId != -1 && endNodeId != -1 && type != null) {
    Command findNodeCommand=Services.command(FindNodeCommand.class);
    AbstractNode startNode=(AbstractNode)findNodeCommand.execute(new SuperUser(),startNodeId);
    AbstractNode endNode=(AbstractNode)findNodeCommand.execute(new SuperUser(),endNodeId);
    if (startNode != null && endNode != null) {
      newRelationship=(StructrRelationship)Services.command(CreateRelationshipCommand.class).execute(startNode,endNode,type);
      for (      NodeAttribute attr : attributes) {
        newRelationship.setProperty(attr.getKey(),attr.getValue());
      }
    }
 else {
      throw new NotFoundException();
    }
  }
 else {
    throw new IllegalPathException();
  }
  return newRelationship;
}
