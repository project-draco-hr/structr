{
  if (depth > outputNestingDepth) {
    return null;
  }
  JsonObject jsonObject=new JsonObject();
  jsonObject.add("id",new JsonPrimitive(src.getId()));
  String type=src.getType();
  if (type != null) {
    jsonObject.add("type",new JsonPrimitive(type));
  }
  for (  String key : src.getPropertyKeys(localPropertyView)) {
    Object value=src.getProperty(key);
    if (value != null) {
      if (value instanceof Collection) {
        JsonArray property=new JsonArray();
        Collection<GraphObject> values=(Collection<GraphObject>)value;
        for (        GraphObject obj : values) {
          JsonElement recursiveSerializedValue=this.serializeFlatNameValue(obj,typeOfSrc,context,localPropertyView,depth + 1);
          if (recursiveSerializedValue != null) {
            property.add(recursiveSerializedValue);
          }
        }
        jsonObject.add(key,property);
      }
 else       if (value instanceof GraphObject) {
        GraphObject graphObject=(GraphObject)value;
        jsonObject.add(key,this.serializeFlatNameValue(graphObject,typeOfSrc,context,localPropertyView,depth + 1));
      }
 else {
        jsonObject.add(key,new JsonPrimitive(value.toString()));
      }
    }
 else {
      jsonObject.add(key,new JsonNull());
    }
  }
  return jsonObject;
}
