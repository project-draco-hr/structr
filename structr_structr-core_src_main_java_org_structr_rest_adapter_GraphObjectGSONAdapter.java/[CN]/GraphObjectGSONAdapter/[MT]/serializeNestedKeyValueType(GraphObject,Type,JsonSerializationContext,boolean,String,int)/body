{
  if (depth > outputNestingDepth) {
    return null;
  }
  JsonObject jsonObject=new JsonObject();
  if (idProperty == null) {
    jsonObject.add("id",new JsonPrimitive(src.getId()));
  }
 else {
    Object idPropertyValue=src.getProperty(idProperty);
    if (idPropertyValue != null) {
      String idString=idPropertyValue.toString();
      jsonObject.add("id",new JsonPrimitive(idString));
    }
  }
  String type=src.getType();
  if (type != null) {
    jsonObject.add("type",new JsonPrimitive(type));
  }
  JsonArray properties=new JsonArray();
  for (  String key : src.getPropertyKeys(localPropertyView)) {
    Object value=src.getProperty(key);
    if (value instanceof Iterable) {
      JsonArray property=new JsonArray();
      for (      Object o : (Iterable)value) {
        if (o instanceof GraphObject) {
          GraphObject obj=(GraphObject)o;
          JsonElement recursiveSerializedValue=this.serializeNestedKeyValueType(obj,typeOfSrc,context,includeTypeInOutput,localPropertyView,depth + 1);
          if (recursiveSerializedValue != null) {
            property.add(recursiveSerializedValue);
          }
        }
 else         if (o instanceof Map) {
          properties.add(serializeMap((Map)o));
        }
 else {
          properties.add(serializePrimitive(key,o,includeTypeInOutput));
        }
      }
      properties.add(property);
    }
 else     if (value instanceof GraphObject) {
      GraphObject graphObject=(GraphObject)value;
      properties.add(this.serializeNestedKeyValueType(graphObject,typeOfSrc,context,includeTypeInOutput,localPropertyView,depth + 1));
    }
 else     if (value instanceof Map) {
      properties.add(serializeMap((Map)value));
    }
 else {
      properties.add(serializePrimitive(key,value,includeTypeInOutput));
    }
  }
  jsonObject.add("properties",properties);
  Map<RelationshipType,Long> outRelStatistics=src.getRelationshipInfo(Direction.OUTGOING);
  if (outRelStatistics != null) {
    JsonArray outRels=new JsonArray();
    for (    Entry<RelationshipType,Long> entry : outRelStatistics.entrySet()) {
      RelationshipType relType=entry.getKey();
      Long count=entry.getValue();
      JsonObject outRelEntry=new JsonObject();
      outRelEntry.add("type",new JsonPrimitive(relType.name()));
      outRelEntry.add("count",new JsonPrimitive(count));
      outRels.add(outRelEntry);
    }
    jsonObject.add("out",outRels);
  }
  Map<RelationshipType,Long> inRelStatistics=src.getRelationshipInfo(Direction.INCOMING);
  if (inRelStatistics != null) {
    JsonArray inRels=new JsonArray();
    for (    Entry<RelationshipType,Long> entry : inRelStatistics.entrySet()) {
      RelationshipType relType=entry.getKey();
      Long count=entry.getValue();
      JsonObject inRelEntry=new JsonObject();
      inRelEntry.add("type",new JsonPrimitive(relType.name()));
      inRelEntry.add("count",new JsonPrimitive(count));
      inRels.add(inRelEntry);
    }
    jsonObject.add("in",inRels);
  }
  Long startNodeId=src.getStartNodeId();
  if (startNodeId != null) {
    jsonObject.add("startNodeId",new JsonPrimitive(startNodeId));
  }
  Long endNodeId=src.getEndNodeId();
  if (endNodeId != null) {
    jsonObject.add("endNodeId",new JsonPrimitive(endNodeId));
  }
  return jsonObject;
}
