{
  Path path=getValidatedPath();
  if (path != null) {
    StructrNodeFactory nodeFactory=new StructrNodeFactory<AbstractNode>(securityContext);
    List<GraphObject> nodeList=new LinkedList<GraphObject>();
    for (    Node node : path.nodes()) {
      AbstractNode traversedNode=nodeFactory.createNode(securityContext,node);
      nodeList.add(0,traversedNode);
    }
    if (nodeList.size() >= 2) {
      final AbstractNode startNode=(AbstractNode)nodeList.get(1);
      final AbstractNode endNode=(AbstractNode)nodeList.get(0);
      if ((startNode != null) && (endNode != null)) {
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws Throwable {
            for (            StructrRelationship rel : startNode.getRelationships()) {
              if (rel.getStartNodeId().equals(startNode.getId()) && rel.getEndNodeId().equals(endNode.getId())) {
                rel.delete();
              }
            }
            return null;
          }
        }
;
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
      }
    }
    return new RestMethodResult(HttpServletResponse.SC_OK);
  }
  throw new NotFoundException();
}
