{
  final Iterable<? extends GraphObject> results=doGet(listeners);
  if (results != null) {
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        ErrorBuffer errorBuffer=new ErrorBuffer();
        boolean error=false;
        for (        GraphObject obj : results) {
          if (mayModify(listeners,obj,errorBuffer)) {
            for (            Entry<String,Object> attr : propertySet.entrySet()) {
              try {
                if (attr.getValue() != null) {
                  obj.setProperty(attr.getKey(),attr.getValue());
                }
 else {
                  obj.removeProperty(attr.getKey());
                }
              }
 catch (              Throwable t) {
                errorBuffer.add(t.getMessage());
                error=true;
              }
            }
          }
 else {
            throw new IllegalArgumentException(errorBuffer.toString());
          }
          if (!validAfterModification(listeners,obj,errorBuffer) || error) {
            throw new IllegalArgumentException(errorBuffer.toString());
          }
        }
        return null;
      }
    }
;
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (transaction.getCause() != null) {
      throw transaction.getCause();
    }
    return new RestMethodResult(HttpServletResponse.SC_OK);
  }
  throw new IllegalPathException();
}
