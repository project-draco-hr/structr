{
  final AbstractNode sourceNode=typedIdConstraint.getIdConstraint().getNode();
  final AbstractNode newNode=typeConstraint.createNode(propertySet);
  final DirectedRelationship rel=EntityContext.getRelation(sourceNode.getClass(),newNode.getClass());
  if (sourceNode != null && newNode != null && rel != null) {
    final RelationshipType relType=rel.getRelType();
    final Direction direction=rel.getDirection();
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        if (direction.equals(Direction.OUTGOING)) {
          return Services.command(securityContext,CreateRelationshipCommand.class).execute(sourceNode,newNode,relType);
        }
 else {
          return Services.command(securityContext,CreateRelationshipCommand.class).execute(newNode,sourceNode,relType);
        }
      }
    }
;
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (transaction.getCause() != null) {
      throw transaction.getCause();
    }
    RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_CREATED);
    return result;
  }
  throw new IllegalPathException();
}
