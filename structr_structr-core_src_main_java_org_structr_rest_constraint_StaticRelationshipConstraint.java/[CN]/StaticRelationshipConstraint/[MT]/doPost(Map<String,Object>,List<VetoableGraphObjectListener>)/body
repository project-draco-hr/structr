{
  if ((securityContext != null) && (securityContext.getUser() != null)) {
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        AbstractNode sourceNode=typedIdConstraint.getIdConstraint().getNode();
        AbstractNode newNode=typeConstraint.createNode(listeners,propertySet);
        DirectedRelationship rel=EntityContext.getRelation(sourceNode.getClass(),newNode.getClass());
        if ((sourceNode != null) && (newNode != null) && (rel != null)) {
          rel.createRelationship(securityContext,sourceNode,newNode);
          ErrorBuffer errorBuffer=new ErrorBuffer();
          if (!validAfterCreation(listeners,newNode,errorBuffer)) {
            throw new IllegalArgumentException(errorBuffer.toString());
          }
          return newNode;
        }
        throw new IllegalPathException();
      }
    }
;
    AbstractNode newNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (newNode == null) {
      if (transaction.getCause() != null) {
        throw transaction.getCause();
      }
    }
    RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_CREATED);
    result.addHeader("Location",buildLocationHeader(newNode));
    return result;
  }
 else {
    throw new NotAllowedException();
  }
}
