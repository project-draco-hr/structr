{
  try {
    request.setCharacterEncoding("UTF-8");
    response.setContentType("application/json; charset=UTF-8");
    final PropertySet propertySet=gson.fromJson(request.getReader(),PropertySet.class);
    SecurityContext securityContext=getSecurityContext(request);
    List<ResourceConstraint> chain=parsePath(securityContext,request);
    ResourceConstraint resourceConstraint=optimizeConstraintChain(chain);
    Map<String,Object> properties=new LinkedHashMap<String,Object>();
    for (    NodeAttribute attr : propertySet.getAttributes()) {
      properties.put(attr.getKey(),attr.getValue());
    }
    RestMethodResult result=resourceConstraint.doPost(properties,graphObjectListeners);
    result.commitResponse(gson,response);
  }
 catch (  IllegalArgumentException illegalArgumentException) {
    handleValidationError(illegalArgumentException,response);
  }
catch (  PathException pathException) {
    int code=pathException.getStatus();
    response.setStatus(code);
    response.getWriter().append(jsonError(code,pathException.getMessage()));
  }
catch (  JsonSyntaxException jsex) {
    logger.log(Level.WARNING,"JsonSyntaxException in POST",jsex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in POST: " + jsex.getMessage()));
  }
catch (  JsonParseException jpex) {
    logger.log(Level.WARNING,"JsonParseException in POST",jpex);
    int code=HttpServletResponse.SC_BAD_REQUEST;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in POST: " + jpex.getMessage()));
  }
catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception in POST",t);
    int code=HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
    response.setStatus(code);
    response.getWriter().append(jsonError(code,"JsonSyntaxException in POST: " + t.getMessage()));
  }
}
