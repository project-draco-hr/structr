{
  try {
    SecurityContext securityContext=getSecurityContext(request);
    Result result=getResults(securityContext,request);
    if (result != null) {
      final PropertySet propertySet=gson.fromJson(request.getReader(),PropertySet.class);
      final List<GraphObject> results=result.getResults();
      if (results != null && !results.isEmpty()) {
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws Throwable {
            for (            GraphObject obj : results) {
              if (mayModify(obj,request)) {
                for (                NodeAttribute attr : propertySet.getAttributes()) {
                  obj.setProperty(attr.getKey(),attr.getValue());
                }
              }
            }
            return null;
          }
        }
;
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
        if (transaction.getCause() != null) {
          throw transaction.getCause();
        }
      }
 else {
        throw new NotFoundException();
      }
    }
 else {
      throw new NotFoundException();
    }
    response.setStatus(HttpServletResponse.SC_OK);
  }
 catch (  IllegalArgumentException illegalArgumentException) {
    StringBuilder errorBuffer=new StringBuilder(100);
    errorBuffer.append(illegalArgumentException.getMessage());
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    response.setContentLength(errorBuffer.length());
    response.getWriter().append(errorBuffer.toString());
    response.getWriter().flush();
    response.getWriter().close();
  }
catch (  PathException pathException) {
    response.setStatus(pathException.getStatus());
  }
catch (  JsonSyntaxException jsex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  JsonParseException jpex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
  }
catch (  Throwable t) {
    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
}
