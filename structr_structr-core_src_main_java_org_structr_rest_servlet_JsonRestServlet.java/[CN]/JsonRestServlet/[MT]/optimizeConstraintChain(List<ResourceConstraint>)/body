{
  int num=constraintChain.size();
  boolean found=false;
  int iterations=0;
  do {
    StringBuilder chain=new StringBuilder();
    for (    ResourceConstraint constr : constraintChain) {
      chain.append(constr.getClass().getSimpleName());
      chain.append(", ");
    }
    logger.log(Level.FINE,"########## Constraint chain after iteration {0}: {1}",new Object[]{iterations,chain.toString()});
    found=false;
    for (int i=0; i < num; i++) {
      try {
        ResourceConstraint firstElement=constraintChain.get(i);
        ResourceConstraint secondElement=constraintChain.get(i + 1);
        ResourceConstraint combinedConstraint=firstElement.tryCombineWith(secondElement);
        if (combinedConstraint != null) {
          logger.log(Level.FINE,"Combined constraint {0}",combinedConstraint.getClass().getSimpleName());
          constraintChain.remove(firstElement);
          constraintChain.remove(secondElement);
          constraintChain.add(i,combinedConstraint);
          found=true;
          if (combinedConstraint instanceof RelationshipFollowingConstraint) {
            break;
          }
        }
      }
 catch (      PathException p) {
        throw p;
      }
catch (      Throwable t) {
      }
    }
    iterations++;
  }
 while (found);
  StringBuilder chain=new StringBuilder();
  for (  ResourceConstraint constr : constraintChain) {
    chain.append(constr.getClass().getSimpleName());
    chain.append(", ");
  }
  logger.log(Level.FINE,"Final constraint chain {0}",chain.toString());
  if (constraintChain.size() == 1) {
    ResourceConstraint finalConstraint=constraintChain.get(0);
    finalConstraint.configureIdProperty(defaultIdProperty);
    return finalConstraint;
  }
  throw new IllegalPathException();
}
