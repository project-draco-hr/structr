{
  long t0=System.currentTimeMillis();
  System.out.print("Starting target database ...");
  EmbeddedGraphDatabase targetDb=new EmbeddedGraphDatabase(targetDbPath);
  LuceneFulltextIndexService targetIndex=new LuceneFulltextIndexService(targetDb);
  System.out.println("done.");
  String targetFilesPath=targetDbPath + "/files";
  System.out.print("Creating directory " + targetFilesPath + " ...");
  boolean success=(new java.io.File(targetFilesPath)).mkdir();
  if (success) {
    System.out.println("done.");
  }
  Transaction targetTx=targetDb.beginTx();
  long counter=0L;
  List<Relationship> allRels=new ArrayList<Relationship>();
  Map<Long,Long> idMap=new HashMap<Long,Long>();
  Iterable<Node> allNodes=graphDb.getAllNodes();
  try {
    for (    Node sourceNode : allNodes) {
      for (      Relationship r : sourceNode.getRelationships(Direction.OUTGOING)) {
        allRels.add(r);
      }
      long sourceId=sourceNode.getId();
      if (test) {
        System.out.println("Node id " + sourceId + " found. Remove -t flag to copy to target database!");
      }
 else {
        Node targetNode=null;
        if (sourceId == 0L) {
          targetNode=targetDb.getReferenceNode();
        }
 else {
          targetNode=targetDb.createNode();
        }
        long targetId=targetNode.getId();
        idMap.put(sourceId,targetId);
        System.out.println("Node created (source id: " + sourceId + ", target id: "+ targetId);
        for (        String key : sourceNode.getPropertyKeys()) {
          targetNode.setProperty(key,sourceNode.getProperty(key));
        }
        if (targetNode.hasProperty(AbstractNode.TYPE_KEY) && (targetNode.getProperty(AbstractNode.TYPE_KEY).equals("File") || targetNode.getProperty(AbstractNode.TYPE_KEY).equals("Image"))) {
          if (sourceNode.hasProperty(File.RELATIVE_FILE_PATH_KEY)) {
            String oldPath=dbPath + "/files/" + (String)sourceNode.getProperty(File.RELATIVE_FILE_PATH_KEY);
            String newRelativePath=targetNode.getId() + "_" + System.currentTimeMillis();
            String newPath=targetFilesPath + "/" + newRelativePath;
            java.io.File source=new java.io.File(oldPath);
            java.io.File target=new java.io.File(newPath);
            nioTransferCopy(source,target);
            targetNode.setProperty(File.RELATIVE_FILE_PATH_KEY,newRelativePath);
            System.out.println("Copied file " + oldPath + " to "+ newPath);
          }
 else {
            System.out.println("Could not copy " + sourceNode.getId());
          }
        }
        Imp.indexNode(index,targetNode);
        counter++;
        if (counter % 1000 == 0) {
          targetTx.success();
          targetTx.finish();
          targetTx=targetDb.beginTx();
          System.out.println("Committed to database after " + counter + " nodes.");
        }
      }
    }
    targetTx.success();
  }
  finally {
    targetTx.finish();
  }
  long t1=System.currentTimeMillis();
  System.out.println(counter + " nodes copied to target database in " + (t1 - t0)+ " ms");
  targetTx=targetDb.beginTx();
  long relCounter=0L;
  try {
    for (    Relationship r : allRels) {
      long sourceStartNodeId=r.getStartNode().getId();
      long sourceEndNodeId=r.getEndNode().getId();
      long targetStartNodeId=(long)idMap.get(sourceStartNodeId);
      long targetEndNodeId=(long)idMap.get(sourceEndNodeId);
      Node s=targetDb.getNodeById(targetStartNodeId);
      Node e=targetDb.getNodeById(targetEndNodeId);
      Relationship nr=s.createRelationshipTo(e,r.getType());
      System.out.println("Relationship created between " + targetStartNodeId + " and "+ targetEndNodeId);
      for (      String key : r.getPropertyKeys()) {
        nr.setProperty(key,r.getProperty(key));
      }
      relCounter++;
      if (relCounter % 1000 == 0) {
        targetTx.success();
        targetTx.finish();
        targetTx=targetDb.beginTx();
        System.out.println("Committed to database after " + counter + " relationships.");
      }
    }
    targetTx.success();
  }
  finally {
    targetTx.finish();
  }
  rebuildIndex(targetDb,targetIndex,false,targetDb.beginTx());
  targetTx.success();
  targetTx.finish();
  long t2=System.currentTimeMillis();
  System.out.println(relCounter + " relationships created in target database in " + (t2 - t1)+ " ms");
  System.out.print("Shutting down target database ...");
  targetDb.shutdown();
  System.out.println("done.");
}
