{
  boolean changeRels=false;
  boolean addPathProperty=false;
  boolean test=false;
  boolean renameProperty=false;
  boolean removeEmptyNodes=false;
  boolean rebuildIndex=false;
  boolean listNodes=false;
  boolean removeOrphanedNodes=false;
  boolean copyDatabase=false;
  String dbPath=null;
  String targetDbPath=null;
  String filesPath=null;
  String name=null;
  String type=null;
  String nodeType=null;
  String relDirection=null;
  String oldRelType=null;
  String newRelType=null;
  String oldPropertyName=null;
  String newPropertyName=null;
  System.out.println("Structr admin tool started.");
  System.out.print("Parsing command line arguments ...");
  for (int k=0; k < args.length; k++) {
    String arg=args[k];
    if ("-rebuildIndex".equals(arg)) {
      rebuildIndex=true;
    }
 else     if ("-copyDatabase".equals(arg)) {
      copyDatabase=true;
    }
 else     if ("-removeOrphanedNodes".equals(arg)) {
      removeOrphanedNodes=true;
    }
 else     if ("-listNodes".equals(arg)) {
      listNodes=true;
    }
 else     if ("-changeRels".equals(arg)) {
      changeRels=true;
    }
 else     if ("-addPathProperty".equals(arg)) {
      addPathProperty=true;
    }
 else     if ("-renameProperty".equals(arg)) {
      renameProperty=true;
    }
 else     if ("-removeEmptyNodes".equals(arg)) {
      removeEmptyNodes=true;
    }
 else     if ("-t".equals(arg)) {
      test=true;
    }
 else     if ("-dbPath".equals(arg)) {
      dbPath=args[++k];
    }
 else     if ("-targetDbPath".equals(arg)) {
      targetDbPath=args[++k];
    }
 else     if ("-filesPath".equals(arg)) {
      filesPath=args[++k];
    }
 else     if ("-relDirection".equals(arg)) {
      relDirection=args[++k];
    }
 else     if ("-nodeType".equals(arg)) {
      nodeType=args[++k];
    }
 else     if ("-oldRelType".equals(arg)) {
      oldRelType=args[++k];
    }
 else     if ("-newRelType".equals(arg)) {
      newRelType=args[++k];
    }
 else     if ("-oldPropertyName".equals(arg)) {
      oldPropertyName=args[++k];
    }
 else     if ("-newPropertyName".equals(arg)) {
      newPropertyName=args[++k];
    }
 else     if ("-name".equals(arg)) {
      name=args[++k];
    }
 else     if ("-type".equals(arg)) {
      type=args[++k];
    }
  }
  System.out.println("done.");
  if (dbPath == null) {
    System.out.println("Argument -dbPath missing!");
    System.exit(0);
  }
  if (rebuildIndex) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Rebuilding index");
      adminTool.rebuildIndex(graphDb,index,test,tx);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (listNodes) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("List nodes");
      adminTool.listNodes();
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (copyDatabase) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Copy database");
      adminTool.copyDatabase(test,dbPath,targetDbPath,tx);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (changeRels) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Changing all " + relDirection + " relationships of all "+ nodeType+ " nodes from "+ oldRelType+ " to "+ newRelType);
      Direction dir=null;
      if (relDirection != null) {
        if ("OUTGOING".equals(relDirection)) {
          dir=Direction.OUTGOING;
        }
 else         if ("INCOMING".equals(relDirection)) {
          dir=Direction.INCOMING;
        }
 else         if ("BOTH".equals(relDirection)) {
          dir=Direction.BOTH;
        }
      }
      adminTool.changeRelationships(dir,nodeType,oldRelType,newRelType,test);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (removeEmptyNodes) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Remove empty nodes");
      adminTool.removeEmptyNodes(test,name,type,tx);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (removeOrphanedNodes) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Remove orphaned nodes");
      adminTool.removeOrphanedNodes(test,tx);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (addPathProperty) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Add path property");
      adminTool.addPathProperty(test);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
 else   if (renameProperty && oldPropertyName != null && newPropertyName != null) {
    Admin adminTool=new Admin(dbPath,filesPath);
    Transaction tx=graphDb.beginTx();
    try {
      System.out.println("Rename property");
      adminTool.renameProperty(test,oldPropertyName,newPropertyName);
      tx.success();
    }
  finally {
      tx.finish();
    }
    shutdown();
  }
  System.out.println("Structr admin tool finished.");
}
