{
  int counter=0;
  for (  Node n : graphDb.getAllNodes()) {
    long id=n.getId();
    if (!n.hasRelationship()) {
      if (!test) {
        n.delete();
        System.out.println("Node " + id + " had no relationships at all, deleted.");
      }
 else {
        System.out.println("Orphaned node " + id + " without relationships detected. Remove -t flag to delete");
      }
    }
 else {
      Iterable<Node> nodes=Traversal.description().relationships(RelType.HAS_CHILD,Direction.INCOMING).traverse(n).nodes();
      int c=0;
      boolean isConnectedToRootNode=false;
      for (      Node an : nodes) {
        c++;
        if (an.equals(graphDb.getReferenceNode())) {
          isConnectedToRootNode=true;
        }
      }
      if (isConnectedToRootNode) {
      }
 else {
        System.out.println(" and is NOT connected with the root node!!");
        if (!test) {
          for (          Relationship r : n.getRelationships()) {
            r.delete();
          }
          n.delete();
          System.out.println("Node " + id + " was not connected with root node, deleted.");
        }
 else {
          System.out.println("Orphaned node " + id + " is not connected with root node. Remove -t flag to delete");
        }
      }
    }
    counter++;
    if (counter % 100 == 0) {
      tx.success();
      tx.finish();
      tx=graphDb.beginTx();
      System.out.println("##### Committed to database after " + counter + " nodes.");
    }
  }
  System.out.println("Processed " + counter + " nodes.");
}
