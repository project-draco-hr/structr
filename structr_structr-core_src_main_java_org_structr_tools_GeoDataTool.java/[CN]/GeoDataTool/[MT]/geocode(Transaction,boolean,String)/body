{
  for (  Node n : graphDb.getAllNodes()) {
    if (n.hasProperty(AbstractNode.TYPE_KEY) && n.getProperty(AbstractNode.TYPE_KEY).equals(type) && (!(n.hasProperty(GeoObject.LATITUDE_KEY)) || (n.getProperty(GeoObject.LATITUDE_KEY) == null || ((Double)n.getProperty(GeoObject.LATITUDE_KEY)).equals(Double.NaN) || ((Double)n.getProperty(GeoObject.LATITUDE_KEY)).equals(0.0)))) {
      StringBuilder address=new StringBuilder();
      String[] addressKeys=new String[]{"name","street","zip","city","country"};
      for (      String key : addressKeys) {
        if (n.hasProperty(key)) {
          if (address.length() > 0) {
            address.append(", ");
          }
          address.append((String)n.getProperty(key));
        }
      }
      Set<String> additionalAddressAttributes=new HashSet<String>();
      for (      Relationship r : n.getRelationships(Direction.INCOMING)) {
        Node s=r.getStartNode();
        if (s.hasProperty(AbstractNode.TYPE_KEY) && s.hasProperty(AbstractNode.NAME_KEY)) {
          String addType=(String)s.getProperty(AbstractNode.TYPE_KEY);
          if (!("Country".equals(addType)) && !("Island".equals(addType)) && !("State".equals(addType))) {
            continue;
          }
          additionalAddressAttributes.add((String)s.getProperty(AbstractNode.NAME_KEY));
        }
      }
      for (      String s : additionalAddressAttributes) {
        if (address.length() > 0) {
          address.append(", ");
        }
        address.append(s);
      }
      JSONObject json=null;
      URL mapsUrl=null;
      try {
        String encodedAddress=URLEncoder.encode(address.toString(),"UTF-8");
        String protocol="xml";
        mapsUrl=new URL("http://maps.google.com/maps/api/geocode/" + protocol + "?sensor=false&address="+ encodedAddress);
        HttpURLConnection connection=(HttpURLConnection)mapsUrl.openConnection();
        connection.connect();
        if (protocol.equals("json")) {
          BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
          StringBuilder result=new StringBuilder();
          String line;
          while ((line=rd.readLine()) != null) {
            result.append(line);
          }
          connection.disconnect();
          if (result != null) {
            System.out.println("Result: " + result.toString());
            try {
              json=new JSONObject(result.toString());
              System.out.println("Latitude: " + json.getString("geometry.location.lat"));
            }
 catch (            Exception e) {
              System.out.println("Couldn't create JSON object from result string: " + result.toString());
            }
          }
        }
 else         if (protocol.equals("xml")) {
          Document xmlDoc=null;
          SAXReader reader=new SAXReader();
          BufferedReader rd=new BufferedReader(new InputStreamReader(connection.getInputStream()));
          xmlDoc=reader.read(rd);
          connection.disconnect();
          rd.close();
          Element root=xmlDoc.getRootElement();
          String status=root.element("status").getTextTrim();
          boolean ok="OK".equals(status);
          if (!ok) {
            System.out.println("Status not OK for " + type + " with address "+ address+ ": "+ status);
          }
 else {
            String latitude=root.element("result").element("geometry").element("location").element("lat").getTextTrim();
            String longitude=root.element("result").element("geometry").element("location").element("lng").getTextTrim();
            double lat=Double.parseDouble(latitude);
            double lon=Double.parseDouble(longitude);
            System.out.println("Coordinates found for " + type + " with address "+ address+ ": lat= "+ lat+ ", lon="+ lon);
            String latKey=GeoObject.LATITUDE_KEY;
            String lonKey=GeoObject.LONGITUDE_KEY;
            if (!test) {
              n.setProperty(latKey,lat);
              index.remove(n,latKey,lat);
              index.add(n,latKey,lat);
              n.setProperty(lonKey,lon);
              index.remove(n,lonKey,lon);
              index.add(n,lonKey,lon);
              System.out.println("Node updated with new coordinates");
            }
          }
        }
        tx.success();
        tx.finish();
        tx=graphDb.beginTx();
        Thread.sleep(200);
      }
 catch (      Exception e) {
        System.out.println("Error while fetching content from URL " + mapsUrl + ": "+ e.getMessage());
        e.printStackTrace();
      }
 finally {
      }
    }
  }
}
