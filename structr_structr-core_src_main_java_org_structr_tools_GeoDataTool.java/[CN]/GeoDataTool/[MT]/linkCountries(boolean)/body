{
  Map<String,String[]> regionMap=new HashMap<String,String[]>();
  regionMap.put("North America",northAmerica);
  regionMap.put("Central America and Caribbean",centralAmericaAndCaribbean);
  regionMap.put("South America",southAmerica);
  regionMap.put("Africa",africa);
  regionMap.put("Europe",europe);
  regionMap.put("Northern Asia",northernAsia);
  regionMap.put("Middle East",middleEast);
  regionMap.put("South East Asia",southEastAsia);
  regionMap.put("Oceania and Australia",oceaniaAndAustralia);
  Map<String,Node> nodeMap=new HashMap<String,Node>();
  Iterable<Node> allNodes=graphDb.getAllNodes();
  Node countriesFolder=null;
  for (  Node n : allNodes) {
    if (n.hasProperty(AbstractNode.TYPE_KEY) && n.getProperty(AbstractNode.TYPE_KEY).equals("Folder") && n.hasProperty(AbstractNode.NAME_KEY)&& n.getProperty(AbstractNode.NAME_KEY).equals("Countries")) {
      countriesFolder=n;
    }
  }
  int regionCounter=0;
  for (  Node n : allNodes) {
    if (n.hasProperty(AbstractNode.TYPE_KEY) && n.getProperty(AbstractNode.TYPE_KEY).equals("Region")) {
      for (      String region : regionMap.keySet()) {
        if (n.hasProperty(AbstractNode.NAME_KEY) && n.getProperty(AbstractNode.NAME_KEY).equals(region)) {
          nodeMap.put(region,n);
          break;
        }
        regionCounter++;
      }
    }
  }
  System.out.println("Processed " + regionCounter + " regions");
  for (  String region : regionMap.keySet()) {
    Node regionNode=(Node)nodeMap.get(region);
    if (regionNode != null) {
      Iterable<Relationship> rels=regionNode.getRelationships(RelType.LINK,Direction.OUTGOING);
      if (rels != null) {
        for (        Relationship r : rels) {
          Node endNode=r.getEndNode();
          if (endNode.hasProperty(AbstractNode.TYPE_KEY) && endNode.getProperty(AbstractNode.TYPE_KEY).equals("Country")) {
            r.delete();
          }
        }
      }
      String[] countries=(String[])regionMap.get(region);
      for (      String country : countries) {
        System.out.println("Processing country " + country);
        for (        Node n : allNodes) {
          if (n.hasProperty(AbstractNode.TYPE_KEY) && n.getProperty(AbstractNode.TYPE_KEY).equals("Country") && n.hasProperty(AbstractNode.NAME_KEY)&& n.getProperty(AbstractNode.NAME_KEY).equals(country)) {
            if (!test) {
              regionNode.createRelationshipTo(n,RelType.LINK);
              System.out.println("Linked " + country + " to "+ region+ " node");
              break;
            }
          }
 else {
          }
        }
      }
    }
  }
}
