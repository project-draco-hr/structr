{
  StandaloneTestHelper.prepareStandaloneTest("/tmp/structr-maptest/db");
  StringBuilder out=new StringBuilder();
  Command graphDbCommand=Services.command(GraphDatabaseCommand.class);
  GraphDatabaseService graphDb=(GraphDatabaseService)graphDbCommand.execute();
  MapContext mapContext=null;
  try {
    long t0=System.currentTimeMillis();
    String featureName=null;
    String staticFeatureName="Germany";
    if (StringUtils.isNotBlank(staticFeatureName)) {
      featureName=staticFeatureName;
    }
 else {
    }
    int cx=896;
    int cy=450;
    boolean auto=false;
    List<MapLayer> layers=new LinkedList<MapLayer>();
    MapLayer layer=null;
    ReferencedEnvelope envelope=null;
    Neo4jSpatialDataStore n4jstore=new Neo4jSpatialDataStore(graphDb);
    String layerName="world_regions";
    if (StringUtils.isEmpty(layerName)) {
      logger.log(Level.SEVERE,"No layer name!");
    }
    SimpleFeatureSource featureSource=n4jstore.getFeatureSource(layerName);
    SimpleFeatureCollection features=null;
    long t1=System.currentTimeMillis();
    logger.log(Level.INFO,"Data store and feature source ready after {0} ms",(t1 - t0));
    if (auto) {
      if (featureName == null) {
        envelope=featureSource.getBounds();
      }
 else {
        List<Filter> filterList=new LinkedList<Filter>();
        filterList.add(CQL.toFilter("NAME = '" + StringEscapeUtils.escapeSql(featureName) + "'"));
        Filter filter=MapHelper.featureFactory.or(filterList);
        Query query=new Query(layerName,filter);
        features=featureSource.getFeatures(query);
        if (features != null && !(features.isEmpty())) {
          SimpleFeature requestedFeature=features.features().next();
          envelope=(ReferencedEnvelope)requestedFeature.getBounds();
        }
      }
    }
 else {
      Double eminx=-180.0;
      Double emaxx=180.0;
      Double eminy=-90.0;
      Double emaxy=90.0;
      if (eminx != null && emaxx != null && eminy != null && emaxy != null) {
        envelope=new ReferencedEnvelope(eminx,emaxx,eminy,emaxy,null);
      }
 else {
        logger.log(Level.WARNING,"Manual envelope parameter incomplete");
      }
    }
    MapHelper.expandEnvelope(envelope,new Double(cx),new Double(cy));
    if (features == null) {
      features=MapHelper.getIntersectingFeatures(graphDb,envelope,layerName);
    }
    logger.log(Level.INFO,"{0} intersecting features found",features.size());
    Symbolizer polygonSymbolizer=MapHelper.createPolygonSymbolizer("#000000",1,1,"#d9d4ce",1);
    Symbolizer textSymbolizer=MapHelper.createTextSymbolizer("Arial",16,"#ffffff",1,0.5,0.0,0.0,0.0);
    Rule rule=MapHelper.styleFactory.createRule();
    rule.symbolizers().add(polygonSymbolizer);
    rule.symbolizers().add(textSymbolizer);
    FeatureTypeStyle fts=MapHelper.styleFactory.createFeatureTypeStyle(new Rule[]{rule});
    Style style=MapHelper.styleFactory.createStyle();
    style.featureTypeStyles().add(fts);
    final SimpleFeatureType TYPE=DataUtilities.createType("Location","geom:Point,NAME:String,name:String");
    SimpleFeatureBuilder featureBuilder=new SimpleFeatureBuilder(TYPE);
    SimpleFeatureCollection collection=FeatureCollections.newCollection();
    GeometryFactory geometryFactory=JTSFactoryFinder.getGeometryFactory(null);
    Coordinate coord=new Coordinate(8.4,50.6);
    Point point=geometryFactory.createPoint(coord);
    featureBuilder.add(point);
    featureBuilder.add("Frankfurt");
    SimpleFeature feature=featureBuilder.buildFeature(null);
    collection.add(feature);
    Symbolizer cityTextSym=MapHelper.createTextSymbolizer("Arial",13,"#000000",1.0,0.5,0.0,0.5,0.5);
    Symbolizer cityPointSym=MapHelper.createPointSymbolizer("Circle",5,"#000000",1,"#000000",1.0);
    Rule rule2=MapHelper.styleFactory.createRule();
    rule2.symbolizers().add(cityTextSym);
    rule2.symbolizers().add(cityPointSym);
    FeatureTypeStyle fts2=MapHelper.styleFactory.createFeatureTypeStyle(new Rule[]{rule2});
    Style style2=MapHelper.styleFactory.createStyle();
    style2.featureTypeStyles().add(fts2);
    SimpleFeatureSource source=DataUtilities.source(collection);
    SimpleFeatureCollection cityFeatures=source.getFeatures();
    layers.add(new MapLayer(features,style));
    layers.add(new MapLayer(cityFeatures,style2));
    mapContext=new DefaultMapContext(layers.toArray(new MapLayer[]{}));
    long t2=System.currentTimeMillis();
    MapHelper.renderSVGDocument(out,mapContext,envelope,cx,cy,true,true);
    long t3=System.currentTimeMillis();
    logger.log(Level.INFO,"renderSVGDocument took {0} ms",(t3 - t2));
    mapContext.dispose();
    long t4=System.currentTimeMillis();
    logger.log(Level.INFO,"SVG image successfully created in {0} ms",(t4 - t0));
    System.out.println("Size: " + out.length() + " bytes");
    FileUtils.writeStringToFile(new File("/home/axel/structr_test.svg"),out.toString());
  }
 catch (  Throwable t) {
    logger.log(Level.SEVERE,"Error while rendering map to SVG",t);
  }
 finally {
    if (mapContext != null) {
      mapContext.dispose();
    }
  }
  StandaloneTestHelper.finishStandaloneTest();
}
