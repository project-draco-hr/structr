{
  super.onInit();
  SecurityContext securityContext=CurrentRequest.getSecurityContext();
  FieldSet nodePropertiesFields=new FieldSet("Node Properties");
  nodePropertiesFields.setColumns(2);
  nodePropertiesFields.add(new TextField(AbstractNode.Key.name.name(),true));
  nodePropertiesFields.add(new TextField(AbstractNode.Key.title.name(),false));
  nodePropertiesFields.add(typeSelect);
  nodePropertiesFields.add(new IntegerField(AbstractNode.Key.position.name()));
  TextField createdBy=new TextField(AbstractNode.Key.createdBy.name());
  createdBy.setReadonly(true);
  nodePropertiesFields.add(createdBy);
  DateField createdDate=new DateField(AbstractNode.Key.createdDate.name());
  createdDate.setFormatPattern(dateFormat.toPattern());
  createdDate.setShowTime(true);
  createdDate.setReadonly(true);
  nodePropertiesFields.add(createdDate);
  nodePropertiesFields.add(ownerSelect);
  if (securityContext.isAllowed(node,Permission.AccessControl)) {
    addControl(setCurrentOwnerRecursivelyLink);
    nodePropertiesFields.add(setCurrentOwnerRecursivelyLink);
  }
  DateField lastModifiedDate=new DateField(AbstractNode.Key.lastModifiedDate.name());
  lastModifiedDate.setFormatPattern(dateFormat.toPattern());
  lastModifiedDate.setShowTime(true);
  lastModifiedDate.setReadonly(true);
  nodePropertiesFields.add(lastModifiedDate);
  titlesTable.addColumn(new Column(AbstractNode.Key.title.name(),"Title"));
  titlesTable.addColumn(new Column(Title.LOCALE_KEY,"Locale"));
  titlesTable.setClass(TABLE_CLASS);
  nodePropertiesFields.add(titlesTable);
  editPropertiesForm.add(nodePropertiesFields);
  addControl(editPropertiesForm);
  FieldSet templateFields=new FieldSet("Template");
  templateFields.add(templateSelect);
  editPropertiesForm.add(templateFields);
  FieldSet customTypeFields=new FieldSet("Custom Type");
  customTypeFields.add(customTypeSelect);
  editPropertiesForm.add(customTypeFields);
  FieldSet visibilityFields=new FieldSet("Visibility");
  visibilityFields.setColumns(1);
  DateField visibilityStartDate=new DateField(AbstractNode.Key.visibilityStartDate.name());
  visibilityStartDate.setFormatPattern(dateFormat.toPattern());
  visibilityStartDate.setShowTime(true);
  visibilityFields.add(visibilityStartDate);
  DateField visibilityEndDate=new DateField(AbstractNode.Key.visibilityEndDate.name());
  visibilityEndDate.setFormatPattern(dateFormat.toPattern());
  visibilityEndDate.setShowTime(true);
  visibilityFields.add(visibilityEndDate);
  Checkbox hidden=new Checkbox(AbstractNode.Key.hidden.name(),"Completely hidden in frontend for anyone");
  visibilityFields.add(hidden);
  Checkbox publicCheckbox=new Checkbox(AbstractNode.Key.isPublic.name(),"Visible to public users");
  visibilityFields.add(publicCheckbox);
  Checkbox forAuthenticatedUsersCheckbox=new Checkbox(AbstractNode.Key.visibleToAuthenticatedUsers.name(),"Visible to authenticated users");
  visibilityFields.add(forAuthenticatedUsersCheckbox);
  editVisibilityForm.add(visibilityFields);
  editVisibilityForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
  editVisibilityForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
  editVisibilityForm.setActionURL(editVisibilityForm.getActionURL().concat("#visibility-tab"));
  if (securityContext.isAllowed(node,Permission.EditProperty)) {
    visibilityFields.add(new Submit("saveVisibility"," Save Visibility ",this,"onSaveVisibility"));
    visibilityFields.add(new Submit("saveVisibilityDirectChildren"," Save Visibility (including direct children) ",this,"onSaveVisibilityIncludingDirectChildren"));
    visibilityFields.add(new Submit("saveVisibilityAllChildren"," Save Visibility (including all children) ",this,"onSaveVisibilityIncludingAllChildren"));
    visibilityFields.add(new Submit("cancel"," Cancel ",this,"onCancel"));
  }
  addControl(editVisibilityForm);
  editVisibilityPanel=new Panel("editVisibilityPanel","/panel/edit-visibility-panel.htm");
  addControl(editVisibilityPanel);
  editPropertiesForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
  editPropertiesForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
  editPropertiesForm.setActionURL(editPropertiesForm.getActionURL().concat("#properties-tab"));
  if (securityContext.isAllowed(node,Permission.EditProperty)) {
    editPropertiesForm.add(new Submit("saveProperties"," Save Properties ",this,"onSaveProperties"));
    editPropertiesForm.add(new Submit("cancel"," Cancel ",this,"onCancel"));
  }
  editPropertiesPanel=new Panel("editPropertiesPanel","/panel/edit-properties-panel.htm");
  addControl(editPropertiesPanel);
  Column nameColumn, typeColumn;
  PageLink viewRelLink=new PageLink("viewRel",DefaultEdit.class);
  LinkDecorator nameDec, iconDec;
  if ((node != null) && (node.hasChildren() || (node instanceof Folder))) {
    Column actionColumnNodes=new Column("Actions");
    actionColumnNodes.setTextAlign("center");
    actionColumnNodes.setDecorator(new LinkDecorator(childNodesTable,new PageLink(),AbstractNode.Key.nodeId.name()){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        AbstractNode n=(AbstractNode)row;
        link=new PageLink(AbstractNode.Key.nodeId.name(),getEditPageClass(n)){
          @Override public String getHref(){
            return super.getHref().concat("#properties-tab");
          }
        }
;
        link.setParameter(NODE_ID_KEY,n.getId());
        link.setImageSrc("/images/table-edit.png");
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
);
    typeColumn=new Column(AbstractNode.Key.type.name());
    iconDec=new LinkDecorator(childNodesTable,new PageLink(),AbstractNode.Key.nodeId.name()){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        AbstractNode n=(AbstractNode)row;
        link=new PageLink(AbstractNode.Key.nodeId.name(),getEditPageClass(n));
        link.setParameter(NODE_ID_KEY,n.getId());
        boolean hasThumbnail=false;
        if (n instanceof Image) {
          Image image=(Image)n;
          Image thumbnail=image.getScaledImage(100,100);
          if (thumbnail != null) {
            String thumbnailSrc="/view/" + thumbnail.getId();
            link.setImageSrc(thumbnailSrc);
            hasThumbnail=true;
          }
        }
        if (!hasThumbnail) {
          link.setImageSrc(getIconSrc(n));
        }
        link.setLabel(n.getName());
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
;
    typeColumn.setDecorator(iconDec);
    childNodesTable.addColumn(typeColumn);
    nameColumn=new Column(AbstractNode.Key.name.name());
    nameDec=new LinkDecorator(childNodesTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        AbstractNode n=(AbstractNode)row;
        PageLink pageLink=new PageLink("id",getEditPageClass(n)){
          @Override public String getHref(){
            return super.getHref().concat("#childnodes-tab");
          }
        }
;
        pageLink.setParameter(NODE_ID_KEY,n.getId());
        pageLink.setLabel(n.getName());
        super.renderActionLink(buffer,pageLink,context,row,value);
      }
    }
;
    nameColumn.setDecorator(nameDec);
    childNodesTable.addColumn(nameColumn);
    childNodesTable.addColumn(new Column(AbstractNode.Key.lastModifiedDate.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.owner.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.createdBy.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.createdDate.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.position.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.isPublic.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.deleted.name()));
    childNodesTable.addColumn(new Column(AbstractNode.Key.hidden.name()));
    childNodesTable.addColumn(actionColumnNodes);
    childNodesTable.setSortable(true);
    childNodesTable.setShowBanner(true);
    childNodesTable.setPageSize(DEFAULT_PAGESIZE);
    childNodesTable.getControlLink().setParameter(AbstractNode.Key.nodeId.name(),getNodeId());
    childNodesTable.setClass(TABLE_CLASS);
    addControl(childNodesTable);
    editChildNodesPanel=new Panel("editChildNodesPanel","/panel/edit-child-nodes-panel.htm");
    addControl(editChildNodesPanel);
  }
  if (securityContext.isAllowed(node,Permission.DeleteRelationship)) {
    deleteRelationshipLink.setImageSrc("/images/delete.png");
    deleteRelationshipLink.setTitle("Delete relationship");
    deleteRelationshipLink.setAttribute("onclick","return window.confirm('Do you really want to delete this relationship?');");
    addControl(deleteRelationshipLink);
    Column actionColumnIn=new Column("Action");
    actionColumnIn.setTextAlign("center");
    AbstractLink[] linksIn=new AbstractLink[]{deleteRelationshipLink};
    actionColumnIn.setDecorator(new LinkDecorator(incomingRelationshipsTable,linksIn,RELATIONSHIP_ID_KEY));
    actionColumnIn.setSortable(false);
    typeColumn=new Column(AbstractNode.Key.type.name());
    viewRelLink=new PageLink("view",DefaultEdit.class);
    iconDec=new LinkDecorator(incomingRelationshipsTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode startNode=r.getStartNode();
        link=new PageLink("id",getEditPageClass(startNode));
        link.setParameter(NODE_ID_KEY,startNode.getId());
        link.setImageSrc(startNode.getIconSrc());
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
;
    typeColumn.setDecorator(iconDec);
    incomingRelationshipsTable.addColumn(typeColumn);
    nameColumn=new Column(AbstractNode.Key.name.name());
    nameDec=new LinkDecorator(incomingRelationshipsTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode startNode=r.getStartNode();
        PageLink pageLink=new PageLink("id",getEditPageClass(startNode)){
          @Override public String getHref(){
            return super.getHref().concat("#relationships-tab");
          }
        }
;
        pageLink.setParameter(NODE_ID_KEY,startNode.getId());
        pageLink.setLabel(startNode.getName());
        super.renderActionLink(buffer,pageLink,context,row,value);
      }
    }
;
    nameColumn.setDecorator(nameDec);
    incomingRelationshipsTable.addColumn(nameColumn);
    incomingRelationshipsTable.addColumn(new Column(RELATIONSHIP_ID_KEY));
    incomingRelationshipsTable.addColumn(new Column(START_NODE_KEY));
    incomingRelationshipsTable.addColumn(new Column(END_NODE_KEY));
    incomingRelationshipsTable.addColumn(new Column(REL_TYPE_KEY));
    incomingRelationshipsTable.addColumn(new Column(REL_ATTRS_KEY));
    incomingRelationshipsTable.addColumn(actionColumnIn);
    incomingRelationshipsTable.setPageSize(DEFAULT_PAGESIZE);
    incomingRelationshipsTable.getControlLink().setParameter(AbstractNode.Key.nodeId.name(),getNodeId());
    incomingRelationshipsTable.setClass(TABLE_CLASS);
    addControl(incomingRelationshipsTable);
    Column actionColumnOut=new Column("Action");
    actionColumnOut.setTextAlign("center");
    AbstractLink[] linksOut=new AbstractLink[]{deleteRelationshipLink};
    actionColumnOut.setDecorator(new LinkDecorator(outgoingRelationshipsTable,linksOut,RELATIONSHIP_ID_KEY));
    actionColumnOut.setSortable(false);
    typeColumn=new Column(AbstractNode.Key.type.name());
    iconDec=new LinkDecorator(outgoingRelationshipsTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode endNode=r.getEndNode();
        link=new PageLink("id",getEditPageClass(endNode));
        link.setParameter(NODE_ID_KEY,endNode.getId());
        link.setImageSrc(endNode.getIconSrc());
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
;
    typeColumn.setDecorator(iconDec);
    outgoingRelationshipsTable.addColumn(typeColumn);
    nameColumn=new Column(AbstractNode.Key.name.name());
    nameDec=new LinkDecorator(outgoingRelationshipsTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode endNode=r.getEndNode();
        PageLink pageLink=new PageLink("id",getEditPageClass(endNode)){
          @Override public String getHref(){
            return super.getHref().concat("#relationships-tab");
          }
        }
;
        pageLink.setParameter(NODE_ID_KEY,endNode.getId());
        pageLink.setLabel(endNode.getName());
        super.renderActionLink(buffer,pageLink,context,row,value);
      }
    }
;
    nameColumn.setDecorator(nameDec);
    outgoingRelationshipsTable.addColumn(nameColumn);
    outgoingRelationshipsTable.addColumn(new Column(RELATIONSHIP_ID_KEY));
    outgoingRelationshipsTable.addColumn(new Column(START_NODE_KEY));
    outgoingRelationshipsTable.addColumn(new Column(END_NODE_KEY));
    outgoingRelationshipsTable.addColumn(new Column(REL_TYPE_KEY));
    outgoingRelationshipsTable.addColumn(new Column(REL_ATTRS_KEY));
    outgoingRelationshipsTable.addColumn(actionColumnOut);
    outgoingRelationshipsTable.setPageSize(DEFAULT_PAGESIZE);
    outgoingRelationshipsTable.getControlLink().setParameter(AbstractNode.Key.nodeId.name(),getNodeId());
    outgoingRelationshipsTable.setClass(TABLE_CLASS);
    addControl(outgoingRelationshipsTable);
    editRelationshipsPanel=new Panel("editRelationshipsPanel","/panel/edit-relationships-panel.htm");
    addControl(editRelationshipsPanel);
  }
  if (securityContext.isAllowed(node,Permission.AccessControl)) {
    typeColumn=new Column(AbstractNode.Key.type.name());
    iconDec=new LinkDecorator(securityTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode startNode=r.getStartNode();
        link=new PageLink("id",getEditPageClass(startNode)){
          @Override public String getHref(){
            return super.getHref().concat("#security-tab");
          }
        }
;
        link.setParameter(NODE_ID_KEY,startNode.getId());
        link.setLabel(startNode.getName());
        link.setImageSrc(getIconSrc(startNode));
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
;
    typeColumn.setDecorator(iconDec);
    securityTable.addColumn(typeColumn);
    nameColumn=new Column(AbstractNode.Key.name.name());
    nameDec=new LinkDecorator(securityTable,viewRelLink,"id"){
      @Override protected void renderActionLink(      HtmlStringBuffer buffer,      AbstractLink link,      Context context,      Object row,      Object value){
        StructrRelationship r=(StructrRelationship)row;
        AbstractNode startNode=r.getStartNode();
        link=new PageLink("id",getEditPageClass(startNode)){
          @Override public String getHref(){
            return super.getHref().concat("#security-tab");
          }
        }
;
        link.setParameter(NODE_ID_KEY,startNode.getId());
        link.setLabel(startNode.getName());
        super.renderActionLink(buffer,link,context,row,value);
      }
    }
;
    nameColumn.setDecorator(nameDec);
    securityTable.addColumn(nameColumn);
    securityTable.addColumn(new Column(StructrRelationship.ALLOWED_KEY));
    securityTable.setClass(TABLE_CLASS);
    securityForm.add(securityTable);
    FieldSet setPermissionFields=new FieldSet("Set Permissions");
    setPermissionFields.add(userSelect);
    setPermissionFields.add(groupSelect);
    setPermissionFields.add(recursive);
    List<Option> optionList=new LinkedList<Option>();
    Option readOption=new Option(StructrRelationship.READ_KEY,"Read");
    optionList.add(readOption);
    Option showTreeOption=new Option(StructrRelationship.SHOW_TREE_KEY,"Show Tree");
    optionList.add(showTreeOption);
    Option editPropsOption=new Option(StructrRelationship.EDIT_PROPERTIES_KEY,"Edit Properties");
    optionList.add(editPropsOption);
    Option addRelOption=new Option(StructrRelationship.ADD_RELATIONSHIP_KEY,"Add Relationship");
    optionList.add(addRelOption);
    Option removeRelOption=new Option(StructrRelationship.REMOVE_RELATIONSHIP_KEY,"Remove Relationship");
    optionList.add(removeRelOption);
    Option deleteNodeOption=new Option(StructrRelationship.DELETE_NODE_KEY,"Delete Node");
    optionList.add(deleteNodeOption);
    Option createSubnodeOption=new Option(StructrRelationship.CREATE_SUBNODE_KEY,"Create Subnode");
    optionList.add(createSubnodeOption);
    Option executeOption=new Option(StructrRelationship.EXECUTE_KEY,"Execute");
    optionList.add(executeOption);
    Option accessControlOption=new Option(StructrRelationship.ACCESS_CONTROL_KEY,"Access Control");
    optionList.add(accessControlOption);
    allowed.addAll(optionList);
    setPermissionFields.add(allowed);
    setPermissionFields.add(new Submit("setPermissions"," Set Permissions ",this,"onSetPermissions"));
    securityForm.add(setPermissionFields);
    securityForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
    securityForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
    securityForm.setActionURL(securityForm.getActionURL().concat("#security-tab"));
    addControl(securityForm);
    editSecurityPanel=new Panel("editSecurityPanel","/panel/edit-security-panel.htm");
    addControl(editSecurityPanel);
  }
  FieldSet pushFields=new FieldSet("Transmit Nodes");
  remoteSourceNode=new LongField("remoteSourceNode","Remote Node ID");
  remoteHost=new TextField("remoteHost","Remote Host");
  userNameInput=new TextField("userName","User Name");
  passwordInput=new PasswordField("password","Password");
  remoteTcpPort=new IntegerField("remoteTcpPort","Remote TCP Port");
  remoteUdpPort=new IntegerField("remoteUdp","Remote UDP Port");
  cloudPushPull.add(new Option("push","Push nodes to remote destination"));
  cloudPushPull.add(new Option("pull","Pull nodes from remote destination"));
  pushFields.add(remoteSourceNode);
  pushFields.add(remoteHost);
  pushFields.add(userNameInput);
  pushFields.add(passwordInput);
  pushFields.add(remoteTcpPort);
  pushFields.add(remoteUdpPort);
  pushFields.add(cloudPushPull);
  pushFields.add(cloudRecursive);
  pushFields.add(new Submit("transmitNodes","Transmit",this,"onTransmitNodes"));
  Table transmissionsTable=new Table("Transmissions");
  transmissionsTable.addColumn(new Column("transmissionType","Type"));
  transmissionsTable.addColumn(new Column("remoteHost","Remote Host"));
  transmissionsTable.addColumn(new Column("remoteTcpPort","TCP"));
  transmissionsTable.addColumn(new Column("remoteUdpPort","UDP"));
  transmissionsTable.addColumn(new Column("estimatedSize","Estimated Size"));
  transmissionsTable.addColumn(new Column("transmittedObjectCount","Objects Transmitted"));
  transmissionsTable.setDataProvider(new DataProvider(){
    @Override public List<CloudTransmission> getData(){
      CloudService cloudService=(CloudService)Services.command(GetCloudServiceCommand.class).execute();
      if (cloudService != null) {
        return (cloudService.getActiveTransmissions());
      }
      return (new LinkedList());
    }
  }
);
  cloudForm.add(pushFields);
  cloudForm.add(transmissionsTable);
  cloudForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
  cloudForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
  cloudForm.setActionURL(cloudForm.getActionURL().concat("#cloud-tab"));
  addControl(cloudForm);
  cloudPanel=new Panel("cloudPanel","/panel/cloud-panel.htm");
  addControl(cloudPanel);
  String prompt=((user != null) ? user.getName() : "anonymous") + "@structr" + (isSuperUser ? "# " : "$ ");
  consoleCommand=new TextField("command",prompt);
  consoleCommand.addStyleClass("commandInput");
  consoleForm.add(consoleCommand);
  consoleForm.addStyleClass("commandInput");
  consoleForm.add(new Submit("executeCommand","Execute",this,"onConsoleCommand"));
  StringBuilder actionURL=new StringBuilder(100);
  actionURL.append(consoleForm.getActionURL());
  if (nodeId != null) {
    actionURL.append("?nodeId=").append(nodeId);
  }
  actionURL.append("#console-tab");
  consoleForm.setActionURL(actionURL.toString());
  addControl(consoleForm);
  consolePanel=new Panel("consolePanel","/panel/console-panel.htm");
  addControl(consolePanel);
  readConsoleOutput();
  helpPanel=new Panel("helpPanel","/panel/help-panel.htm");
  addControl(helpPanel);
  createHelpOutput();
  if (!(securityContext.isAllowed(node,Permission.EditProperty))) {
    List<Field> propertyFields=editPropertiesForm.getFieldList();
    for (    Field f : propertyFields) {
      f.setReadonly(true);
    }
    incomingRelationshipsTable.removeColumn("Action");
    outgoingRelationshipsTable.removeColumn("Action");
  }
}
