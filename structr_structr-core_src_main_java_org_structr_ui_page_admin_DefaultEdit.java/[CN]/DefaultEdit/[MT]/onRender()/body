{
  super.onRender();
  if (node != null) {
    final Template templateNode=node.getTemplate();
    templateSelect.setDataProvider(new DataProvider(){
      @Override public List<Option> getData(){
        List<Option> options=new LinkedList<Option>();
        List<AbstractNode> nodes=null;
        if (templateNode != null) {
          nodes=templateNode.getSiblingNodes();
        }
 else {
          List<TextualSearchAttribute> searchAttrs=new LinkedList<TextualSearchAttribute>();
          searchAttrs.add(new TextualSearchAttribute(AbstractNode.TYPE_KEY,Template.class.getSimpleName(),SearchOperator.OR));
          nodes=(List<AbstractNode>)Services.command(SearchNodeCommand.class).execute(user,null,false,false,searchAttrs);
        }
        if (nodes != null) {
          Collections.sort(nodes);
          options.add(Option.EMPTY_OPTION);
          for (          AbstractNode n : nodes) {
            if (n instanceof Template) {
              Option opt=new Option(n.getId(),n.getName());
              options.add(opt);
            }
          }
        }
        return options;
      }
    }
);
    if (node instanceof ArbitraryNode) {
      final NodeType typeNode=((ArbitraryNode)node).getTypeNode();
      customTypeSelect.setDataProvider(new DataProvider(){
        @Override public List<Option> getData(){
          List<Option> options=new LinkedList<Option>();
          List<AbstractNode> nodes=null;
          if (typeNode != null) {
            nodes=typeNode.getSiblingNodes();
          }
 else {
            List<TextualSearchAttribute> searchAttrs=new LinkedList<TextualSearchAttribute>();
            searchAttrs.add(new TextualSearchAttribute(AbstractNode.TYPE_KEY,NodeType.class.getSimpleName(),SearchOperator.OR));
            nodes=(List<AbstractNode>)Services.command(SearchNodeCommand.class).execute(user,null,false,false,searchAttrs);
          }
          if (nodes != null) {
            Collections.sort(nodes);
            options.add(Option.EMPTY_OPTION);
            for (            AbstractNode n : nodes) {
              if (n instanceof NodeType) {
                Option opt=new Option(n.getId(),n.getName());
                options.add(opt);
              }
            }
          }
          return options;
        }
      }
);
    }
    typeSelect.setDataProvider(new DataProvider(){
      @Override public List<Option> getData(){
        List<Option> nodeList=new LinkedList<Option>();
        nodeList.add(new Option("","--- Select Node Type ---"));
        List<String> nodeTypes=new LinkedList<String>(((Map<String,Class>)Services.command(GetEntitiesCommand.class).execute()).keySet());
        Collections.sort(nodeTypes);
        for (        String className : nodeTypes) {
          Option o=new Option(className);
          nodeList.add(o);
        }
        return nodeList;
      }
    }
);
    ownerSelect.setDataProvider(new DataProvider(){
      @Override public List<Option> getData(){
        List<Option> options=new LinkedList<Option>();
        List<User> users=getAllUsers();
        if (users != null) {
          Collections.sort(users);
          options.add(Option.EMPTY_OPTION);
          for (          User u : users) {
            Option opt=new Option(u.getId(),u.getName());
            options.add(opt);
          }
        }
        return options;
      }
    }
);
    editVisibilityForm.copyFrom(node);
    editVisibilityForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
    editVisibilityForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
    editVisibilityForm.add(new HiddenField(RETURN_URL_KEY,(returnUrl != null) ? returnUrl : ""));
    editPropertiesForm.copyFrom(node);
    editPropertiesForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
    editPropertiesForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
    editPropertiesForm.add(new HiddenField(RETURN_URL_KEY,(returnUrl != null) ? returnUrl : ""));
    deleteRelationshipLink.setParameter(NODE_ID_KEY,nodeId);
    setCurrentOwnerRecursivelyLink.setParameter(NODE_ID_KEY,nodeId);
    securityForm.copyFrom(node);
    securityForm.add(new HiddenField(NODE_ID_KEY,(nodeId != null) ? nodeId : ""));
    securityForm.add(new HiddenField(RENDER_MODE_KEY,(renderMode != null) ? renderMode : ""));
    securityForm.add(new HiddenField(RETURN_URL_KEY,(returnUrl != null) ? returnUrl : ""));
    childNodesTable.setDataProvider(new DataProvider(){
      @Override public List<AbstractNode> getData(){
        List<AbstractNode> result=new LinkedList<AbstractNode>();
        result.addAll(node.getSortedDirectChildAndLinkNodes());
        return result;
      }
    }
);
    titlesTable.setDataProvider(new DataProvider(){
      @Override public List<Title> getData(){
        return node.getTitles();
      }
    }
);
    incomingRelationshipsTable.setDataProvider(new DataProvider(){
      @Override public List<StructrRelationship> getData(){
        return node.getIncomingRelationships();
      }
    }
);
    outgoingRelationshipsTable.setDataProvider(new DataProvider(){
      @Override public List<StructrRelationship> getData(){
        return node.getOutgoingRelationships();
      }
    }
);
    userSelect.setDataProvider(new DataProvider(){
      @Override public List<Option> getData(){
        List<Option> optionList=new LinkedList<Option>();
        optionList.add(Option.EMPTY_OPTION);
        List<User> users=getAllUsers();
        if (users != null) {
          for (          User u : users) {
            Option o=new Option(u.getName());
            optionList.add(o);
          }
        }
        return optionList;
      }
    }
);
    groupSelect.setDataProvider(new DataProvider(){
      @Override public List<Option> getData(){
        List<Option> optionList=new LinkedList<Option>();
        optionList.add(Option.EMPTY_OPTION);
        List<Group> groups=getAllGroups();
        if (groups != null) {
          for (          Group u : groups) {
            Option o=new Option(u.getName());
            optionList.add(o);
          }
        }
        return optionList;
      }
    }
);
    securityTable.setDataProvider(new DataProvider(){
      @Override public List<StructrRelationship> getData(){
        List<StructrRelationship> rels=node.getIncomingRelationships();
        List<StructrRelationship> result=new LinkedList<StructrRelationship>();
        for (        StructrRelationship r : rels) {
          RelationshipType rt=r.getRelType();
          boolean isSecurityRel=rt.equals(RelType.SECURITY);
          if (isSecurityRel) {
            result.add(r);
          }
        }
        return result;
      }
    }
);
  }
}
