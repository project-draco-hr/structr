{
  rootNodeLink.setParameter(AbstractNode.NODE_ID_KEY,"0");
  if (allNodes == null) {
    return;
  }
  activitiesTable.setDataProvider(new DataProvider(){
    @Override public List<Activity> getData(){
      List<Activity> result=new LinkedList<Activity>();
      LogNodeList<AbstractNode> globalLog=(LogNodeList<AbstractNode>)Services.command(GetGlobalLogCommand.class).execute();
      if (globalLog != null) {
        for (        AbstractNode s : globalLog) {
          if (s instanceof PageRequest) {
            result.add((PageRequest)s);
          }
 else {
            result.add((Activity)s);
          }
        }
      }
      return result;
    }
  }
);
  sessionsTable.setDataProvider(new DataProvider(){
    @Override public List<Session> getData(){
      return (List<Session>)SessionMonitor.getSessions();
    }
  }
);
  servicesTable.setDataProvider(new DataProvider(){
    @Override public List<Service> getData(){
      return Services.getServices();
    }
  }
);
  initValuesTable.setDataProvider(new DataProvider(){
    @Override public List<Map.Entry<String,Object>> getData(){
      List<Map.Entry<String,Object>> params=new LinkedList<Map.Entry<String,Object>>();
      params.add(new AbstractMap.SimpleEntry<String,Object>("Configuration File Path",Services.getConfigFilePath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Application Title",Services.getApplicationTitle()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Database Path",Services.getDatabasePath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Files Path",Services.getFilesPath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Modules Path",Services.getModulesPath()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("TCP Port",Services.getTcpPort()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("UDP Port",Services.getUdpPort()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("SMTP Host",Services.getSmtpHost()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("SMTP Port",Services.getSmtpPort()));
      params.add(new AbstractMap.SimpleEntry<String,Object>("Server IP",Services.getServerIP()));
      return params;
    }
  }
);
  modulesTable.setDataProvider(new DataProvider(){
    @Override public Set<String> getData(){
      Command listModules=Services.command(ListModulesCommand.class);
      return (Set<String>)listModules.execute();
    }
  }
);
}
