{
  AbstractNode s=null;
  final String targetNodeId=StringUtils.isNotEmpty(newNodeForm.getFieldValue(TARGET_NODE_ID_KEY)) ? newNodeForm.getFieldValue(TARGET_NODE_ID_KEY) : getNodeId();
  if (newNodeForm.isValid()) {
    Command transactionCommand=Services.command(TransactionCommand.class);
    s=(AbstractNode)transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command findNode=Services.command(FindNodeCommand.class);
        Command createNode=Services.command(CreateNodeCommand.class);
        Command createRel=Services.command(CreateRelationshipCommand.class);
        AbstractNode parentNode=(AbstractNode)findNode.execute(user,Long.parseLong(targetNodeId));
        AbstractNode newNode=(AbstractNode)createNode.execute(user);
        newNodeForm.copyTo(newNode);
        createRel.execute(parentNode,newNode,RelType.HAS_CHILD);
        newNodeForm.clearValues();
        addTreeNode(newNode,getCurrentTreeNode());
        openNodes.add(getCurrentTreeNode());
        return (newNode);
      }
    }
);
    if (s != null) {
      okMsg="New " + s.getType() + " node "+ s.getName()+ " has been created.";
      Command findNode=Services.command(FindNodeCommand.class);
      AbstractNode n=(AbstractNode)findNode.execute(user,s.getId());
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put(NODE_ID_KEY,String.valueOf(s.getId()));
      parameters.put(RENDER_MODE_KEY,renderMode);
      parameters.put(OK_MSG_KEY,okMsg);
      setRedirect(getRedirectPage(s),parameters);
      setRedirect(getRedirect().concat("#properties-tab"));
    }
 else {
      errorMsg="New node could not be created!";
    }
  }
  if (!newNodeForm.isValid()) {
    newNodeFormIsInvalid="true";
    return true;
  }
  return false;
}
