{
  if (newRelationshipForm.isValid()) {
    final String sourceNodeId=StringUtils.isNotEmpty(newRelationshipForm.getFieldValue(SOURCE_NODE_ID_KEY)) ? newRelationshipForm.getFieldValue(SOURCE_NODE_ID_KEY) : getNodeId();
    final String targetNodeId=newRelationshipForm.getFieldValue(TARGET_NODE_ID_KEY);
    final String relType=newRelationshipForm.getFieldValue(REL_TYPE_KEY);
    final String targetSlotName=newRelationshipForm.getFieldValue(TARGET_SLOT_NAME_KEY);
    final User user=securityContext.getUser();
    Command transactionCommand=Services.command(securityContext,TransactionCommand.class);
    transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws Throwable {
        Command findNode=Services.command(securityContext,FindNodeCommand.class);
        Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
        AbstractNode startNode=(AbstractNode)findNode.execute(Long.parseLong(sourceNodeId));
        AbstractNode endNode=(AbstractNode)findNode.execute(Long.parseLong(targetNodeId));
        StructrRelationship newRel=(StructrRelationship)createRel.execute(startNode,endNode,relType);
        newRel.setProperty(TARGET_SLOT_NAME_KEY,targetSlotName);
        return (null);
      }
    }
);
    okMsg="New relationship to node " + targetNodeId + " with type "+ relType+ " has been created.";
    Services.command(securityContext,AddNotificationCommand.class).execute(new SuccessNotification(securityContext,okMsg));
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put(NODE_ID_KEY,String.valueOf(getNodeId()));
    parameters.put(RENDER_MODE_KEY,renderMode);
    setRedirect(getRedirectPage(node),parameters);
  }
  if (!newRelationshipForm.isValid()) {
    newRelationshipFormIsInvalid="true";
    return true;
  }
  return false;
}
