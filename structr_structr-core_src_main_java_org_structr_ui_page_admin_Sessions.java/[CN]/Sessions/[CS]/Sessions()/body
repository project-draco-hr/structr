{
  super();
  sessionsTable.addColumn(new Column("id"));
  sessionsTable.addColumn(new Column("uid"));
  sessionsTable.addColumn(new Column("state"));
  sessionsTable.addColumn(new Column("userName"));
  Column loginTimestampColumn=new Column("loginTimestamp","Login");
  loginTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  sessionsTable.addColumn(loginTimestampColumn);
  Column logoutTimestampColumn=new Column("logoutTimestamp","Logout");
  logoutTimestampColumn.setFormat("{0,date,medium} {0,time,medium}");
  sessionsTable.addColumn(logoutTimestampColumn);
  sessionsTable.addColumn(new Column("lastActivityText"));
  Column inactiveSinceColumn=new Column("inactiveSince","Inactive");
  inactiveSinceColumn.setDecorator(new Decorator(){
    @Override public String render(    Object row,    Context context){
      long ms=((Session)row).getInactiveSince();
      if (ms < 1000) {
        return ms + " ms";
      }
 else       if (ms < 60 * 1000) {
        return ms / 1000 + " s";
      }
 else       if (ms < 60 * 60 * 1000) {
        long min=ms / (60 * 1000);
        long sec=(ms - (min * 60 * 1000)) / 1000;
        return min + " m " + sec+ " s";
      }
 else       if (ms < 24 * 60 * 60* 1000) {
        long hrs=ms / (60 * 60 * 1000);
        long min=(ms - (hrs * 60 * 60* 1000)) / (60 * 1000);
        long sec=(ms - (hrs * 60 * 60* 1000) - (min * 60 * 1000)) / 1000;
        return hrs + " h " + min+ " m "+ sec+ " s";
      }
 else {
        return "more than a day";
      }
    }
  }
);
  sessionsTable.addColumn(inactiveSinceColumn);
  sessionsTable.setSortable(true);
  sessionsTable.setSortedColumn("inactiveSince");
  sessionsTable.setSortedAscending(true);
  sessionsTable.setPageSize(15);
  sessionsTable.setHoverRows(true);
  sessionsTable.setShowBanner(true);
  sessionsTable.setClass(TABLE_CLASS);
}
