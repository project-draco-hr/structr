{
  WebSocketMessage webSocketData=gson.fromJson(data,WebSocketMessage.class);
  try {
    String messageToken=webSocketData.getToken();
    String command=webSocketData.getCommand();
    Class type=commandSet.get(command);
    if (type != null) {
      if (!isAuthenticated() && (messageToken != null)) {
        authenticateToken(messageToken);
      }
      if (!isAuthenticated() && !type.equals(LoginCommand.class)) {
        send(MessageBuilder.status().code(401).message("").build(),true);
        return;
      }
      AbstractCommand abstractCommand=(AbstractCommand)type.newInstance();
      abstractCommand.setWebSocket(this);
      abstractCommand.setConnection(connection);
      abstractCommand.setIdProperty(idProperty);
      webSocketData.setSessionValid(isAuthenticated());
      webSocketData.setToken(null);
      abstractCommand.processMessage(webSocketData);
    }
 else {
      logger.log(Level.WARNING,"Unknow command {0}",command);
      send(MessageBuilder.status().code(400).message("Unknown command").build(),true);
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Unable to parse message.",t);
  }
}
