{
  String type=webSocketData.getData().get("type");
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  searchAttributes.add(Search.andExactType(CaseHelper.toCamelCase(type)));
  AbstractNode topNode=null;
  boolean includeDeleted=false;
  boolean publicOnly=false;
  List<GraphObject> results=(List<GraphObject>)Services.command(SecurityContext.getSuperUserInstance(),SearchNodeCommand.class).execute(topNode,includeDeleted,publicOnly,searchAttributes);
  if (webSocketData.getSortKey() != null) {
    final String sortOrder=webSocketData.getSortOrder();
    final String sortKey=webSocketData.getSortKey();
    Comparator<GraphObject> comparator=null;
    try {
      if ("desc".equalsIgnoreCase(sortOrder)) {
        comparator=new Comparator<GraphObject>(){
          @Override public int compare(          GraphObject n1,          GraphObject n2){
            Comparable c1=(Comparable)n1.getProperty(sortKey);
            Comparable c2=(Comparable)n2.getProperty(sortKey);
            return (c2.compareTo(c1));
          }
        }
;
      }
 else {
        comparator=new Comparator<GraphObject>(){
          @Override public int compare(          GraphObject n1,          GraphObject n2){
            Comparable c1=(Comparable)n1.getProperty(sortKey);
            Comparable c2=(Comparable)n2.getProperty(sortKey);
            return (c1.compareTo(c2));
          }
        }
;
      }
      if (comparator != null) {
        Collections.sort(results,comparator);
      }
    }
 catch (    Throwable t) {
    }
  }
  if (webSocketData.getPageSize() > 0) {
    int pageSize=webSocketData.getPageSize();
    int page=webSocketData.getPage();
    int resultCount=results.size();
    int fromIndex=Math.min(resultCount,Math.max(0,(page - 1) * pageSize));
    int toIndex=Math.min(resultCount,page * pageSize);
    webSocketData.setResult(results.subList(fromIndex,toIndex));
  }
 else {
    webSocketData.setResult(results);
  }
  getWebSocket().send(getConnection(),webSocketData,true);
  return false;
}
