{
  final SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  String sourceId=webSocketData.getId();
  String targetId=webSocketData.getData().get("id");
  if (sourceId != null && targetId != null) {
    AbstractNode sourceNode=getNode(sourceId);
    AbstractNode targetNode=getNode(targetId);
    if (sourceNode != null && targetNode != null) {
      DirectedRelationship rel=EntityContext.getRelation(Group.class,Group.Key.users.name());
      if (rel != null) {
        final List<StructrRelationship> rels=sourceNode.getRelationships(rel.getRelType(),rel.getDirection());
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws Throwable {
            for (            StructrRelationship rel : rels) {
              rel.delete(securityContext);
            }
            return null;
          }
        }
;
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
        if (transaction.getCause() != null) {
          getWebSocket().send(MessageBuilder.status().code(400).message(transaction.getCause().getMessage()).build(),true);
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
