{
  try {
    AbstractNode node;
    final Map<String,Object> props=new HashMap<String,Object>();
    String type="UnknownTestType";
    String name="GenericNode-name";
    props.put(AbstractNode.type.name(),type);
    props.put(AbstractNode.name.name(),name);
    node=(AbstractNode)transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        return (AbstractNode)createNodeCommand.execute(props);
      }
    }
);
    assertTrue(node != null);
    final String nodeId=node.getUuid();
    transactionCommand.execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        return deleteNodeCommand.execute(nodeId);
      }
    }
);
    try {
      findNodeCommand.execute(nodeId);
      fail("Should have raised a not found exception");
    }
 catch (    FrameworkException fe) {
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
