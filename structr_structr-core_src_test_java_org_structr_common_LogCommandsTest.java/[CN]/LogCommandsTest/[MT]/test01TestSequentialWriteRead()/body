{
  try {
    int number=100;
    String logPageKey="test1";
    long t0=System.nanoTime();
    for (int i=0; i < number; i++) {
      writeLogCommand.execute(logPageKey,new String[]{"foo" + i,"bar"});
    }
    long t1=System.nanoTime();
    DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
    Double time=(t1 - t0) / 1000000000.0;
    Double rate=number / ((t1 - t0) / 1000000000.0);
    logger.log(Level.INFO,"Created {0} log entries in {1} seconds ({2} per s)",new Object[]{number,decimalFormat.format(time),decimalFormat.format(rate)});
    Map<String,Object> result=(Map<String,Object>)readLogCommand.execute(logPageKey);
    for (    Entry<String,Object> entry : result.entrySet()) {
      String key=entry.getKey();
      Object val=entry.getValue();
      assertTrue(val instanceof String[]);
      String[] values=(String[])val;
    }
    assertTrue(result.size() == number);
    for (int i=0; i < number; i++) {
      writeLogCommand.execute(logPageKey,new String[]{"foo" + i,"bar"});
    }
    result=(Map<String,Object>)readLogCommand.execute(logPageKey);
    assertTrue(result.size() == 2 * number);
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
