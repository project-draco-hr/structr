{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    String type=TestOne.class.getSimpleName();
    int number=89;
    List<AbstractNode> nodes=this.createTestNodes(type,number);
    int offset=10;
    int i=offset;
    String name;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    for (    AbstractNode node : nodes) {
      name="TestOne-" + i;
      i++;
      node.setName(name);
    }
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andExactTypeAndSubtypes(type));
    Result result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == number);
    String sortKey=AbstractNode.name.name();
    boolean sortDesc=false;
    for (int ps=0; ps < 10; ps++) {
      for (int p=0; p < (number / Math.max(1,ps)) + 1; p++) {
        testPaging(ps,p,number,offset,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc);
      }
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
