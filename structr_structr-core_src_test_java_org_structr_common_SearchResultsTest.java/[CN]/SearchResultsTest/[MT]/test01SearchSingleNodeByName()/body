{
  try {
    Map<String,Object> props=new HashMap<String,Object>();
    String key="name";
    String name="89w3hklsdfghsdkljth";
    props.put(key,name);
    AbstractNode node=createTestNode("Something",props);
    boolean includeDeletedAndHidden=true;
    boolean publicOnly=false;
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(new TextualSearchAttribute(key,name,SearchOperator.AND));
    Result result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == 1);
    assertTrue(result.get(0).equals(node));
    name="klppptzoehig??soiutz??w0e9hg";
    node.setProperty(key,name);
    searchAttributes.clear();
    searchAttributes.add(new TextualSearchAttribute(key,name,SearchOperator.AND));
    result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == 1);
    assertTrue(result.get(0).equals(node));
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
