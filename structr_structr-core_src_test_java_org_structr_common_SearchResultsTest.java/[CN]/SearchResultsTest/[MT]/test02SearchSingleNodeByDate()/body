{
  try {
    Map<String,Object> props=new HashMap<String,Object>();
    String key="someDate";
    Date date=new Date();
    String type="Something";
    props.put(key,date);
    AbstractNode node=createTestNode(type,props);
    boolean includeDeletedAndHidden=true;
    boolean publicOnly=false;
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(new TextualSearchAttribute(AbstractNode.Key.type.name(),type,SearchOperator.AND));
    searchAttributes.add(new FilterSearchAttribute(key,date.getTime(),SearchOperator.AND));
    Result result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == 1);
    assertTrue(result.get(0).equals(node));
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
