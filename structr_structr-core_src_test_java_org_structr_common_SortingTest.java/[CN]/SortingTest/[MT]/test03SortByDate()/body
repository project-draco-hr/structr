{
  try {
    boolean includeDeletedAndHidden=false;
    boolean publicOnly=false;
    String type=TestOne.class.getSimpleName();
    int number=97;
    List<AbstractNode> nodes=this.createTestNodes(type,number);
    int offset=10;
    int i=offset;
    String name;
    Collections.shuffle(nodes,new Random(System.nanoTime()));
    for (    AbstractNode node : nodes) {
      name=Integer.toString(i);
      i++;
      node.setName("TestOne-" + name);
      long timestamp=(new Date()).getTime();
      node.setProperty(TestOne.aDate,timestamp);
    }
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andType(type));
    Result result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == number);
    String sortKey=TestOne.aDate.name();
    boolean sortDesc=false;
    int pageSize=10;
    int page=1;
    result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page,null,SortField.LONG);
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == Math.min(number,pageSize));
    for (int j=0; j < Math.min(result.size(),pageSize); j++) {
      String expectedName="TestOne-" + (offset + j);
      String gotName=result.get(j).getStringProperty(AbstractNode.name);
      System.out.println(expectedName + ", got: " + gotName);
      assertTrue(gotName.equals(expectedName));
    }
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
