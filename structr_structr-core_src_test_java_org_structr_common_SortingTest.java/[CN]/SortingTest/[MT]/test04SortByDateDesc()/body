{
  try {
    boolean includeDeletedAndHidden=true;
    boolean publicOnly=false;
    String type=TestOne.class.getSimpleName();
    int number=43;
    List<AbstractNode> nodes=this.createTestNodes(type,number);
    String name;
    int i=10;
    Collections.shuffle(nodes);
    for (    AbstractNode node : nodes) {
      name=Integer.toString(i);
      i++;
      node.setName(name);
    }
    List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
    searchAttributes.add(Search.andType(type));
    Result result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes);
    assertTrue(result.size() == number);
    String sortKey=AbstractNode.Key.lastModifiedDate.name();
    boolean sortDesc=true;
    int pageSize=10;
    int page=1;
    result=(Result)searchNodeCommand.execute(null,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDesc,pageSize,page);
    for (    GraphObject obj : result.getResults()) {
      System.out.println(obj.getStringProperty(AbstractNode.Key.name) + ", " + obj.getDateProperty(AbstractNode.Key.lastModifiedDate));
    }
    logger.log(Level.INFO,"Raw result size: {0}, expected: {1}",new Object[]{result.getRawResultCount(),number});
    assertTrue(result.getRawResultCount() == number);
    logger.log(Level.INFO,"Result size: {0}, expected: {1}",new Object[]{result.size(),pageSize});
    assertTrue(result.size() == pageSize);
    assertTrue(result.get(0).getStringProperty(AbstractNode.Key.name).equals("52"));
    assertTrue(result.get(1).getStringProperty(AbstractNode.Key.name).equals("51"));
    assertTrue(result.get(2).getStringProperty(AbstractNode.Key.name).equals("50"));
    assertTrue(result.get(3).getStringProperty(AbstractNode.Key.name).equals("49"));
    assertTrue(result.get(4).getStringProperty(AbstractNode.Key.name).equals("48"));
    assertTrue(result.get(5).getStringProperty(AbstractNode.Key.name).equals("47"));
    assertTrue(result.get(6).getStringProperty(AbstractNode.Key.name).equals("46"));
    assertTrue(result.get(7).getStringProperty(AbstractNode.Key.name).equals("45"));
    assertTrue(result.get(8).getStringProperty(AbstractNode.Key.name).equals("44"));
    assertTrue(result.get(9).getStringProperty(AbstractNode.Key.name).equals("43"));
  }
 catch (  FrameworkException ex) {
    logger.log(Level.SEVERE,ex.toString());
    fail("Unexpected exception");
  }
}
