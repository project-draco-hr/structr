{
  HttpServletRequest request=out.getRequest();
  if (out.getSecurityContext().getUser() != null) {
    return (true);
  }
  Boolean sessionBlocked=getSessionBlockedValue().get(out.getRequest());
  if (Boolean.TRUE.equals(sessionBlocked)) {
    getErrorMessageValue().set(out.getRequest(),"Too many login attempts, session is blocked for login");
    return (false);
  }
  String username=(String)getValue(request,Key.username.name());
  String password=(String)getValue(request,Key.password.name());
  String antiRobot=(String)getValue(request,Key.antiRobot.name());
  if (StringUtils.isNotEmpty(antiRobot)) {
    return (false);
  }
  if (StringUtils.isEmpty(username)) {
    setErrorValue(request,Key.username.name(),"You must enter a username");
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    return (false);
  }
  if (StringUtils.isEmpty(password)) {
    setErrorValue(request,Key.password.name(),"You must enter a password");
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    return (false);
  }
  User loginUser=(User)Services.command(out.getSecurityContext(),FindUserCommand.class).execute(username);
  getErrorMessageValue().set(request,LOGIN_FAILURE_TEXT);
  if (loginUser == null) {
    logger.log(Level.INFO,"No user found for name {0}",loginUser);
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    return (false);
  }
  try {
    out.getSecurityContext().doLogin(username,password);
  }
 catch (  AuthenticationException aex) {
    logger.log(Level.INFO,"User {0} is blocked",loginUser);
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    return (false);
  }
  String encryptedPasswordValue=DigestUtils.sha512Hex(password);
  if (!encryptedPasswordValue.equals(loginUser.getEncryptedPassword())) {
    logger.log(Level.INFO,"Wrong password for user {0}",loginUser);
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    getErrorMessageValue().set(request,LOGIN_FAILURE_TEXT);
    countLoginFailure(request,request.getSession(),getMaxErrors(),getDelayThreshold(),getDelayTime());
    return false;
  }
  long sessionId=SessionMonitor.registerUserSession(securityContext,request.getSession());
  SessionMonitor.logActivity(out.getSecurityContext(),sessionId,"Login");
  getSessionBlockedValue().set(request,false);
  getLoginAttemptsValue().set(request,0);
  getErrorMessageValue().set(request,null);
  getOkMessageValue().set(out.getRequest(),"Login successful.");
  return (true);
}
