{
  List<LineString> lines=new ArrayList<LineString>();
  for (  Geometry g : geoms) {
    accumulateLineStrings(g,lines);
  }
  if (lines.size() == 0)   return null;
  List<LineString> clippedLines=new ArrayList<LineString>();
  for (  LineString ls : lines) {
    MultiLineString ll=clipLineString(ls);
    if ((ll != null) && (!(ll.isEmpty()))) {
      for (int t=0; t < ll.getNumGeometries(); t++)       clippedLines.add((LineString)ll.getGeometryN(t));
    }
  }
  if (removeOverlaps) {
    List<LineString> cleanedLines=new ArrayList<LineString>();
    List<Geometry> bufferCache=new ArrayList<Geometry>();
    for (    LineString ls : clippedLines) {
      Geometry g=ls;
      for (int i=0; i < cleanedLines.size(); i++) {
        LineString cleaned=cleanedLines.get(i);
        if (g.getEnvelopeInternal().intersects(cleaned.getEnvelopeInternal())) {
          Geometry buffer=bufferCache.get(i);
          if (buffer == null) {
            buffer=cleaned.buffer(2);
            bufferCache.set(i,buffer);
          }
          g=g.difference(buffer);
        }
      }
      int added=accumulateLineStrings(g,cleanedLines);
      for (int i=0; i < added; i++) {
        bufferCache.add(null);
      }
    }
    clippedLines=cleanedLines;
  }
  if (clippedLines == null || clippedLines.size() == 0)   return null;
  List<LineString> merged=mergeLines(clippedLines);
  if (merged.size() == 0)   return null;
  Collections.sort(merged,new LineLengthComparator());
  return merged;
}
