{
  Iterator iterator=null;
  if (collection != null) {
    iterator=collection.iterator();
  }
  if (features != null) {
    iterator=features.iterator();
  }
  if (iterator == null) {
    return;
  }
  final LiteFeatureTypeStyle[] fts_array=(LiteFeatureTypeStyle[])lfts.toArray(new LiteFeatureTypeStyle[lfts.size()]);
  try {
    boolean clone=isCloningRequired(currLayer,fts_array);
    RenderableFeature rf=new RenderableFeature(currLayer,clone);
    while (iterator.hasNext() && !renderingStopRequested) {
      try {
        rf.setFeature(iterator.next());
        for (        LiteFeatureTypeStyle liteFeatureTypeStyle : fts_array) {
          rf.setScreenMap(liteFeatureTypeStyle.screenMap);
          process(rf,liteFeatureTypeStyle,scaleRange,at,destinationCrs,layerId);
        }
      }
 catch (      Throwable tr) {
        fireErrorEvent(tr);
      }
    }
    requests.put(new MergeLayersRequest(graphics,fts_array));
  }
 catch (  InterruptedException e) {
    fireErrorEvent(e);
  }
 finally {
    if (collection instanceof FeatureCollection) {
      FeatureCollection resource=(FeatureCollection)collection;
      resource.close(iterator);
    }
 else     if (features != null) {
      features.close(iterator);
    }
  }
}
