{
  final FeatureTypeStyle[] featureStylers=currLayer.getStyle().getFeatureTypeStyles();
  final FeatureSource featureSource=currLayer.getFeatureSource();
  Collection collection=null;
  FeatureCollection features=null;
  final CoordinateReferenceSystem sourceCrs;
  final NumberRange scaleRange=new NumberRange(scaleDenominator,scaleDenominator);
  final ArrayList<LiteFeatureTypeStyle> lfts;
  if (featureSource != null) {
    final FeatureType schema=featureSource.getSchema();
    final GeometryDescriptor geometryAttribute=schema.getGeometryDescriptor();
    sourceCrs=geometryAttribute.getType().getCoordinateReferenceSystem();
    if (LOGGER.isLoggable(Level.FINE)) {
      LOGGER.fine(new StringBuffer("processing ").append(featureStylers.length).append(" stylers for ").append(currLayer.getFeatureSource().getSchema().getName()).toString());
    }
    lfts=createLiteFeatureTypeStyles(featureStylers,schema,graphics);
    if (lfts.size() == 0) {
      return;
    }
    applyUnitRescale(lfts);
    LiteFeatureTypeStyle[] featureTypeStyleArray=(LiteFeatureTypeStyle[])lfts.toArray(new LiteFeatureTypeStyle[lfts.size()]);
    inMemoryGeneralization=true;
    features=queryLayer(currLayer,featureSource,schema,featureTypeStyleArray,mapArea,destinationCrs,sourceCrs,screenSize,geometryAttribute,at);
    features=prepFeatureCollection(features,sourceCrs);
  }
 else {
    CollectionSource source=currLayer.getSource();
    collection=queryLayer(currLayer,currLayer.getSource());
    sourceCrs=null;
    lfts=createLiteFeatureTypeStyles(featureStylers,source.describe(),graphics);
    applyUnitRescale(lfts);
  }
  if (lfts.size() == 0) {
    return;
  }
  if (isOptimizedFTSRenderingEnabled() && lfts.size() > 1) {
    drawOptimized(graphics,currLayer,at,destinationCrs,layerId,collection,features,scaleRange,lfts);
  }
 else {
    drawPlain(graphics,currLayer,at,destinationCrs,layerId,collection,features,scaleRange,lfts);
  }
}
