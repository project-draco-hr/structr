{
  String errorMsg;
  if (editNodeId != null && getId() == editNodeId.longValue()) {
    renderEditFrame(out,editUrl);
  }
 else {
    HttpServletRequest request=getRequest();
    if (request == null) {
      return;
    }
    HttpSession session=request.getSession();
    if (session == null) {
      return;
    }
    Boolean alreadyLoggedIn=session.getAttribute(USERNAME_KEY) != null;
    if (alreadyLoggedIn) {
      return;
    }
    Boolean sessionBlocked=(Boolean)session.getAttribute(SESSION_BLOCKED);
    if (Boolean.TRUE.equals(sessionBlocked)) {
      out.append("<div class=\"errorMsg\">").append("Too many login attempts, session is blocked for login").append("</div>");
      return;
    }
    String usernameFieldName=getUsernameFieldName() != null ? getUsernameFieldName() : defaultUsernameFieldName;
    String passwordFieldName=getPasswordFieldName() != null ? getPasswordFieldName() : defaultPasswordFieldName;
    int maxRetries=getMaxRetries() > 0 ? getMaxRetries() : defaultMaxRetries;
    int delayThreshold=getDelayThreshold() > 0 ? getDelayThreshold() : defaultDelayThreshold;
    int delayTime=getDelayTime() > 0 ? getDelayTime() : defaultDelayTime;
    String username=request.getParameter(usernameFieldName);
    String password=request.getParameter(passwordFieldName);
    if (StringUtils.isEmpty(username)) {
      out.append("<div class=\"errorMsg\">").append("You must enter a username").append("</div>");
      countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
      return;
    }
    if (StringUtils.isEmpty(password)) {
      out.append("<div class=\"errorMsg\">").append("You must enter a password").append("</div>");
      countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
      return;
    }
    User loginUser=(User)Services.command(FindUserCommand.class).execute(username);
    errorMsg=LOGIN_FAILURE_TEXT;
    if (loginUser == null) {
      logger.log(Level.INFO,"No user found for name {0}",loginUser);
      out.append("<div class=\"errorMsg\">").append(errorMsg).append("</div>");
      countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
      return;
    }
    if (loginUser.isBlocked()) {
      logger.log(Level.INFO,"User {0} is blocked",loginUser);
      out.append("<div class=\"errorMsg\">").append(errorMsg).append("</div>");
      countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
      return;
    }
    String encryptedPasswordValue=DigestUtils.sha512Hex(password);
    if (!encryptedPasswordValue.equals(loginUser.getPassword())) {
      logger.log(Level.INFO,"Wrong password for user {0}",loginUser);
      out.append("<div class=\"errorMsg\">").append(errorMsg).append("</div>");
      countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
      return;
    }
    session.setAttribute(USERNAME_KEY,loginUser.getName());
    long sessionId=SessionMonitor.registerUser(user,session);
    SessionMonitor.logActivity(user,sessionId,"Login");
    session.setAttribute(SessionMonitor.SESSION_ID,sessionId);
    session.removeAttribute(SESSION_BLOCKED);
    session.removeAttribute(NUMBER_OF_LOGIN_ATTEMPTS);
    out.append("<div class=\"okMsg\">").append("Welcome ").append(loginUser.getRealName()).append("!").append("</div>");
  }
}
