{
  if (editNodeId != null && getId() == editNodeId.longValue()) {
    renderEditFrame(out,editUrl);
  }
 else {
    readParameters();
    if (!validateParameters())     return;
    String to=replaceInContent(getToAddressTemplate(),parameterMap);
    String toName=replaceInContent(getToNameTemplate(),parameterMap);
    String from=replaceInContent(getFromAddressTemplate(),parameterMap);
    String fromName=replaceInContent(getFromNameTemplate(),parameterMap);
    String cc=replaceInContent(getCcAddressTemplate(),parameterMap);
    String bcc=replaceInContent(getBccAddressTemplate(),parameterMap);
    String subject=replaceInContent(getMailSubjectTemplate(),parameterMap);
    String htmlContent=replaceInContent(getHtmlBodyTemplate(),parameterMap);
    String textContent=null;
    if (StringUtils.isNotEmpty(htmlContent)) {
      textContent=Jsoup.parse(htmlContent).text();
    }
    if (errorMsg.length() == 0) {
      try {
        MailHelper.sendHtmlMail(from,fromName,to,toName,cc,bcc,from,subject,htmlContent,textContent);
        out.append("<div class=\"okMsg\">").append("An e-mail with your invitation was send to ").append(to).append("</div>");
        out.append("<div class=\"htmlMessage\">").append(htmlContent).append("</div>");
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,"Error while sending e-mail",e);
        errorMsg.append("<div class=\"errorMsg\">").append("Error while sending e-mail: ").append(e.getMessage()).append("</div>");
      }
    }
    if (errorMsg.length() > 0) {
      out.append(errorMsg).append(errorStyle);
      return;
    }
  }
}
