{
  if (editNodeId != null && getId() == editNodeId.longValue()) {
    renderEditFrame(out,editUrl);
  }
 else {
    HttpServletRequest request=CurrentRequest.getRequest();
    if (request == null) {
      return;
    }
    HttpSession session=request.getSession();
    if (session == null) {
      return;
    }
    Boolean alreadyLoggedIn=CurrentSession.getGlobalUsername() != null;
    if (alreadyLoggedIn) {
      return;
    }
    Boolean sessionBlocked=(Boolean)session.getAttribute(SESSION_BLOCKED);
    if (Boolean.TRUE.equals(sessionBlocked)) {
      out.append("<div class=\"errorMsg\">").append("Unable to register. Session is blocked.").append("</div>");
      return;
    }
    String usernameFieldName=getUsernameFieldName() != null ? getUsernameFieldName() : RegistrationForm.defaultUsernameFieldName;
    String passwordFieldName=getPasswordFieldName() != null ? getPasswordFieldName() : RegistrationForm.defaultPasswordFieldName;
    String confirmPasswordFieldName=getConfirmPasswordFieldName() != null ? getConfirmPasswordFieldName() : RegistrationForm.defaultConfirmPasswordFieldName;
    String firstNameFieldName=getFirstNameFieldName() != null ? getFirstNameFieldName() : RegistrationForm.defaultFirstNameFieldName;
    String lastNameFieldName=getLastNameFieldName() != null ? getLastNameFieldName() : RegistrationForm.defaultLastNameFieldName;
    String emailFieldName=getEmailFieldName() != null ? getEmailFieldName() : RegistrationForm.defaultEmailFieldName;
    String confirmEmailFieldName=getConfirmEmailFieldName() != null ? getConfirmEmailFieldName() : RegistrationForm.defaultConfirmEmailFieldName;
    String streetFieldName=getStreetFieldName() != null ? getStreetFieldName() : RegistrationForm.defaultStreetFieldName;
    String zipCodeFieldName=getZipCodeFieldName() != null ? getZipCodeFieldName() : RegistrationForm.defaultZipCodeFieldName;
    String cityFieldName=getCityFieldName() != null ? getCityFieldName() : RegistrationForm.defaultCityFieldName;
    String countryFieldName=getCountryFieldName() != null ? getCountryFieldName() : RegistrationForm.defaultCountryFieldName;
    String agreedToTermsOfUseFieldName=getAgreedToTermsOfUseFieldName() != null ? getAgreedToTermsOfUseFieldName() : RegistrationForm.defaultAgreedToTermsOfUseFieldName;
    String newsletterFieldName=getNewsletterFieldName() != null ? getNewsletterFieldName() : RegistrationForm.defaultNewsletterFieldName;
    String confirmationKeyFieldName=getConfirmationKeyFieldName() != null ? getConfirmationKeyFieldName() : RegistrationForm.defaultConfirmationKeyFieldName;
    String submitButtonName=getSubmitButtonName() != null ? getSubmitButtonName() : RegistrationForm.defaultSubmitButtonName;
    String antiRobotFieldName=getAntiRobotFieldName() != null ? getAntiRobotFieldName() : RegistrationForm.defaultAntiRobotFieldName;
    final String publicUserDirectoryName=getPublicUserDirectoryName() != null ? getPublicUserDirectoryName() : RegistrationForm.defaultPublicUserDirectoryName;
    String senderAddress=getSenderAddress() != null ? getSenderAddress() : RegistrationForm.defaultSenderAddress;
    String senderName=getSenderName() != null ? getSenderName() : RegistrationForm.defaultSenderName;
    String inlineCss=getInlineCss() != null ? getInlineCss() : RegistrationForm.defaultInlineCss;
    final String assignedUsername=getAssignedUsername() != null ? getAssignedUsername() : RegistrationForm.defaultAssignedUsername;
    final String username=request.getParameter(usernameFieldName);
    final String password=request.getParameter(passwordFieldName);
    String confirmPassword=request.getParameter(confirmPasswordFieldName);
    final String firstName=request.getParameter(firstNameFieldName);
    final String lastName=request.getParameter(lastNameFieldName);
    final String email=request.getParameter(emailFieldName);
    String confirmEmail=request.getParameter(confirmEmailFieldName);
    final String street=request.getParameter(streetFieldName);
    final String zipCode=request.getParameter(zipCodeFieldName);
    final String city=request.getParameter(cityFieldName);
    final String country=request.getParameter(countryFieldName);
    String agreedToTermsOfUse=request.getParameter(agreedToTermsOfUseFieldName);
    final String newsletter=request.getParameter(newsletterFieldName);
    String confirmationKey=request.getParameter(confirmationKeyFieldName);
    String submitButton=request.getParameter(submitButtonName);
    String antiRobot=request.getParameter(antiRobotFieldName);
    int maxRetries=getMaxErrors() > 0 ? getMaxErrors() : defaultMaxErrors;
    int delayThreshold=getDelayThreshold() > 0 ? getDelayThreshold() : defaultDelayThreshold;
    int delayTime=getDelayTime() > 0 ? getDelayTime() : defaultDelayTime;
    if (StringUtils.isNotEmpty(antiRobot)) {
      return;
    }
    User loginUser=null;
    if (StringUtils.isNotEmpty(confirmationKey) && StringUtils.isNotEmpty(username)) {
      loginUser=(User)Services.command(FindUserCommand.class).execute(username);
      if (loginUser == null) {
        String message="<div class=\"errorMsg\">Missing username or user not found!</div>";
        registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
      }
      if (hasFailures(out)) {
        return;
      }
      String confirmationKeyFromUser=loginUser.getConfirmationKey();
      if (StringUtils.isNotBlank(confirmationKeyFromUser) && confirmationKeyFromUser.equals(confirmationKey)) {
        loginUser.setBlocked(false);
        loginUser.setConfirmationKey(null);
        out.append("<div class=\"okMsg\">").append("Registration complete, you may now login.").append("</div>");
        return;
      }
    }
    if (StringUtils.isEmpty(submitButton)) {
      return;
    }
    if (StringUtils.isNotEmpty(username)) {
      loginUser=(User)Services.command(FindUserCommand.class).execute(username);
    }
    if (loginUser != null) {
      logger.log(Level.INFO,"User with name {0} already exists",loginUser);
      String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_USER_EXISTS + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    if (hasFailures(out)) {
      return;
    }
    boolean usernameEmpty=StringUtils.isEmpty(username);
    boolean passwordEmpty=StringUtils.isEmpty(password);
    boolean confirmPasswordEmpty=StringUtils.isEmpty(confirmPassword);
    boolean firstNameEmpty=StringUtils.isEmpty(firstName);
    boolean lastNameEmpty=StringUtils.isEmpty(lastName);
    boolean emailEmpty=StringUtils.isEmpty(email);
    boolean confirmEmailEmpty=StringUtils.isEmpty(confirmEmail);
    if (firstNameEmpty || lastNameEmpty || emailEmpty|| confirmEmailEmpty) {
      StringBuilder errorsOnMandatoryFields=new StringBuilder();
      errorsOnMandatoryFields.append("<div class=\"errorMsg\">").append(REGISTRATION_FAILURE_MANDATORY_FIELD_EMPTY).append("</div>");
      errorsOnMandatoryFields.append("<style type=\"text/css\">");
      if (usernameEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(usernameFieldName).append("] { background-color: #ffc }");
      }
 else {
        loginUser=(User)Services.command(FindUserCommand.class).execute(username);
        if (loginUser != null) {
          logger.log(Level.FINE,"User with name {0} already exists",loginUser);
          String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_USER_EXISTS + "</div>";
          registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
        }
      }
      if (passwordEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(passwordFieldName).append("] { background-color: #ffc }");
      }
      if (confirmPasswordEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(confirmPasswordFieldName).append("] { background-color: #ffc }");
      }
      if (firstNameEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(firstNameFieldName).append("] { background-color: #ffc }");
      }
      if (firstNameEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(firstNameFieldName).append("] { background-color: #ffc }");
      }
      if (lastNameEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(lastNameFieldName).append("] { background-color: #ffc }");
      }
      if (emailEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(emailFieldName).append("] { background-color: #ffc }");
      }
      if (confirmEmailEmpty) {
        errorsOnMandatoryFields.append("input[name=").append(confirmEmailFieldName).append("] { background-color: #ffc }");
      }
      errorsOnMandatoryFields.append("</style>");
      registerFailure(out,errorsOnMandatoryFields.toString(),session,maxRetries,delayThreshold,delayTime);
    }
    if (hasFailures(out)) {
      return;
    }
    if (!(password.equals(confirmPassword))) {
      String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_PASSWORDS_DONT_MATCH + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    String pattern="((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,})";
    if (!(password.matches(pattern))) {
      String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_WEAK_PASSWORD + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    if (!(email.equals(confirmEmail))) {
      String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_EMAILS_DONT_MATCH + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    if (StringUtils.isEmpty(agreedToTermsOfUse)) {
      String message="<div class=\"errorMsg\">" + REGISTRATION_FAILURE_NOT_AGREED_TO_TERMS_OF_USE + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    StringBuilder content=new StringBuilder(HTML_HEADER);
    content.append(inlineCss);
    content.append("<p>An account was requested with the following personal data:</p>");
    content.append("<table>");
    if (StringUtils.isNotEmpty(username)) {
      content.append("<tr><td>Username:</td><td>").append(username).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(firstName)) {
      content.append("<tr><td>First Name:</td><td>").append(firstName).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(lastName)) {
      content.append("<tr><td>Last Name:</td><td>").append(lastName).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(email)) {
      content.append("<tr><td>E-Mail Address:</td><td>").append(email).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(street)) {
      content.append("<tr><td>Street:</td><td>").append(street).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(zipCode)) {
      content.append("<tr><td>ZIP Code:</td><td>").append(zipCode).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(city)) {
      content.append("<tr><td>City:</td><td>").append(city).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(country)) {
      content.append("<tr><td>Country:</td><td>").append(country).append("</td></tr>");
    }
    if (StringUtils.isNotEmpty(newsletter)) {
      content.append("<tr><td>Newsletter:</td><td>yes").append("</td></tr>");
    }
    content.append("</table>");
    if (hasFailures(out)) {
      return;
    }
    final String confirmationKeyForMail=DigestUtils.sha256Hex(username);
    content.append("<p><a href=\"");
    content.append(request.getScheme()).append("://").append(request.getServerName()).append(":").append(request.getServerPort());
    String pageUrl=request.getContextPath().concat("/view".concat(startNode.getNodePath(user).replace("&","%26"))).concat("?").concat(confirmationKeyFieldName).concat("=").concat(confirmationKeyForMail).concat("&").concat(usernameFieldName).concat("=").concat(username);
    content.append(pageUrl);
    content.append("\">");
    content.append("Please click on this link to complete your registration.");
    content.append("</a></p>");
    content.append("<p>If you think that this registration request was not legitimate, please forward this message to ").append(senderAddress).append(".</p>");
    content.append("<p>If something is not working as expected, please forward this message to ").append(senderAddress).append(", together with a short description of the issue you had. Thank you.</p>");
    content.append(HTML_FOOTER);
    String to=email;
    String toName=firstName + " " + lastName;
    String from=senderAddress;
    String fromName=senderName;
    String subject="Account requested, please confirm your e-mail address";
    String htmlContent=content.toString();
    String textContent=Jsoup.parse(htmlContent).text();
    try {
      MailHelper.sendHtmlMail(from,fromName,to,toName,null,null,senderAddress,subject,htmlContent,textContent);
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,"Error while sending registration e-mail",e);
      String message="<div class=\"errorMsg\">Error while sending registration e-mail: " + e.getLocalizedMessage() + "</div>";
      registerFailure(out,message,session,maxRetries,delayThreshold,delayTime);
    }
    if (hasFailures(out)) {
      return;
    }
    final RegistrationCheck registrationCheckNode=this;
    User newUser=(User)Services.command(TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute(){
        Command create=Services.command(CreateNodeCommand.class);
        Command link=Services.command(CreateRelationshipCommand.class);
        Command search=Services.command(SearchNodeCommand.class);
        List<SearchAttribute> searchAttrs=new LinkedList<SearchAttribute>();
        User assignedUser=null;
        searchAttrs.add(Search.andExactName(assignedUsername));
        searchAttrs.add(Search.andExactType(User.class.getSimpleName()));
        List<User> userList=(List<User>)search.execute(new SuperUser(),null,false,false,searchAttrs);
        if (!(userList.isEmpty())) {
          assignedUser=userList.get(0);
        }
        searchAttrs.clear();
        User newUser=(User)create.execute(assignedUser,new NodeAttribute(AbstractNode.NAME_KEY,username),new NodeAttribute(AbstractNode.TYPE_KEY,User.class.getSimpleName()),new NodeAttribute(Person.FIRST_NAME_KEY,firstName),new NodeAttribute(Person.LAST_NAME_KEY,lastName),new NodeAttribute(User.REAL_NAME_KEY,(firstName + " " + lastName)),new NodeAttribute(Person.STREET_KEY,street),new NodeAttribute(Person.ZIP_CODE_KEY,zipCode),new NodeAttribute(Person.CITY_KEY,city),new NodeAttribute(Person.COUNTRY_KEY,country),new NodeAttribute(Person.EMAIL_1_KEY,email),new NodeAttribute(Person.NEWSLETTER_KEY,StringUtils.isNotEmpty(newsletter)),new NodeAttribute(User.BLOCKED_KEY,true),new NodeAttribute(User.CONFIRMATION_KEY_KEY,confirmationKeyForMail));
        newUser.setPassword(password);
        searchAttrs.add(Search.andExactName(publicUserDirectoryName));
        searchAttrs.add(Search.andExactType(Folder.class.getSimpleName()));
        List<Folder> folders=(List<Folder>)search.execute(null,registrationCheckNode,false,false,searchAttrs);
        Folder publicUserDirectory=null;
        if (folders.size() > 0) {
          publicUserDirectory=folders.get(0);
        }
        if (assignedUser == null) {
          logger.log(Level.WARNING,"No assignable user, all objects created will only be visible to the super user!");
        }
        if (publicUserDirectory == null) {
          publicUserDirectory=(Folder)create.execute(assignedUser,new NodeAttribute(AbstractNode.NAME_KEY,publicUserDirectoryName),new NodeAttribute(AbstractNode.TYPE_KEY,Folder.class.getSimpleName()));
          link.execute(registrationCheckNode,publicUserDirectory,RelType.HAS_CHILD);
        }
        link.execute(publicUserDirectory,newUser,RelType.HAS_CHILD);
        Services.command(IndexNodeCommand.class).execute(newUser);
        return newUser;
      }
    }
);
    logger.log(Level.INFO,"A new public user {0}[{1}] has been created.",new Object[]{newUser.getName(),newUser.getId()});
    session.removeAttribute(SESSION_BLOCKED);
    session.removeAttribute(NUMBER_OF_REGISTRATION_ATTEMPTS);
    out.append("<div class=\"okMsg\">").append("An e-mail has been sent to you to validate the given e-mail address. Please click on the link in the e-mail to complete registration.").append("</div>");
  }
}
