{
  SecurityContext securityContext=out.getSecurityContext();
  HttpServletRequest request=out.getRequest();
  if (request == null) {
    return;
  }
  HttpSession session=request.getSession();
  if (session == null) {
    return;
  }
  String usernameFromSession=(String)session.getAttribute(WebNode.Key.username.name());
  Boolean alreadyLoggedIn=usernameFromSession != null;
  if (alreadyLoggedIn) {
    return;
  }
  Boolean sessionBlocked=(Boolean)session.getAttribute(WebNode.Key.sessionBlocked.name());
  if (Boolean.TRUE.equals(sessionBlocked)) {
    out.append("<div class=\"errorMsg\">").append("Too many login attempts, session is blocked for login").append("</div>");
    return;
  }
  String submitButtonName=currentNode.getSubmitButtonName() != null ? currentNode.getSubmitButtonName() : defaultSubmitButtonName;
  String antiRobotFieldName=currentNode.getAntiRobotFieldName() != null ? currentNode.getAntiRobotFieldName() : defaultAntiRobotFieldName;
  String usernameFieldName=currentNode.getUsernameFieldName() != null ? currentNode.getUsernameFieldName() : defaultUsernameFieldName;
  String passwordFieldName=currentNode.getPasswordFieldName() != null ? currentNode.getPasswordFieldName() : defaultPasswordFieldName;
  int maxRetries=currentNode.getMaxErrors() > 0 ? currentNode.getMaxErrors() : defaultMaxErrors;
  int delayThreshold=currentNode.getDelayThreshold() > 0 ? currentNode.getDelayThreshold() : defaultDelayThreshold;
  int delayTime=currentNode.getDelayTime() > 0 ? currentNode.getDelayTime() : defaultDelayTime;
  String username=request.getParameter(usernameFieldName);
  String password=request.getParameter(passwordFieldName);
  String submitButton=request.getParameter(submitButtonName);
  String antiRobot=request.getParameter(antiRobotFieldName);
  if (StringUtils.isEmpty(submitButton)) {
    return;
  }
  if (StringUtils.isNotEmpty(antiRobot)) {
    return;
  }
  if (StringUtils.isEmpty(username)) {
    out.append("<div class=\"errorMsg\">").append("You must enter a username").append("</div>");
    countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
    return;
  }
  if (StringUtils.isEmpty(password)) {
    out.append("<div class=\"errorMsg\">").append("You must enter a password").append("</div>");
    countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
    return;
  }
  try {
    securityContext.doLogin(username,password);
  }
 catch (  AuthenticationException aex) {
    out.append("<div class=\"errorMsg\">").append(aex.getMessage()).append("</div>");
    countLoginFailure(out,session,maxRetries,delayThreshold,delayTime);
    return;
  }
  session.removeAttribute(WebNode.Key.sessionBlocked.name());
  session.removeAttribute(NUMBER_OF_LOGIN_ATTEMPTS);
  out.append("<div class=\"okMsg\">").append("Login successful. Welcome ").append(securityContext.getUser().getRealName()).append("!").append("</div>");
}
