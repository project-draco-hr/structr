{
  AbstractNode menuItemNode=currentMenuNode;
  if (currentDepth > maxDepth) {
    return;
  }
  currentDepth++;
  List<AbstractNode> menuItems=new LinkedList<AbstractNode>();
  List<AbstractNode> allMenuItems=menuItemNode.getSortedMenuItems();
  for (  AbstractNode n : allMenuItems) {
    if (n.isVisible()) {
      menuItems.add(n);
    }
  }
  String cssClass="";
  if (menuItemNode != currentNode) {
    if (currentPos == 0) {
      cssClass=" first";
      out.append("<ul>");
    }
    if (currentPos == numberOfSubnodes - 1) {
      cssClass=" last";
    }
    if (menuItemNode instanceof MenuItem) {
      Page linkedPage=((MenuItem)menuItemNode).getLinkedPage();
      if (linkedPage != null) {
        menuItemNode=linkedPage;
      }
    }
    if (menuItemNode.equals(startNode)) {
      cssClass+=" current";
    }
    if (menuItemNode.isVisible()) {
      String relativeNodePath=menuItemNode.getNodePath(startNode).replace("&","%26");
      if (!(cssClass.isEmpty())) {
        cssClass=" class=\"" + cssClass + "\"";
      }
      out.append("<li").append(cssClass).append(">");
      out.append("<span><a href=\"").append(relativeNodePath).append("\">");
      out.append(currentMenuNode.getTitleOrName());
      out.append("</a></span>");
    }
  }
  if (currentMenuNode.isVisible()) {
    int sub=menuItems.size();
    int pos=0;
    for (    AbstractNode s : menuItems) {
      renderMenuItems(out,currentNode,startNode,s,currentDepth,pos,sub,maxDepth);
      pos++;
    }
    if (currentMenuNode != currentNode) {
      out.append("</li>");
      if (currentPos == numberOfSubnodes - 1) {
        cssClass=" last";
      }
    }
  }
  if (currentMenuNode != currentNode) {
    if (currentPos == numberOfSubnodes - 1) {
      out.append("</ul>");
    }
  }
}
