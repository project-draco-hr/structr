{
  super.onInit();
  page=(Page)node;
  if (page == null) {
    return;
  }
  final Template templateNode=page.getTemplate();
  templateSelect.setDataProvider(new DataProvider(){
    @Override public List<Option> getData(){
      List<Option> options=new LinkedList<Option>();
      List<AbstractNode> nodes=null;
      if (templateNode != null) {
        nodes=templateNode.getSiblingNodes();
      }
 else {
        List<TextualSearchAttribute> searchAttrs=new LinkedList<TextualSearchAttribute>();
        searchAttrs.add(new TextualSearchAttribute(AbstractNode.TYPE_KEY,Template.class.getSimpleName(),SearchOperator.OR));
        nodes=(List<AbstractNode>)Services.command(SearchNodeCommand.class).execute(user,null,false,false,searchAttrs);
      }
      if (nodes != null) {
        Collections.sort(nodes);
        options.add(Option.EMPTY_OPTION);
        for (        AbstractNode n : nodes) {
          if (n instanceof Template) {
            Option opt=new Option(n.getId(),n.getName());
            options.add(opt);
          }
        }
      }
      return options;
    }
  }
);
  externalViewUrl=node.getNodeURL(contextPath);
  localViewUrl=getContext().getRequest().getContextPath().concat("/view".concat(node.getNodePath().replace("&","%26")));
  StringBuilder out=new StringBuilder();
  node.renderView(out,node,null,null);
  rendition=out.toString();
  source=ClickUtils.escapeHtml(rendition);
  renditionPanel=new Panel("renditionPanel","/panel/rendition-panel.htm");
}
