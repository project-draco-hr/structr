{
  JsonObject result=new JsonObject();
  List<? extends GraphObject> results=src.getResults();
  Integer page=src.getPage();
  Integer pageCount=src.getPageCount();
  Integer pageSize=src.getPageSize();
  String queryTime=src.getQueryTime();
  Integer resultCount=src.getResultCount();
  String searchString=src.getSearchString();
  String sortKey=src.getSortKey();
  String sortOrder=src.getSortOrder();
  if (page != null) {
    result.add("page",new JsonPrimitive(page));
  }
  if (pageCount != null) {
    result.add("pageCount",new JsonPrimitive(pageCount));
  }
  if (pageSize != null) {
    result.add("pageSize",new JsonPrimitive(pageSize));
  }
  if (queryTime != null) {
    result.add("queryTime",new JsonPrimitive(queryTime));
  }
  if (resultCount != null) {
    result.add("resultCount",new JsonPrimitive(resultCount));
  }
  if (results != null && !results.isEmpty()) {
    if (results.size() > 1 && !src.isCollectionResource()) {
      throw new IllegalStateException(src.getClass().getSimpleName() + " is not a collection resource, but result set has size " + results.size());
    }
    if (src.isCollectionResource()) {
      JsonArray resultArray=new JsonArray();
      for (      GraphObject graphObject : results) {
        resultArray.add(graphObjectGsonAdapter.serialize(graphObject,GraphObject.class,context));
      }
      result.add("result",resultArray);
    }
 else {
      result.add("result",graphObjectGsonAdapter.serialize(results.get(0),GraphObject.class,context));
    }
  }
  if (searchString != null) {
    result.add("searchString",new JsonPrimitive(searchString));
  }
  if (sortKey != null) {
    result.add("sortKey",new JsonPrimitive(sortKey));
  }
  if (sortOrder != null) {
    result.add("sortOrder",new JsonPrimitive(sortOrder));
  }
  return result;
}
