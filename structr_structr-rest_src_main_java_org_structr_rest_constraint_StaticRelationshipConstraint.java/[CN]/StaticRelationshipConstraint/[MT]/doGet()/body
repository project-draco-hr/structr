{
  List<GraphObject> results=typedIdConstraint.doGet();
  if (results != null) {
    AbstractNode sourceNode=typedIdConstraint.getTypesafeNode();
    if (sourceNode != null) {
      DirectedRelationship staticRel=findDirectedRelationship(typedIdConstraint,typeConstraint);
      if (staticRel != null) {
        List<AbstractNode> relatedNodes=staticRel.getRelatedNodes(securityContext,sourceNode);
        if (!relatedNodes.isEmpty()) {
          return relatedNodes;
        }
      }
      String rawType=typeConstraint.getRawType();
      Object value=sourceNode.getProperty(rawType);
      StringBuilder msgBuilder=new StringBuilder();
      msgBuilder.append("Property result on type ");
      msgBuilder.append(sourceNode.getClass().getSimpleName());
      msgBuilder.append(", key ");
      msgBuilder.append(rawType);
      msgBuilder.append(" is not an Iterable<GraphObject>!");
      String msg=msgBuilder.toString();
      if (value != null && value instanceof Iterable) {
        List<GraphObject> propertyListResult=new LinkedList<GraphObject>();
        Iterable sourceIterable=(Iterable)value;
        for (        Object o : sourceIterable) {
          if (o instanceof GraphObject) {
            propertyListResult.add((GraphObject)o);
          }
 else {
            throw new SystemException(msg);
          }
        }
        return propertyListResult;
      }
 else {
        logger.log(Level.SEVERE,msg);
        throw new SystemException(msg);
      }
    }
  }
  throw new IllegalPathException();
}
