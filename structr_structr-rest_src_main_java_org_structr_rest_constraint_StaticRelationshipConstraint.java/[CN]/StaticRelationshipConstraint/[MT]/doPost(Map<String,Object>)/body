{
  StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      AbstractNode sourceNode=typedIdConstraint.getIdConstraint().getNode();
      AbstractNode newNode=typeConstraint.createNode(propertySet);
      DirectedRelationship rel=EntityContext.getDirectedRelationship(sourceNode.getClass(),newNode.getClass());
      if ((sourceNode != null) && (newNode != null) && (rel != null)) {
        rel.createRelationship(securityContext,sourceNode,newNode);
        return newNode;
      }
 else {
        logger.log(Level.WARNING,"Unable to create nested node, source node type {0}, new node type {1}, relationship type {2}",new Object[]{sourceNode != null ? sourceNode.getType() : "null",newNode != null ? newNode.getType() : "null",rel != null ? rel.getRelType() : "null"});
      }
      throw new IllegalPathException();
    }
  }
;
  AbstractNode newNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
  RestMethodResult result=new RestMethodResult(HttpServletResponse.SC_CREATED);
  if (newNode != null) {
    result.addHeader("Location",buildLocationHeader(newNode));
  }
  return result;
}
