{
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  AbstractNode topNode=null;
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  if (rawType != null) {
    searchAttributes.add(Search.andExactTypeAndSubtypes(EntityContext.normalizeEntityName(rawType)));
    hasSearchableAttributes(searchAttributes);
    if (sortKey == null) {
      try {
        GraphObject templateEntity=((GraphObject)entityClass.newInstance());
        PropertyKey sortKeyProperty=templateEntity.getDefaultSortKey();
        sortDescending=GraphObjectComparator.DESCENDING.equals(templateEntity.getDefaultSortOrder());
        if (sortKeyProperty != null) {
          sortKey=sortKeyProperty.name();
        }
      }
 catch (      Throwable t) {
        sortKey="name";
      }
    }
    Result results=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(topNode,includeDeletedAndHidden,publicOnly,searchAttributes,sortKey,sortDescending,pageSize,page);
    applyDefaultSorting(results.getResults());
    return results;
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  List emptyList=Collections.emptyList();
  return new Result(emptyList,null,isCollectionResource(),isPrimitiveArray());
}
