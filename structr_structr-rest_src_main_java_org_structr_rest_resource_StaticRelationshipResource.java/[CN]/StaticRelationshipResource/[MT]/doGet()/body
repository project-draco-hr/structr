{
  List<? extends GraphObject> results=typedIdResource.doGet();
  if (results != null) {
    AbstractNode sourceNode=typedIdResource.getTypesafeNode();
    if (sourceNode != null) {
      DirectedRelation staticRel=findDirectedRelationship(typedIdResource,typeResource);
      if (staticRel != null) {
        List relatedNodes=staticRel.getRelatedNodes(securityContext,sourceNode);
        List<SearchAttribute> dummyList=new LinkedList<SearchAttribute>();
        if (typeResource.hasSearchableAttributes(dummyList)) {
          List<GraphObject> typeNodes=typeResource.doGet();
          List intersection=ListUtils.intersection(relatedNodes,typeNodes);
          applyDefaultSorting(intersection);
          return intersection;
        }
        if (!relatedNodes.isEmpty()) {
          applyDefaultSorting(relatedNodes);
          return relatedNodes;
        }
      }
      Class type=sourceNode.getClass();
      String key=typeResource.getRawType();
      PropertyConverter converter=EntityContext.getPropertyConverter(securityContext,type,key);
      if (converter != null) {
        Value conversionValue=EntityContext.getPropertyConversionParameter(type,key);
        converter.setCurrentObject(sourceNode);
        converter.setRawMode(true);
        Object value=converter.convertForGetter(null,conversionValue);
        StringBuilder msgBuilder=new StringBuilder();
        msgBuilder.append("Property result on type ");
        msgBuilder.append(sourceNode.getClass().getSimpleName());
        msgBuilder.append(", key ");
        msgBuilder.append(key);
        msgBuilder.append(" is not an Iterable<GraphObject>!");
        String msg=msgBuilder.toString();
        if (value != null) {
          if ((value instanceof List) && !((List)value).isEmpty() && ((List)value).get(0) instanceof GraphObject) {
            List<GraphObject> list=(List<GraphObject>)value;
            applyDefaultSorting(list);
            return list;
          }
 else           if (value instanceof Iterable) {
            List<GraphObject> propertyListResult=new LinkedList<GraphObject>();
            Iterable sourceIterable=(Iterable)value;
            for (            Object o : sourceIterable) {
              if (o instanceof GraphObject) {
                propertyListResult.add((GraphObject)o);
              }
 else {
                throw new SystemException(msg);
              }
            }
            return propertyListResult;
          }
        }
 else {
          logger.log(Level.SEVERE,msg);
          throw new SystemException(msg);
        }
      }
    }
  }
  return Collections.emptyList();
}
