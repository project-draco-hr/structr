{
  final StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      final AbstractNode sourceNode=typedIdResource.getIdResource().getNode();
      final RelationClass rel=EntityContext.getRelationClass(sourceNode.getClass(),typeResource.getEntityClass());
      if (sourceNode != null && rel != null) {
        Class sourceNodeType=sourceNode.getClass();
        if (EntityContext.isReadOnlyProperty(sourceNodeType,EntityContext.getPropertyKeyForName(sourceNodeType,typeResource.getRawType()))) {
          logger.log(Level.INFO,"Read-only property on {0}: {1}",new Object[]{sourceNodeType,typeResource.getRawType()});
          return null;
        }
        final Notion notion=rel.getNotion();
        final PropertyKey primaryPropertyKey=notion.getPrimaryPropertyKey();
        if (primaryPropertyKey != null && propertySet.containsKey(primaryPropertyKey.jsonName()) && propertySet.size() == 1) {
          final Adapter<Object,GraphObject> deserializationStrategy=notion.getAdapterForSetter(securityContext);
          final Object keySource=propertySet.get(primaryPropertyKey.jsonName());
          if (keySource != null) {
            GraphObject otherNode=null;
            if (keySource instanceof Collection) {
              final Collection collection=(Collection)keySource;
              for (              final Object key : collection) {
                otherNode=deserializationStrategy.adapt(key);
                if (otherNode != null && otherNode instanceof AbstractNode) {
                  rel.createRelationship(securityContext,sourceNode,(AbstractNode)otherNode);
                }
 else {
                  logger.log(Level.WARNING,"Relationship end node has invalid type {0}",otherNode.getClass().getName());
                }
              }
            }
 else {
              otherNode=deserializationStrategy.adapt(keySource);
              if (otherNode != null && otherNode instanceof AbstractNode) {
                rel.createRelationship(securityContext,sourceNode,(AbstractNode)otherNode);
              }
 else {
                logger.log(Level.WARNING,"Relationship end node has invalid type {0}",otherNode.getClass().getName());
              }
            }
            return otherNode;
          }
 else {
            logger.log(Level.INFO,"Key {0} not found in {1}",new Object[]{primaryPropertyKey.jsonName(),propertySet.toString()});
          }
          return null;
        }
 else {
          final AbstractNode otherNode=typeResource.createNode(propertySet);
          if (otherNode != null) {
            rel.createRelationship(securityContext,sourceNode,otherNode);
            return otherNode;
          }
        }
      }
      throw new IllegalPathException();
    }
  }
;
  final AbstractNode newNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
  RestMethodResult result;
  if (newNode != null) {
    result=new RestMethodResult(HttpServletResponse.SC_CREATED);
    result.addHeader("Location",buildLocationHeader(newNode));
  }
 else {
    result=new RestMethodResult(HttpServletResponse.SC_FORBIDDEN);
  }
  return result;
}
