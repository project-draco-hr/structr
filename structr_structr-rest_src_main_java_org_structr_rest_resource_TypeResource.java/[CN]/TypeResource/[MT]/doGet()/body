{
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  AbstractNode topNode=null;
  boolean includeDeleted=false;
  boolean publicOnly=false;
  if (rawType != null) {
    Map cachedEntities=(Map<String,Class>)Services.command(securityContext,GetEntitiesCommand.class).execute();
    if (!cachedEntities.containsKey(EntityContext.normalizeEntityName(rawType))) {
      throw new NotFoundException();
    }
    searchAttributes.add(Search.andExactType(EntityContext.normalizeEntityName(rawType)));
    hasSearchableAttributes(searchAttributes);
    List<GraphObject> results=(List<GraphObject>)Services.command(securityContext,SearchNodeCommand.class).execute(topNode,includeDeleted,publicOnly,searchAttributes);
    if (!results.isEmpty()) {
      applyDefaultSorting(results);
      return results;
    }
  }
 else {
    logger.log(Level.WARNING,"type was null");
  }
  return Collections.emptyList();
}
