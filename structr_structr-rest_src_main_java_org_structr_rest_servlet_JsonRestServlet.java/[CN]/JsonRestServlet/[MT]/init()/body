{
  this.constraintMap=new LinkedHashMap<Pattern,Class>();
  this.propertyView=new ThreadLocalPropertyView();
  String externalProviderName=this.getInitParameter(SERVLET_PARAMETER_CONSTRAINT_PROVIDER);
  if (externalProviderName != null) {
    String[] parts=externalProviderName.split("[, ]+");
    for (    String part : parts) {
      try {
        logger.log(Level.INFO,"Injecting constraints from provider {0}",part);
        Class providerClass=Class.forName(part);
        ResourceConstraintProvider provider=(ResourceConstraintProvider)providerClass.newInstance();
        constraintMap.putAll(provider.getConstraints());
      }
 catch (      Throwable t) {
        logger.log(Level.WARNING,"Unable to inject external resource constraints",t);
      }
    }
  }
  String defaultPropertyViewName=this.getInitParameter(SERVLET_PARAMETER_DEFAULT_PROPERTY_VIEW);
  if (defaultPropertyViewName != null) {
    logger.log(Level.INFO,"Setting default property view to {0}",defaultPropertyViewName);
    this.defaultPropertyView=defaultPropertyViewName;
  }
  String defaultIdPropertyName=this.getInitParameter(SERVLET_PARAMETER_ID_PROPERTY);
  if (defaultIdPropertyName != null) {
    logger.log(Level.INFO,"Setting default id property to {0}",defaultIdPropertyName);
    this.defaultIdProperty=defaultIdPropertyName;
  }
  PropertyFormat propertyFormat=initializePropertyFormat();
  this.resultGsonAdapter=new ResultGSONAdapter(propertyFormat,propertyView,defaultIdProperty);
  this.propertySetAdapter=new PropertySetGSONAdapter(propertyFormat,defaultIdProperty);
  this.gson=new GsonBuilder().setPrettyPrinting().serializeNulls().registerTypeHierarchyAdapter(FrameworkException.class,new FrameworkExceptionGSONAdapter()).registerTypeAdapter(PropertySet.class,propertySetAdapter).registerTypeAdapter(Result.class,resultGsonAdapter).create();
  String requestLoggingParameter=this.getInitParameter(SERVLET_PARAMETER_REQUEST_LOGGING);
  if (requestLoggingParameter != null && "true".equalsIgnoreCase(requestLoggingParameter)) {
    String logFileName=Services.getBasePath().concat("/logs/access.log");
    try {
      File logFile=new File(logFileName);
      logFile.getParentFile().mkdir();
      logWriter=new FileWriter(logFileName);
    }
 catch (    IOException ioex) {
      logger.log(Level.WARNING,"Could not open access log file {0}: {1}",new Object[]{logFileName,ioex.getMessage()});
    }
  }
}
