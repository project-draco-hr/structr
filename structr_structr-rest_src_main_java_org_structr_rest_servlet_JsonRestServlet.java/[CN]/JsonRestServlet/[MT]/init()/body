{
  this.resourceMap=new LinkedHashMap<Pattern,Class>();
  this.propertyView=new ThreadLocalPropertyView();
  for (  RelationshipMapping relMapping : EntityContext.getNamedRelations()) {
    resourceMap.put(Pattern.compile(relMapping.getName()),NamedRelationResource.class);
  }
  String externalProviderName=this.getInitParameter(SERVLET_PARAMETER_RESOURCE_PROVIDER);
  if (externalProviderName != null) {
    String[] parts=externalProviderName.split("[, ]+");
    for (    String part : parts) {
      try {
        logger.log(Level.INFO,"Injecting resources from provider {0}",part);
        Class providerClass=Class.forName(part);
        ResourceProvider provider=(ResourceProvider)providerClass.newInstance();
        resourceMap.putAll(provider.getResources());
      }
 catch (      Throwable t) {
        logger.log(Level.WARNING,"Unable to inject external resources",t);
      }
    }
  }
  String defaultPropertyViewName=this.getInitParameter(SERVLET_PARAMETER_DEFAULT_PROPERTY_VIEW);
  if (defaultPropertyViewName != null) {
    logger.log(Level.FINE,"Setting default property view to {0}",defaultPropertyViewName);
    this.defaultPropertyView=defaultPropertyViewName;
  }
  String defaultIdPropertyName=this.getInitParameter(SERVLET_PARAMETER_ID_PROPERTY);
  if (defaultIdPropertyName != null) {
    logger.log(Level.FINE,"Setting default id property to {0}",defaultIdPropertyName);
    this.defaultIdProperty=defaultIdPropertyName;
  }
  PropertyFormat propertyFormat=initializePropertyFormat();
  this.resultGsonAdapter=new ResultGSONAdapter(propertyFormat,propertyView,defaultIdProperty);
  this.propertySetAdapter=new PropertySetGSONAdapter(propertyFormat,propertyView,defaultIdProperty);
  this.gson=new GsonBuilder().setPrettyPrinting().serializeNulls().registerTypeHierarchyAdapter(FrameworkException.class,new FrameworkExceptionGSONAdapter()).registerTypeAdapter(PropertySet.class,propertySetAdapter).registerTypeAdapter(Result.class,resultGsonAdapter).create();
}
