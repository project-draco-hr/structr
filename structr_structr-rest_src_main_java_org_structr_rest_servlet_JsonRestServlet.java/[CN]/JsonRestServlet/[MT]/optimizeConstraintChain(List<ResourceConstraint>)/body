{
  ViewFilterConstraint view=null;
  int num=constraintChain.size();
  boolean found=false;
  int iterations=0;
  do {
    StringBuilder chain=new StringBuilder();
    for (Iterator<ResourceConstraint> it=constraintChain.iterator(); it.hasNext(); ) {
      ResourceConstraint constr=it.next();
      chain.append(constr.getClass().getSimpleName());
      chain.append(", ");
      if (constr instanceof ViewFilterConstraint) {
        view=(ViewFilterConstraint)constr;
        it.remove();
      }
    }
    logger.log(Level.INFO,"########## Constraint chain after iteration {0}: {1}",new Object[]{iterations,chain.toString()});
    found=false;
    try {
      for (int i=0; i < num; i++) {
        ResourceConstraint firstElement=constraintChain.get(i);
        ResourceConstraint secondElement=constraintChain.get(i + 1);
        ResourceConstraint combinedConstraint=firstElement.tryCombineWith(secondElement);
        if (combinedConstraint != null) {
          logger.log(Level.INFO,"Combined constraint {0}",combinedConstraint.getClass().getSimpleName());
          constraintChain.remove(firstElement);
          constraintChain.remove(secondElement);
          constraintChain.add(i,combinedConstraint);
          found=true;
          if (combinedConstraint instanceof RelationshipFollowingConstraint) {
            break;
          }
        }
      }
    }
 catch (    Throwable t) {
    }
    iterations++;
  }
 while (found);
  StringBuilder chain=new StringBuilder();
  for (  ResourceConstraint constr : constraintChain) {
    chain.append(constr.getClass().getSimpleName());
    chain.append(", ");
  }
  logger.log(Level.INFO,"Final constraint chain {0}",chain.toString());
  if (constraintChain.size() == 1) {
    ResourceConstraint finalConstraint=constraintChain.get(0);
    if (view != null) {
      finalConstraint=finalConstraint.tryCombineWith(view);
    }
    finalConstraint.configureIdProperty(defaultIdProperty);
    return finalConstraint;
  }
  throw new IllegalPathException();
}
