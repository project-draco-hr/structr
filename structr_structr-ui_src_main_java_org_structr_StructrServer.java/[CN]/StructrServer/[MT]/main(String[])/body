{
  String appName="structr UI 0.5";
  String host=System.getProperty("host","0.0.0.0");
  String keyStorePath=System.getProperty("keyStorePath","keystore.jks");
  String keyStorePasswd=System.getProperty("keyStorePasswd","structrKeystore");
  int httpPort=Integer.parseInt(System.getProperty("port","8082"));
  int httpsPort=Integer.parseInt(System.getProperty("httpsPort","-1"));
  int maxIdleTime=Integer.parseInt(System.getProperty("maxIdleTime","30000"));
  int requestHeaderSize=Integer.parseInt(System.getProperty("requestHeaderSize","8192"));
  String contextPath=System.getProperty("contextPath","/");
  System.out.println();
  System.out.println("Starting " + appName + " (host="+ host+ ":"+ httpPort+ ", maxIdleTime="+ maxIdleTime+ ", requestHeaderSize="+ requestHeaderSize+ ")");
  System.out.println();
  Server server=new Server(httpPort);
  HandlerCollection handlers=new HandlerCollection();
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  SslSelectChannelConnector httpsConnector=null;
  if (httpsPort > -1 && keyStorePasswd != null) {
    SslContextFactory factory=new SslContextFactory(keyStorePath);
    factory.setKeyStorePassword(keyStorePasswd);
    httpsConnector=new SslSelectChannelConnector(factory);
    httpsConnector.setHost(host);
    httpsConnector.setPort(httpsPort);
    httpsConnector.setMaxIdleTime(maxIdleTime);
    httpsConnector.setRequestHeaderSize(requestHeaderSize);
  }
  SelectChannelConnector httpConnector=new SelectChannelConnector();
  httpConnector.setHost(host);
  httpConnector.setPort(httpPort);
  httpConnector.setMaxIdleTime(maxIdleTime);
  httpConnector.setRequestHeaderSize(requestHeaderSize);
  String basePath=System.getProperty("home","");
  File baseDir=new File(basePath);
  basePath=baseDir.getAbsolutePath();
  System.out.println("Starting in directory " + basePath);
  String modulesPath=basePath + "/modules";
  File modulesDir=new File(modulesPath);
  if (!modulesDir.exists()) {
    modulesDir.mkdir();
  }
  modulesPath=modulesDir.getAbsolutePath();
  File modulesConfFile=new File(modulesPath + "/modules.conf");
  String warPath=StructrServer.class.getProtectionDomain().getCodeSource().getLocation().getPath();
  List<String> modulesConf=new LinkedList<String>();
  if (!(warPath.endsWith(".war"))) {
    File warFile=new File(warPath + "..");
    warPath=warFile.getAbsolutePath() + "/structr-ui.war";
  }
  WebAppContext webapp=new WebAppContext();
  webapp.setDescriptor(webapp + "/WEB-INF/web.xml");
  webapp.setTempDirectory(baseDir);
  webapp.setWar(warPath);
  System.out.println("Using WAR file " + warPath);
  webapp.addFilter(UrlRewriteFilter.class,"/*",EnumSet.of(DispatcherType.REQUEST,DispatcherType.FORWARD));
  FilterHolder gzipFilter=webapp.addFilter(GzipFilter.class,"/*",EnumSet.of(DispatcherType.REQUEST,DispatcherType.FORWARD));
  gzipFilter.setInitParameter("mimeTypes","text/html,text/plain,text/css,text/javascript");
  String directoryName=warPath.substring(0,(warPath.length() - 4));
  File directoryWhichMustNotExist=new File(directoryName);
  if (directoryWhichMustNotExist.exists()) {
    System.err.println("Directory " + directoryWhichMustNotExist + " must not exist.");
    directoryWhichMustNotExist.delete();
    System.err.println("Deleted " + directoryWhichMustNotExist);
  }
  ZipFile war=new ZipFile(new File(warPath));
  Enumeration<ZipArchiveEntry> entries=war.getEntries();
  while (entries.hasMoreElements()) {
    ZipArchiveEntry entry=entries.nextElement();
    String name=entry.getName().substring(entry.getName().lastIndexOf("/") + 1);
    if (name.startsWith("structr") && name.endsWith(".jar")) {
      System.out.println("Found module " + name);
      modulesConf.add(name + "=active");
    }
  }
  war.close();
  if (!modulesConfFile.exists()) {
    modulesConfFile.createNewFile();
  }
 else {
    modulesConfFile.delete();
  }
  FileUtils.writeLines(modulesConfFile,"UTF-8",modulesConf);
  String confPath=basePath + "/structr.conf";
  File confFile=new File(confPath);
  if (!confFile.exists()) {
    List<String> config=new LinkedList<String>();
    config.add("##################################");
    config.add("# structr global config file     #");
    config.add("##################################");
    config.add("# local title of running structr application");
    config.add("application.title = structr UI (" + host + ")");
    config.add("# base directory");
    config.add("base.path = " + basePath);
    config.add("# temp files directory");
    config.add("tmp.path = /tmp");
    config.add("# database files directory");
    config.add("database.path = " + basePath + "/db");
    config.add("# binary files directory");
    config.add("files.path = " + basePath + "/files");
    config.add("# modules directory");
    config.add("modules.path = " + basePath + "/modules");
    config.add("smtp.host = localhost");
    config.add("smtp.port = 25");
    config.add("superuser.username = superadmin");
    config.add("superuser.password = " + RandomStringUtils.randomAlphanumeric(12));
    config.add("configured.services = ModuleService NodeService AgentService");
    confFile.createNewFile();
    FileUtils.writeLines(confFile,"UTF-8",config);
  }
  webapp.setInitParameter("configfile.path",confFile.getAbsolutePath());
  webapp.setContextPath(contextPath);
  webapp.setParentLoaderPriority(true);
  JsonRestServlet structrRestServlet=new JsonRestServlet();
  ServletHolder holder=new ServletHolder(structrRestServlet);
  Map<String,String> initParams=new HashMap<String,String>();
  initParams.put("RequestLogging","true");
  initParams.put("PropertyFormat","FlatNameValue");
  initParams.put("ResourceProvider","org.structr.web.common.UiResourceProvider");
  initParams.put("Authenticator","org.structr.web.auth.UiAuthenticator");
  initParams.put("IdProperty","uuid");
  holder.setInitParameters(initParams);
  holder.setInitOrder(2);
  webapp.addServlet(holder,REST_URL + "/*");
  HtmlServlet htmlServlet=new HtmlServlet();
  ServletHolder htmlServletHolder=new ServletHolder(htmlServlet);
  Map<String,String> htmlInitParams=new HashMap<String,String>();
  htmlInitParams.put("Authenticator","org.structr.web.auth.HttpAuthenticator");
  htmlInitParams.put("IdProperty","uuid");
  htmlServletHolder.setInitParameters(htmlInitParams);
  htmlServletHolder.setInitOrder(3);
  webapp.addServlet(htmlServletHolder,"/structr/html/*");
  WebSocketServlet wsServlet=new WebSocketServlet();
  ServletHolder wsServletHolder=new ServletHolder(wsServlet);
  Map<String,String> wsInitParams=new HashMap<String,String>();
  wsInitParams.put("Authenticator","org.structr.web.auth.UiAuthenticator");
  wsInitParams.put("IdProperty","uuid");
  wsServletHolder.setInitParameters(wsInitParams);
  wsServletHolder.setInitOrder(4);
  webapp.addServlet(wsServletHolder,"/structr/ws/*");
  webapp.addEventListener(new ApplicationContextListener());
  RequestLogHandler requestLogHandler=new RequestLogHandler();
  String logPath=basePath + "/logs";
  File logDir=new File(logPath);
  if (!logDir.exists()) {
    logDir.mkdir();
  }
  logPath=logDir.getAbsolutePath();
  NCSARequestLog requestLog=new NCSARequestLog(logPath + "/structr-yyyy_mm_dd.request.log");
  requestLog.setRetainDays(90);
  requestLog.setAppend(true);
  requestLog.setExtended(false);
  requestLog.setLogTimeZone("GMT");
  requestLogHandler.setRequestLog(requestLog);
  contexts.setHandlers(new Handler[]{webapp,requestLogHandler});
  handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
  server.setHandler(handlers);
  if (httpsConnector != null) {
    server.setConnectors(new Connector[]{httpConnector,httpsConnector});
  }
 else {
    server.setConnectors(new Connector[]{httpConnector});
  }
  server.setGracefulShutdown(1000);
  server.setStopAtShutdown(true);
  System.out.println();
  System.out.println("structr UI:        http://" + host + ":"+ httpPort+ contextPath+ "structr/");
  System.out.println();
  server.start();
  removeDir(basePath,"jsp");
  server.join();
  System.out.println(appName + " stopped.");
}
