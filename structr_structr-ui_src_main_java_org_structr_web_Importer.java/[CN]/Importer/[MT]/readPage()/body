{
  final URL baseUrl;
  try {
    baseUrl=new URL(address);
    AbstractNode res=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
        attrs.add(new NodeAttribute(AbstractNode.type,Page.class.getSimpleName()));
        attrs.add(new NodeAttribute(AbstractNode.name,name));
        attrs.add(new NodeAttribute(AbstractNode.visibleToPublicUsers,publicVisible));
        attrs.add(new NodeAttribute(AbstractNode.visibleToAuthenticatedUsers,authVisible));
        AbstractNode page=findOrCreateNode(attrs,"/");
        createChildNodes(parsedDocument,page,page.getProperty(AbstractNode.uuid),baseUrl);
        return page;
      }
    }
);
    if (res != null) {
      logger.log(Level.INFO,"##### Finished fetching {0} for page {1} #####",new Object[]{address,name});
      return res.getProperty(AbstractNode.uuid);
    }
  }
 catch (  MalformedURLException ex) {
    logger.log(Level.SEVERE,"Could not resolve address " + address,ex);
  }
  return null;
}
