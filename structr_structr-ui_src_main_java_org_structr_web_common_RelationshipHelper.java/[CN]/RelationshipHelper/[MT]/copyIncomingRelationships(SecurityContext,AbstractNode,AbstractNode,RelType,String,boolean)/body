{
  if (cloneNode == null) {
    return;
  }
  Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
  for (  AbstractRelationship in : origNode.getIncomingRelationships()) {
    AbstractNode startNode=in.getStartNode();
    if (startNode == null) {
      continue;
    }
    RelationshipType origRelType=in.getRelType();
    if (!(relType.name().equals(origRelType.name()))) {
      continue;
    }
    Map<String,Object> props=in.getProperties();
    props.remove(AbstractRelationship.Key.uuid.name());
    props.remove(AbstractRelationship.HiddenKey.createdDate.name());
    props.put(AbstractRelationship.HiddenKey.combinedType.name(),EntityContext.createCombinedRelationshipType(in.getStringProperty(AbstractRelationship.HiddenKey.combinedType),cloneNode.getClass()));
    AbstractRelationship newInRel=(AbstractRelationship)createRel.execute(startNode,cloneNode,relType,props,false);
    if ((componentId != null) && !(cloneNode.getStringProperty(AbstractNode.Key.uuid).equals(componentId))) {
      newInRel.setProperty(Component.Key.componentId,componentId);
    }
    setPositions(cloneNode,newInRel,increasePosition);
  }
}
