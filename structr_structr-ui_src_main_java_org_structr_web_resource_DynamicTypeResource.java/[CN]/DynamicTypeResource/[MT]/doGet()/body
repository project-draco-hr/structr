{
  List<GraphObject> uuidResults=null;
  if (uuidResource != null) {
    uuidResults=(List<GraphObject>)uuidResource.doGet();
  }
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  AbstractNode topNode=null;
  boolean includeDeleted=false;
  boolean publicOnly=false;
  if (rawType != null) {
    searchAttributes.add(Search.andExactProperty(Component.UiKey.structrclass.name(),EntityContext.normalizeEntityName(rawType)));
    searchAttributes.add(Search.andExactType(Component.class.getSimpleName()));
    hasSearchableAttributes(rawType,request,searchAttributes);
    List<GraphObject> results=(List<GraphObject>)Services.command(securityContext,SearchNodeCommand.class).execute(topNode,includeDeleted,publicOnly,searchAttributes);
    if (!results.isEmpty()) {
      if (uuidResults != null) {
        results=ListUtils.intersection(results,uuidResults);
      }
      for (      DynamicTypeResource res : nestedResources) {
        if (res.doGet().isEmpty()) {
          throw new NotFoundException();
        }
      }
      return results;
    }
  }
  parentResults=true;
  return super.doGet();
}
