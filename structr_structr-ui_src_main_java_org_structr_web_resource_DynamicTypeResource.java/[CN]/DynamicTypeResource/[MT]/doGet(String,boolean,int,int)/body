{
  List<GraphObject> uuidResults=null;
  if (uuidResource != null) {
    uuidResource.setSecurityContext(this.securityContext);
    uuidResults=(List<GraphObject>)uuidResource.doGet(sortKey,sortDescending,pageSize,page).getResults();
  }
  List<SearchAttribute> searchAttributes=getSearchAttributes(rawType);
  hasSearchableAttributesForNodes(rawType,request,searchAttributes);
  List<GraphObject> results=getComponents(securityContext,searchAttributes);
  if (!results.isEmpty()) {
    if (uuidResults != null) {
      results=ListUtils.intersection(results,uuidResults);
    }
    for (    DynamicTypeResource res : nestedResources) {
      if (res.doGet(sortKey,sortDescending,pageSize,page).getResults().isEmpty()) {
        throw new NotFoundException();
      }
    }
    return new Result(results,isCollectionResource(),isPrimitiveArray());
  }
  parentResults=true;
  return super.doGet(sortKey,sortDescending,pageSize,page);
}
