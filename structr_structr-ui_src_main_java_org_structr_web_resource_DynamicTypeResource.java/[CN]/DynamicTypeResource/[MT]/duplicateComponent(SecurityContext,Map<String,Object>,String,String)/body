{
  final List<GraphObject> templates=getComponents(SecurityContext.getSuperUserInstance(),getSearchAttributes(rawType));
  final Command createNodeCommand=Services.command(securityContext,CreateNodeCommand.class);
  final Map<String,Object> templateProperties=new LinkedHashMap<String,Object>();
  final String componentId=UUID.randomUUID().toString().replaceAll("[\\-]+","");
  final Component template=(Component)templates.get(templates.size() - 1);
  templateProperties.put(AbstractNode.type.name(),Component.class.getSimpleName());
  templateProperties.put(Component.kind.name(),template.getStringProperty(Component.kind));
  templateProperties.put(AbstractNode.uuid.name(),componentId);
  templateProperties.put(AbstractNode.visibleToPublicUsers.name(),template.getBooleanProperty(AbstractNode.visibleToPublicUsers));
  templateProperties.put(AbstractNode.visibleToAuthenticatedUsers.name(),template.getBooleanProperty(AbstractNode.visibleToAuthenticatedUsers));
  String parentComponentId=template.getComponentId();
  propertySet.remove("pageId");
  if (surroundingComponentId != null) {
    parentComponentId=surroundingComponentId;
  }
  final String finalParentComponentId=parentComponentId;
  final Component newComponent=(Component)Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      final Component comp=(Component)createNodeCommand.execute(templateProperties);
      RelationshipHelper.copyRelationships(SecurityContext.getSuperUserInstance(),template,comp,RelType.CONTAINS,finalParentComponentId,true);
      final Map<String,Object> contentTemplateProperties=new LinkedHashMap<String,Object>();
      for (      final AbstractNode node : template.getContentNodes().values()) {
        if (node instanceof Content) {
          final Content contentTemplate=(Content)node;
          final String dataKey=contentTemplate.getStringProperty(Content.dataKey);
          contentTemplateProperties.clear();
          contentTemplateProperties.put(AbstractNode.type.name(),Content.class.getSimpleName());
          contentTemplateProperties.put(Content.typeDefinitionId.name(),contentTemplate.getStringProperty(Content.typeDefinitionId));
          contentTemplateProperties.put("data-key",dataKey);
          contentTemplateProperties.put(AbstractNode.visibleToPublicUsers.name(),contentTemplate.getBooleanProperty(AbstractNode.visibleToPublicUsers));
          contentTemplateProperties.put(AbstractNode.visibleToAuthenticatedUsers.name(),contentTemplate.getBooleanProperty(AbstractNode.visibleToAuthenticatedUsers));
          final Content newContent=(Content)createNodeCommand.execute(contentTemplateProperties);
          newContent.setProperty(Content.content,propertySet.get(dataKey));
          propertySet.remove(dataKey);
          RelationshipHelper.copyRelationships(SecurityContext.getSuperUserInstance(),contentTemplate,newContent,RelType.CONTAINS,componentId,false);
        }
      }
      return comp;
    }
  }
);
  if (newComponent != null) {
    propertySet.remove(AbstractNode.createdDate.name());
    propertySet.remove(AbstractNode.lastModifiedDate.name());
    for (    final String keyName : propertySet.keySet()) {
      PropertyKey key=newComponent.getPropertyKeyForName(keyName);
      newComponent.setProperty(key,propertySet.get(keyName));
    }
  }
  return newComponent;
}
