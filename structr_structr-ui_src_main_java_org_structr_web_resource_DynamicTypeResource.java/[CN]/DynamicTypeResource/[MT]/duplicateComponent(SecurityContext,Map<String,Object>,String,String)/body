{
  final List<Component> templates=getComponents(SecurityContext.getSuperUserInstance(),getSearchAttributes(rawType));
  final CreateNodeCommand createNodeCommand=Services.command(securityContext,CreateNodeCommand.class);
  final String componentId=UUID.randomUUID().toString().replaceAll("[\\-]+","");
  final Component template=templates.get(templates.size() - 1);
  final PropertyMap templateProperties=new PropertyMap();
  templateProperties.put(AbstractNode.type,Component.class.getSimpleName());
  templateProperties.put(Component.kind,template.getProperty(Component.kind));
  templateProperties.put(AbstractNode.uuid,componentId);
  templateProperties.put(AbstractNode.visibleToPublicUsers,template.getBooleanProperty(AbstractNode.visibleToPublicUsers));
  templateProperties.put(AbstractNode.visibleToAuthenticatedUsers,template.getBooleanProperty(AbstractNode.visibleToAuthenticatedUsers));
  String parentComponentId=template.getComponentId();
  propertySet.remove("pageId");
  if (surroundingComponentId != null) {
    parentComponentId=surroundingComponentId;
  }
  final String finalParentComponentId=parentComponentId;
  final Component newComponent=(Component)Services.command(securityContext,TransactionCommand.class).execute(new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      final Component comp=(Component)createNodeCommand.execute(templateProperties);
      RelationshipHelper.copyRelationships(SecurityContext.getSuperUserInstance(),template,comp,RelType.CONTAINS,finalParentComponentId,true);
      final PropertyMap contentTemplateProperties=new PropertyMap();
      for (      final AbstractNode node : template.getContentNodes().values()) {
        if (node instanceof Content) {
          final Content contentTemplate=(Content)node;
          final String dataKey=contentTemplate.getProperty(Content.dataKey);
          contentTemplateProperties.clear();
          contentTemplateProperties.put(AbstractNode.type,Content.class.getSimpleName());
          contentTemplateProperties.put(Content.typeDefinitionId,contentTemplate.getProperty(Content.typeDefinitionId));
          contentTemplateProperties.put(Content.dataKey,dataKey);
          contentTemplateProperties.put(AbstractNode.visibleToPublicUsers,contentTemplate.getBooleanProperty(AbstractNode.visibleToPublicUsers));
          contentTemplateProperties.put(AbstractNode.visibleToAuthenticatedUsers,contentTemplate.getBooleanProperty(AbstractNode.visibleToAuthenticatedUsers));
          final Content newContent=(Content)createNodeCommand.execute(contentTemplateProperties);
          Object dataKeyValue=propertySet.get(dataKey);
          if (dataKeyValue != null) {
            newContent.setProperty(Content.content,dataKeyValue.toString());
          }
          propertySet.remove(dataKey);
          RelationshipHelper.copyRelationships(SecurityContext.getSuperUserInstance(),contentTemplate,newContent,RelType.CONTAINS,componentId,false);
        }
      }
      return comp;
    }
  }
);
  if (newComponent != null) {
    propertySet.remove(AbstractNode.createdDate.dbName());
    propertySet.remove(AbstractNode.lastModifiedDate.dbName());
    for (    final String keyName : propertySet.keySet()) {
      PropertyKey key=EntityContext.getPropertyKeyForDatabaseName(Component.class,keyName);
      newComponent.setProperty(key,propertySet.get(keyName));
    }
  }
  return newComponent;
}
