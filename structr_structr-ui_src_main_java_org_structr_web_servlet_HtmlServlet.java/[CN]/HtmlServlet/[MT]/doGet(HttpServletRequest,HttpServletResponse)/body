{
  String path=clean(request.getPathInfo());
  logger.log(Level.INFO,"Path info {0}",path);
  String[] urlParts=getParts(path);
  String searchFor=null;
  if (urlParts.length > 1) {
    searchFor=StringUtils.substringBefore(urlParts[1],"?");
  }
  String name=getName(getParts(path)[0]);
  List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
  Map<String,String[]> parameterMap=request.getParameterMap();
  if ((parameterMap != null) && (parameterMap.size() > 0)) {
    attrs=convertToNodeAttributes(parameterMap);
  }
  edit=false;
  tidy=false;
  if (request.getParameter("edit") != null) {
    edit=true;
  }
  if (request.getParameter("tidy") != null) {
    tidy=true;
  }
  try {
    SecurityContext securityContext=SecurityContext.getInstance(this.getServletConfig(),request,response,AccessMode.Frontend);
    request.setCharacterEncoding("UTF-8");
    DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
    double start=System.nanoTime();
    AbstractNode node=findEntryPoint(name);
    Resource resource=null;
    org.structr.core.entity.File file=null;
    if (node instanceof Resource) {
      resource=(Resource)node;
    }
 else     if (node instanceof org.structr.core.entity.File) {
      file=(org.structr.core.entity.File)node;
    }
    if ((resource != null) && securityContext.isVisible(resource)) {
      String uuid=resource.getStringProperty(Resource.Key.uuid);
      final StringBuilder buffer=new StringBuilder(10000);
      getContent(uuid,null,buffer,resource,0,false,searchFor,attrs);
      String content=buffer.toString();
      double end=System.nanoTime();
      logger.log(Level.INFO,"Content collected in {0} seconds",decimalFormat.format((end - start) / 1000000000.0));
      String contentType=resource.getStringProperty(Resource.UiKey.contentType);
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
        response.getWriter().append("<!DOCTYPE html>\n");
      }
      if (tidy) {
        StringWriter tidyOutput=new StringWriter();
        Tidy tidy=new Tidy();
        Properties tidyProps=new Properties();
        tidyProps.setProperty("indent","auto");
        tidy.getConfiguration().addProps(tidyProps);
        tidy.parse(new StringReader(content),tidyOutput);
        content=tidyOutput.toString();
      }
      HttpAuthenticator.writeContent(content,response);
    }
 else     if ((file != null) && securityContext.isVisible(file)) {
      InputStream in=file.getInputStream();
      OutputStream out=response.getOutputStream();
      String contentType=file.getContentType();
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
      }
      IOUtils.copy(in,out);
      out.flush();
      out.close();
      response.setStatus(HttpServletResponse.SC_OK);
    }
 else {
      if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
        HttpAuthenticator.writeUnauthorized(response);
      }
 else {
        HttpAuthenticator.writeNotFound(response);
      }
    }
  }
 catch (  Throwable t) {
    HttpAuthenticator.writeInternalServerError(response);
  }
}
