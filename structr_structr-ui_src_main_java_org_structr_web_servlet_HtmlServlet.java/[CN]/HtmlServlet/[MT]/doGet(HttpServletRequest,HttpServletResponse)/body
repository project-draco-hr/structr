{
  double start=System.nanoTime();
  try {
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");
    boolean dontCache=false;
    String resp=(String)request.getSession().getAttribute(REST_RESPONSE);
    if (resp != null) {
      request.setAttribute(REST_RESPONSE,resp);
      request.getSession().removeAttribute(REST_RESPONSE);
      dontCache=true;
    }
    String path=PathHelper.clean(request.getPathInfo());
    logger.log(Level.FINE,"Path info {0}",path);
    SecurityContext securityContext=SecurityContext.getInstance(this.getServletConfig(),request,response,AccessMode.Frontend);
    org.structr.core.entity.File file=findFile(request,path);
    Page page=null;
    Component comp=null;
    String searchFor=null;
    if (file == null) {
      String[] urlParts=PathHelper.getParts(path);
      if (urlParts.length > 1) {
        searchFor=StringUtils.substringBefore(urlParts[1],"?");
      }
      if ((urlParts == null) || (urlParts.length == 0)) {
        page=findIndexPage();
        logger.log(Level.INFO,"No path supplied, trying to find index page");
      }
 else {
        page=findPage(request,path);
      }
      Matcher matcher=threadLocalUUIDMatcher.get();
      boolean requestUriContainsUuids=false;
      for (int i=0; i < urlParts.length; i++) {
        request.setAttribute(urlParts[i],i);
        matcher.reset(urlParts[i]);
        requestUriContainsUuids|=matcher.matches();
      }
      if (!requestUriContainsUuids) {
        comp=findComponent(request,path);
        if (comp != null) {
          request.setAttribute(comp.getUuid(),0);
          requestUriContainsUuids=true;
        }
      }
 else {
        AbstractNode n=(AbstractNode)Services.command(securityContext,GetNodeByIdCommand.class).execute(PathHelper.getName(path));
        if (n != null && n instanceof Component) {
          comp=(Component)n;
        }
      }
      request.setAttribute(Component.REQUEST_CONTAINS_UUID_IDENTIFIER,requestUriContainsUuids);
    }
    edit=false;
    if (request.getParameter("edit") != null) {
      edit=true;
    }
    if (page == null && file == null) {
      if (comp != null) {
        request.removeAttribute(POSSIBLE_ENTRY_POINTS);
        page=findPage(request,PathHelper.clean(StringUtils.substringBeforeLast(path,PathHelper.PATH_SEP)));
      }
    }
    AbstractNode node=file != null ? file : page != null ? page : null;
    if (edit || dontCache) {
      response.setHeader("Pragma","no-cache");
    }
 else {
      if (node != null) {
        lastModified=node.getLastModifiedDate();
      }
    }
    if ((page != null) && securityContext.isVisible(page)) {
      request.getSession().setAttribute(LAST_GET_URL,request.getPathInfo());
      PrintWriter out=response.getWriter();
      String uuid=page.getStringProperty(AbstractNode.Key.uuid);
      final StringBuilder buffer=new StringBuilder(8192);
      List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
      Map<String,String[]> parameterMap=request.getParameterMap();
      if ((parameterMap != null) && (parameterMap.size() > 0)) {
        attrs=convertToNodeAttributes(parameterMap);
      }
      double setup=System.nanoTime();
      logger.log(Level.INFO,"Setup time: {0} seconds",decimalFormat.format((setup - start) / 1000000000.0));
      if (!edit && !dontCache && setCachingHeader(request,response,node)) {
        out.flush();
        out.close();
      }
 else {
        getContent(securityContext,uuid,null,buffer,page,page,0,false,searchFor,attrs,null,null);
        String content=buffer.toString();
        double end=System.nanoTime();
        logger.log(Level.INFO,"Content for path {0} in {1} seconds",new Object[]{path,decimalFormat.format((end - setup) / 1000000000.0)});
        String contentType=page.getStringProperty(Page.UiKey.contentType);
        if (contentType != null) {
          if (contentType.equals("text/html")) {
            contentType=contentType.concat(";charset=UTF-8");
          }
          response.setContentType(contentType);
        }
 else {
          response.setContentType("text/html;charset=UTF-8");
        }
        out.append("<!DOCTYPE html>\n");
        HttpAuthenticator.writeContent(content,response);
      }
    }
 else     if ((file != null) && securityContext.isVisible(file)) {
      OutputStream out=response.getOutputStream();
      if (!edit && setCachingHeader(request,response,node)) {
        out.flush();
        out.close();
      }
 else {
        InputStream in=file.getInputStream();
        String contentType=file.getContentType();
        if (contentType != null) {
          response.setContentType(contentType);
        }
 else {
          response.setContentType("application/octet-stream");
        }
        IOUtils.copy(in,out);
        out.flush();
        out.close();
        response.setStatus(HttpServletResponse.SC_OK);
      }
    }
 else {
      if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
        try {
          HttpAuthenticator.writeUnauthorized(response);
        }
 catch (        IllegalStateException ise) {
          ;
        }
      }
 else {
        HttpAuthenticator.writeNotFound(response);
      }
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception while processing request",t);
    HttpAuthenticator.writeInternalServerError(response);
  }
}
