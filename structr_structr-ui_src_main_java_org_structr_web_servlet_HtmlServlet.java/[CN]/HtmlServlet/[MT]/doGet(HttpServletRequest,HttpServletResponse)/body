{
  String path=PathHelper.clean(request.getPathInfo());
  logger.log(Level.FINE,"Path info {0}",path);
  String[] urlParts=PathHelper.getParts(path);
  String searchFor=null;
  if (urlParts.length > 1) {
    searchFor=StringUtils.substringBefore(urlParts[1],"?");
  }
  String[] pathParts=PathHelper.getParts(path);
  if (pathParts == null && pathParts.length == 0) {
    logger.log(Level.WARNING,"Could not get path parts from path {0}",path);
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    return;
  }
  String name=PathHelper.getName(pathParts[0]);
  List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
  Map<String,String[]> parameterMap=request.getParameterMap();
  if ((parameterMap != null) && (parameterMap.size() > 0)) {
    attrs=convertToNodeAttributes(parameterMap);
  }
  edit=false;
  tidy=false;
  if (request.getParameter("edit") != null) {
    edit=true;
  }
  if (request.getParameter("tidy") != null) {
    tidy=true;
  }
  Matcher matcher=threadLocalUUIDMatcher.get();
  boolean requestUriContainsUuids=false;
  for (int i=1; i < pathParts.length; i++) {
    String[] parts=pathParts[i].split("[/]+");
    for (int j=0; j < parts.length; j++) {
      request.setAttribute(parts[j],j);
      matcher.reset(parts[j]);
      requestUriContainsUuids|=matcher.matches();
    }
  }
  request.setAttribute(Component.REQUEST_CONTAINS_UUID_IDENTIFIER,requestUriContainsUuids);
  try {
    SecurityContext securityContext=SecurityContext.getInstance(this.getServletConfig(),request,response,AccessMode.Frontend);
    request.setCharacterEncoding("UTF-8");
    DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
    double start=System.nanoTime();
    AbstractNode node=findEntryPoint(name);
    Page page=null;
    org.structr.core.entity.File file=null;
    if (node instanceof Page) {
      page=(Page)node;
    }
 else     if (node instanceof org.structr.core.entity.File) {
      file=(org.structr.core.entity.File)node;
    }
    if ((page != null) && securityContext.isVisible(page)) {
      String uuid=page.getStringProperty(AbstractNode.Key.uuid);
      final StringBuilder buffer=new StringBuilder(10000);
      getContent(request,uuid,null,buffer,page,page,0,false,searchFor,attrs,null,null);
      String content=buffer.toString();
      double end=System.nanoTime();
      logger.log(Level.INFO,"Content collected in {0} seconds",decimalFormat.format((end - start) / 1000000000.0));
      String contentType=page.getStringProperty(Page.UiKey.contentType);
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
        response.getWriter().append("<!DOCTYPE html>\n");
      }
      if (tidy) {
        StringWriter tidyOutput=new StringWriter();
        Tidy tidy=new Tidy();
        Properties tidyProps=new Properties();
        tidyProps.setProperty("indent","auto");
        tidy.getConfiguration().addProps(tidyProps);
        tidy.parse(new StringReader(content),tidyOutput);
        content=tidyOutput.toString();
      }
      HttpAuthenticator.writeContent(content,response);
    }
 else     if ((file != null) && securityContext.isVisible(file)) {
      InputStream in=file.getInputStream();
      OutputStream out=response.getOutputStream();
      String contentType=file.getContentType();
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
      }
      IOUtils.copy(in,out);
      out.flush();
      out.close();
      response.setStatus(HttpServletResponse.SC_OK);
    }
 else {
      if (response.getStatus() == HttpServletResponse.SC_UNAUTHORIZED) {
        HttpAuthenticator.writeUnauthorized(response);
      }
 else {
        HttpAuthenticator.writeNotFound(response);
      }
    }
  }
 catch (  Throwable t) {
    HttpAuthenticator.writeInternalServerError(response);
  }
}
