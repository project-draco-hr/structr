{
  SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  edit=false;
  tidy=false;
  if (request.getParameter("edit") != null) {
    edit=true;
  }
  if (request.getParameter("tidy") != null) {
    tidy=true;
  }
  try {
    request.setCharacterEncoding("UTF-8");
    DecimalFormat decimalFormat=new DecimalFormat("0.000000000",DecimalFormatSymbols.getInstance(Locale.ENGLISH));
    double start=System.nanoTime();
    Resource resource=null;
    org.structr.core.entity.File file=null;
    Image image=null;
    String path=request.getPathInfo();
    logger.log(Level.INFO,"Path info {0}",path);
    String name=path.substring(path.lastIndexOf("/") + 1);
    if (name.length() > 0) {
      logger.log(Level.FINE,"File name {0}",name);
      List<SearchAttribute> searchAttrs=new LinkedList<SearchAttribute>();
      searchAttrs.add(Search.andExactName(name));
      SearchAttributeGroup group=new SearchAttributeGroup(SearchOperator.AND);
      group.add(Search.orExactType(Resource.class.getSimpleName()));
      group.add(Search.orExactType(org.structr.core.entity.File.class.getSimpleName()));
      group.add(Search.orExactType(Image.class.getSimpleName()));
      searchAttrs.add(group);
      List<AbstractNode> results=(List<AbstractNode>)Services.command(SecurityContext.getSuperUserInstance(),SearchNodeCommand.class).execute(null,false,false,searchAttrs);
      logger.log(Level.FINE,"{0} results",results.size());
      if (!results.isEmpty()) {
        AbstractNode node=results.get(0);
        if (node instanceof Resource) {
          resource=(Resource)node;
        }
 else         if (node instanceof org.structr.core.entity.File) {
          file=(org.structr.core.entity.File)node;
        }
      }
    }
    if (resource != null) {
      String content=getContent(securityContext,resource);
      double end=System.nanoTime();
      logger.log(Level.INFO,"Content collected in {0} seconds",decimalFormat.format((end - start) / 1000000000.0));
      String contentType=resource.getContentType();
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
      }
      if (tidy) {
        StringWriter tidyOutput=new StringWriter();
        Tidy tidy=new Tidy();
        Properties tidyProps=new Properties();
        tidyProps.setProperty("indent","auto");
        tidy.getConfiguration().addProps(tidyProps);
        tidy.parse(new StringReader(content),tidyOutput);
        content=tidyOutput.toString();
      }
      response.getWriter().append("<!DOCTYPE html>\n").append(content);
      response.getWriter().flush();
      response.getWriter().close();
      response.setStatus(HttpServletResponse.SC_OK);
    }
 else     if (file != null) {
      InputStream in=file.getInputStream();
      OutputStream out=response.getOutputStream();
      String contentType=file.getContentType();
      if (contentType != null) {
        response.setContentType(contentType);
      }
 else {
        response.setContentType("text/html; charset=utf-8");
      }
      IOUtils.copy(in,out);
      out.flush();
      out.close();
      response.setStatus(HttpServletResponse.SC_OK);
    }
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,"Exception while processing request",t);
  }
}
