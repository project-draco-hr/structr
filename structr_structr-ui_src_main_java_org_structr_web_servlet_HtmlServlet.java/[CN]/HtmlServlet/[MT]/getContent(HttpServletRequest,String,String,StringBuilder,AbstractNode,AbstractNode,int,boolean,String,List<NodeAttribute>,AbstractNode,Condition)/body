{
  String localComponentId=componentId;
  String content=null;
  String tag=null;
  StringBuilder indent=new StringBuilder();
  for (int d=1; d < depth; d++) {
    indent.append("  ");
  }
  String ind=indent.toString();
  if (startNode != null) {
    String kind=startNode.getStringProperty(Component.UiKey.kind);
    String id=startNode.getStringProperty(AbstractNode.Key.uuid);
    tag=startNode.getStringProperty(Element.UiKey.tag);
    if ((kind != null) && kind.equals(EntityContext.normalizeEntityName(searchClass)) && (attrs != null)) {
      for (      NodeAttribute attr : attrs) {
        String key=attr.getKey();
        Object val=attr.getValue();
        if (!val.equals(startNode.getProperty(key))) {
          return;
        }
      }
    }
    if (startNode instanceof Content) {
      Content contentNode=(Content)startNode;
      content=contentNode.getPropertyWithVariableReplacement(page,pageId,componentId,viewComponent,Content.UiKey.content.name());
      String contentType=contentNode.getStringProperty(Content.UiKey.contentType);
      if (contentType != null) {
        Adapter<String,String> converter=contentConverters.get(contentType);
        if (converter != null) {
          try {
            content=converter.adapt(content);
          }
 catch (          FrameworkException fex) {
            logger.log(Level.WARNING,"Unable to convert content: {0}",fex.getMessage());
          }
        }
      }
      if (((contentType == null) || contentType.equals("text/plain")) && (content != null) && !content.isEmpty()) {
        content=content.replaceAll("[\\n]{1}","<br>\n");
      }
    }
    if (startNode instanceof Component) {
      localComponentId=startNode.getStringProperty(AbstractNode.Key.uuid);
    }
    if (edit && inBody && (startNode instanceof Content)) {
      tag="span";
    }
    if (StringUtils.isNotBlank(tag) && (startNode instanceof HtmlElement)) {
      if (tag.equals("body")) {
        inBody=true;
      }
      buffer.append(ind).append("<").append(tag);
      if (edit && (id != null)) {
        if (depth == 1) {
          buffer.append(" structr_page_id='").append(pageId).append("'");
        }
        if (!(startNode instanceof Content)) {
          buffer.append(" structr_element_id=\"").append(id).append("\"");
          buffer.append(" structr_type=\"").append(startNode.getType()).append("\"");
          buffer.append(" structr_name=\"").append(startNode.getName()).append("\"");
        }
 else {
          buffer.append(" structr_content_id=\"").append(id).append("\"");
        }
      }
      HtmlElement htmlElement=(HtmlElement)startNode;
      for (      String attribute : EntityContext.getPropertySet(startNode.getClass(),PropertyView.Html)) {
        try {
          String value=htmlElement.getPropertyWithVariableReplacement(page,pageId,localComponentId,viewComponent,attribute);
          if ((value != null) && StringUtils.isNotBlank(value)) {
            String key=attribute.substring(PropertyView.Html.length());
            buffer.append(" ").append(key).append("=\"").append(value).append("\"");
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
        }
      }
      buffer.append(">\n");
    }
    if (content != null) {
      buffer.append(ind).append(content).append("\n");
    }
  }
  if (startNode instanceof View) {
    List<GraphObject> components=((View)startNode).getGraphObjects(request);
    for (    GraphObject component : components) {
      List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,pageId,localComponentId);
      for (      AbstractRelationship rel : rels) {
        if ((condition == null) || ((condition != null) && condition.isSatisfied(request,rel))) {
          AbstractNode subNode=rel.getEndNode();
          getContent(request,pageId,localComponentId,buffer,page,subNode,depth,inBody,searchClass,attrs,(AbstractNode)component,condition);
        }
      }
    }
  }
 else   if (startNode instanceof Condition) {
    List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,pageId,localComponentId);
    Condition newCondition=(Condition)startNode;
    for (    AbstractRelationship rel : rels) {
      AbstractNode subNode=rel.getEndNode();
      getContent(request,pageId,localComponentId,buffer,page,subNode,depth + 1,inBody,searchClass,attrs,viewComponent,newCondition);
    }
  }
 else {
    List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,pageId,localComponentId);
    for (    AbstractRelationship rel : rels) {
      if ((condition == null) || ((condition != null) && condition.isSatisfied(request,rel))) {
        AbstractNode subNode=rel.getEndNode();
        getContent(request,pageId,localComponentId,buffer,page,subNode,depth + 1,inBody,searchClass,attrs,viewComponent,condition);
      }
    }
  }
  if (StringUtils.isNotBlank(tag) && (startNode instanceof HtmlElement) && !((HtmlElement)startNode).isVoidElement()) {
    buffer.append(ind).append("</").append(tag).append(">\n");
  }
}
