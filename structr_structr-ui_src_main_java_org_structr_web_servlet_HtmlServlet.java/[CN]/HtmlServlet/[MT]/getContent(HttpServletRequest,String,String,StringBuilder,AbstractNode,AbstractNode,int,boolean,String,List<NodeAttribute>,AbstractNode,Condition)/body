{
  String localComponentId=componentId;
  String content=null;
  String tag=null;
  if (startNode != null) {
    String structrClass=startNode.getStringProperty(Component.UiKey.structrclass);
    if ((structrClass != null) && structrClass.equals(EntityContext.normalizeEntityName(searchClass)) && (attrs != null)) {
      for (      NodeAttribute attr : attrs) {
        String key=attr.getKey();
        Object val=attr.getValue();
        if (!val.equals(startNode.getProperty(key))) {
          return;
        }
      }
    }
    String id=startNode.getStringProperty("uuid");
    for (int d=0; d < depth; d++) {
      System.out.print(" ");
    }
    if (startNode instanceof Content) {
      content=(((Content)startNode).getPropertyWithVariableReplacement(resource,resourceId,componentId,viewComponent,Content.UiKey.content.name()));
    }
    if (startNode instanceof Component) {
      localComponentId=startNode.getStringProperty(AbstractNode.Key.uuid);
    }
    tag=startNode.getStringProperty("tag");
    if (edit && inBody && (startNode instanceof Content)) {
      tag="span";
    }
    if (StringUtils.isNotBlank(tag)) {
      if (tag.equals("body")) {
        inBody=true;
      }
      buffer.append("<").append(tag);
      if (edit && (id != null)) {
        if (depth == 1) {
          buffer.append(" structr_resource_id='").append(resourceId).append("'");
        }
        if (!(startNode instanceof Content)) {
          buffer.append(" structr_element_id=\"").append(id).append("\"");
          buffer.append(" structr_type=\"").append(startNode.getType()).append("\"");
          buffer.append(" structr_name=\"").append(startNode.getName()).append("\"");
        }
 else {
          buffer.append(" structr_content_id=\"").append(id).append("\"");
        }
      }
      if (startNode instanceof HtmlElement) {
        HtmlElement htmlElement=(HtmlElement)startNode;
        for (        String attribute : EntityContext.getPropertySet(startNode.getClass(),PropertyView.Html)) {
          try {
            String value=htmlElement.getPropertyWithVariableReplacement(resource,resourceId,localComponentId,viewComponent,attribute);
            if ((value != null) && StringUtils.isNotBlank(value)) {
              String key=attribute.substring(PropertyView.Html.length());
              buffer.append(" ").append(key).append("=\"").append(value).append("\"");
            }
          }
 catch (          Throwable t) {
            t.printStackTrace();
          }
        }
      }
      buffer.append(">");
    }
    if (content != null) {
      buffer.append(content);
    }
  }
  if (startNode instanceof View) {
    List<GraphObject> components=((View)startNode).getComponents();
    for (    GraphObject component : components) {
      List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,resourceId,localComponentId);
      for (      AbstractRelationship rel : rels) {
        if ((condition == null) || ((condition != null) && condition.isSatisfied(request,rel))) {
          AbstractNode subNode=rel.getEndNode();
          getContent(request,resourceId,localComponentId,buffer,resource,subNode,depth + 1,inBody,searchClass,attrs,(AbstractNode)component,condition);
        }
      }
    }
  }
 else   if (startNode instanceof Condition) {
    List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,resourceId,localComponentId);
    Condition newCondition=(Condition)startNode;
    for (    AbstractRelationship rel : rels) {
      AbstractNode subNode=rel.getEndNode();
      getContent(request,resourceId,localComponentId,buffer,resource,subNode,depth + 1,inBody,searchClass,attrs,viewComponent,newCondition);
    }
  }
 else {
    List<AbstractRelationship> rels=Component.getChildRelationships(request,startNode,resourceId,localComponentId);
    for (    AbstractRelationship rel : rels) {
      if ((condition == null) || ((condition != null) && condition.isSatisfied(request,rel))) {
        AbstractNode subNode=rel.getEndNode();
        getContent(request,resourceId,localComponentId,buffer,resource,subNode,depth + 1,inBody,searchClass,attrs,viewComponent,condition);
      }
    }
  }
  if (StringUtils.isNotBlank(tag) && !(ArrayUtils.contains(html5VoidTags,tag))) {
    buffer.append("</").append(tag).append(">");
  }
}
