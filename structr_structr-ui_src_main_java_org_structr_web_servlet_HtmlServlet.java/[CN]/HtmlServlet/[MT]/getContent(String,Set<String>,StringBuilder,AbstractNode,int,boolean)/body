{
  String componentId=null;
  String content=null;
  String tag=null;
  AbstractRelationship link=null;
  if (node != null) {
    String id=node.getStringProperty("uuid");
    if (node instanceof Content) {
      content=node.getStringProperty("content");
      List<AbstractRelationship> links=node.getOutgoingLinkRelationships();
      if ((links != null) && !links.isEmpty()) {
        link=links.get(0);
      }
    }
    if (node instanceof Component) {
      componentId=node.getStringProperty(AbstractNode.Key.uuid);
      componentIds.add(componentId);
    }
    if (link != null) {
      buffer.append("<a href=\"").append(link.getEndNode().getName()).append("\">");
    }
    tag=node.getStringProperty("tag");
    if (edit && inBody && (node instanceof Content)) {
      buffer.delete(buffer.length() - 1,buffer.length());
      buffer.append(" structr_content_id=\"").append(id).append("\">");
    }
    if (StringUtils.isNotBlank(tag)) {
      if (tag.equals("body")) {
        inBody=true;
      }
      buffer.append("<").append(tag);
      if (edit && (id != null)) {
        if (depth == 1) {
          buffer.append(" structr_resource_id='").append(resourceId).append("'");
        }
        if (node instanceof Content) {
        }
 else {
          String htmlClass=node.getStringProperty("_html_class");
          buffer.append(" class=\"structr-element-container ").append((htmlClass != null) ? htmlClass : "").append("\" structr_element_id='").append(id).append("'");
          buffer.append(" structr_type='").append(node.getType()).append("'");
          buffer.append(" structr_name='").append(node.getName()).append("'");
        }
      }
      if (node instanceof HtmlElement) {
        for (        String attribute : EntityContext.getPropertySet(node.getClass(),PropertyView.Html)) {
          if (node.getProperty(attribute) != null) {
            String key=attribute.substring(PropertyView.Html.length());
            buffer.append(" ").append(key).append("=\"").append(node.getProperty(attribute)).append("\"");
          }
        }
      }
      buffer.append(">");
    }
    if (content != null) {
      buffer.append(content);
    }
  }
  List<AbstractRelationship> rels=new LinkedList<AbstractRelationship>();
  for (  AbstractRelationship abstractRelationship : node.getOutgoingRelationships(RelType.CONTAINS)) {
    Relationship rel=abstractRelationship.getRelationship();
    boolean hasComponentId=rel.hasProperty("componentId");
    if (rel.hasProperty(resourceId) || rel.hasProperty("*") || !componentIds.isEmpty()) {
      if (!hasComponentId || (hasComponentId && componentIds.contains((String)rel.getProperty("componentId")))) {
        rels.add(abstractRelationship);
      }
    }
  }
  Collections.sort(rels,new Comparator<AbstractRelationship>(){
    @Override public int compare(    AbstractRelationship o1,    AbstractRelationship o2){
      Integer pos1=getPosition(o1,resourceId);
      Integer pos2=getPosition(o2,resourceId);
      return pos1.compareTo(pos2);
    }
  }
);
  for (  AbstractRelationship rel : rels) {
    AbstractNode subNode=rel.getEndNode();
    getContent(resourceId,componentIds,buffer,subNode,depth + 1,inBody);
  }
  if (StringUtils.isNotBlank(tag) && !(ArrayUtils.contains(html5VoidTags,tag))) {
    buffer.append("</").append(tag).append(">");
  }
  if (link != null) {
    buffer.append("</a>");
  }
  if (componentId != null) {
    componentIds.remove(componentId);
  }
}
