{
  boolean notModified=false;
  DateFormat httpDateFormat=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z",Locale.US);
  Calendar cal=new GregorianCalendar();
  Integer seconds=node.getIntProperty(Page.cacheForSeconds);
  if (seconds != null) {
    cal.add(Calendar.SECOND,seconds);
    response.addHeader("Cache-Control","public, max-age=" + seconds + ", s-maxage="+ seconds+ ", must-revalidate, proxy-revalidate");
    httpDateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
    response.addHeader("Expires",httpDateFormat.format(cal.getTime()));
  }
 else {
    response.addHeader("Cache-Control","public, must-revalidate, proxy-revalidate");
  }
  if (lastModified != null) {
    response.addHeader("Last-Modified",httpDateFormat.format(lastModified));
    String ifModifiedSince=request.getHeader("If-Modified-Since");
    if (StringUtils.isNotBlank(ifModifiedSince)) {
      try {
        Date ifModSince=httpDateFormat.parse(ifModifiedSince);
        if ((ifModSince != null) && (lastModified.equals(ifModSince) || lastModified.before(ifModSince))) {
          notModified=true;
          response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
        }
      }
 catch (      ParseException ex) {
        logger.log(Level.WARNING,"Could not parse If-Modified-Since header",ex);
      }
    }
  }
  return notModified;
}
