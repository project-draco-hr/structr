{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  String nodeToAddId=(String)nodeData.get("id");
  String childContent=(String)nodeData.get("childContent");
  final Map<String,Object> relData=webSocketData.getRelData();
  String parentId=webSocketData.getId();
  boolean newNodeCreated=false;
  if (parentId != null) {
    AbstractNode nodeToAdd=null;
    AbstractNode parentNode=getNode(parentId);
    if (nodeToAddId != null) {
      nodeToAdd=getNode(nodeToAddId);
    }
 else {
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          return Services.command(securityContext,CreateNodeCommand.class).execute(nodeData);
        }
      }
;
      try {
        nodeToAdd=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
        newNodeCreated=true;
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Could not create node.",fex);
        getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
      }
    }
    if ((nodeToAdd != null) && (parentNode != null)) {
      String originalPageId=(String)nodeData.get("sourcePageId");
      String newPageId=(String)nodeData.get("targetPageId");
      RelationClass rel=EntityContext.getRelationClass(parentNode.getClass(),nodeToAdd.getClass());
      if (rel != null) {
        try {
          boolean addedPageIdProperty=false;
          for (          AbstractRelationship r : parentNode.getOutgoingRelationships(RelType.CONTAINS)) {
            if (r.getEndNode().equals(nodeToAdd) && r.getLongProperty(originalPageId) != null) {
              r.setProperty(newPageId,Long.parseLong((String)relData.get(newPageId)));
              addedPageIdProperty=true;
              break;
            }
          }
          if (!addedPageIdProperty) {
            rel.createRelationship(securityContext,parentNode,nodeToAdd,relData);
          }
          if ((originalPageId != null) && (newPageId != null) && !originalPageId.equals(newPageId)) {
            RelationshipHelper.tagOutgoingRelsWithPageId(nodeToAdd,nodeToAdd,originalPageId,newPageId);
          }
        }
 catch (        Throwable t) {
          getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
        }
      }
      if (childContent != null) {
        Content contentNode=null;
        final List<NodeAttribute> attrs=new LinkedList<NodeAttribute>();
        attrs.add(new NodeAttribute(Content.UiKey.content,childContent));
        attrs.add(new NodeAttribute(Content.UiKey.contentType,"text/plain"));
        attrs.add(new NodeAttribute(AbstractNode.Key.type,Content.class.getSimpleName()));
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws FrameworkException {
            return Services.command(securityContext,CreateNodeCommand.class).execute(attrs);
          }
        }
;
        try {
          contentNode=(Content)Services.command(securityContext,TransactionCommand.class).execute(transaction);
        }
 catch (        FrameworkException fex) {
          logger.log(Level.WARNING,"Could not create content child node.",fex);
          getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
        }
        if (contentNode != null) {
          try {
            relData.put(newPageId,0L);
            rel.createRelationship(securityContext,nodeToAdd,contentNode,relData);
            if ((originalPageId != null) && (newPageId != null) && !originalPageId.equals(newPageId)) {
              RelationshipHelper.tagOutgoingRelsWithPageId(contentNode,contentNode,originalPageId,newPageId);
            }
          }
 catch (          Throwable t) {
            getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
          }
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
