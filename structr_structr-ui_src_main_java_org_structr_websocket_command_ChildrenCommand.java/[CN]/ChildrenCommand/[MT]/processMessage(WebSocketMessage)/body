{
  AbstractNode node=getNode(webSocketData.getId());
  if (node == null) {
    return;
  }
  String pageId=(String)webSocketData.getNodeData().get("pageId");
  String componentId=(String)webSocketData.getNodeData().get("componentId");
  List<AbstractRelationship> rels=node.getOutgoingRelationships(RelType.CONTAINS);
  Map<Long,GraphObject> sortMap=new TreeMap<Long,GraphObject>();
  Set<String> nodesWithChildren=new HashSet<String>();
  List<GraphObject> result=new LinkedList<GraphObject>();
  PropertyKey<Long> pageIdProperty=new LongProperty(pageId);
  for (  AbstractRelationship rel : rels) {
    AbstractNode endNode=rel.getEndNode();
    if (endNode == null) {
      continue;
    }
    if ((node instanceof Group) || (node instanceof Folder)) {
      result.add(endNode);
      nodesWithChildren.addAll(RelationshipHelper.getChildrenInPage(endNode,null));
      continue;
    }
    if (pageId == null) {
      return;
    }
    Long pos=null;
    if (rel.getLongProperty(pageIdProperty) != null) {
      pos=rel.getLongProperty(pageIdProperty);
    }
 else {
      pos=rel.getLongProperty(new LongProperty("*"));
    }
    String relCompId=rel.getProperty(Component.componentId);
    boolean isComponentOrContent=((endNode instanceof Component) || (endNode instanceof Content));
    if (pos == null || (isComponentOrContent && relCompId != null && !relCompId.equals(componentId))) {
      continue;
    }
    nodesWithChildren.addAll(RelationshipHelper.getChildrenInPage(endNode,pageId));
    sortMap.put(pos,endNode);
  }
  if (!sortMap.isEmpty()) {
    result=new ArrayList<GraphObject>(sortMap.values());
  }
  webSocketData.setView(PropertyView.Ui);
  webSocketData.setResult(result);
  webSocketData.setNodesWithChildren(nodesWithChildren);
  getWebSocket().send(webSocketData,true);
}
