{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String nodeId=webSocketData.getId();
  final AbstractNode nodeToClone=getNode(nodeId);
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  final String newName;
  if (nodeData.containsKey(AbstractNode.name.dbName())) {
    newName=(String)nodeData.get(AbstractNode.name.dbName());
  }
 else {
    newName="unknown";
  }
  if (nodeToClone != null) {
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        Page newPage=(Page)Services.command(securityContext,CreateNodeCommand.class).execute(new NodeAttribute(AbstractNode.type,Page.class.getSimpleName()),new NodeAttribute(AbstractNode.name,newName),new NodeAttribute(AbstractNode.visibleToAuthenticatedUsers,true));
        if (newPage != null) {
          String pageId=newPage.getProperty(AbstractNode.uuid);
          List<AbstractRelationship> relsOut=nodeToClone.getOutgoingRelationships(RelType.CONTAINS);
          String originalPageId=nodeToClone.getProperty(AbstractNode.uuid);
          Html htmlNode=null;
          for (          AbstractRelationship out : relsOut) {
            AbstractNode endNode=out.getEndNode();
            if (endNode.getType().equals(Html.class.getSimpleName())) {
              htmlNode=(Html)endNode;
              break;
            }
          }
          if (htmlNode != null) {
            RelationClass rel=EntityContext.getRelationClass(newPage.getClass(),htmlNode.getClass());
            if (rel != null) {
              PropertyMap relProps=new PropertyMap();
              relProps.put(new LongProperty(pageId),0);
              try {
                rel.createRelationship(securityContext,newPage,htmlNode,relProps);
              }
 catch (              Throwable t) {
                getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
              }
              RelationshipHelper.tagOutgoingRelsWithPageId(newPage,newPage,originalPageId,pageId);
            }
          }
        }
 else {
          getWebSocket().send(MessageBuilder.status().code(404).build(),true);
        }
        return null;
      }
    }
;
    try {
      Services.command(securityContext,TransactionCommand.class).execute(transaction);
    }
 catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Could not create node.",fex);
      getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
    }
  }
 else {
    logger.log(Level.WARNING,"Node with uuid {0} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
