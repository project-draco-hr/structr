{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Command createNode=Services.command(securityContext,CreateNodeCommand.class);
  final Command createRel=Services.command(securityContext,CreateRelationshipCommand.class);
  StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      Map<String,Object> nodeData=webSocketData.getNodeData();
      nodeData.put(AbstractNode.Key.visibleToAuthenticatedUsers.name(),true);
      nodeData.put(AbstractNode.Key.type.name(),Page.class.getSimpleName());
      Map<String,Object> relData=new HashMap<String,Object>();
      AbstractNode page=(AbstractNode)createNode.execute(nodeData);
      String pageId=page.getUuid();
      relData.put(pageId,0);
      nodeData.put(AbstractNode.Key.type.name(),Html.class.getSimpleName());
      nodeData.put(HtmlElement.UiKey.name.name(),"html");
      nodeData.put(HtmlElement.UiKey.tag.name(),"html");
      AbstractNode html=(AbstractNode)createNode.execute(nodeData);
      createRel.execute(page,html,RelType.CONTAINS,relData,false);
      nodeData.put(AbstractNode.Key.type.name(),Head.class.getSimpleName());
      nodeData.put(HtmlElement.UiKey.name.name(),"head");
      nodeData.put(HtmlElement.UiKey.tag.name(),"head");
      AbstractNode head=(AbstractNode)createNode.execute(nodeData);
      createRel.execute(html,head,RelType.CONTAINS,relData,false);
      nodeData.put(AbstractNode.Key.type.name(),Body.class.getSimpleName());
      nodeData.put(HtmlElement.UiKey.name.name(),"body");
      nodeData.put(HtmlElement.UiKey.tag.name(),"body");
      AbstractNode body=(AbstractNode)createNode.execute(nodeData);
      relData.put(pageId,1);
      createRel.execute(html,body,RelType.CONTAINS,relData,false);
      relData.put(pageId,0);
      nodeData.put(AbstractNode.Key.type.name(),Title.class.getSimpleName());
      nodeData.put(HtmlElement.UiKey.name.name(),"title");
      nodeData.put(HtmlElement.UiKey.tag.name(),"title");
      AbstractNode title=(AbstractNode)createNode.execute(nodeData);
      createRel.execute(head,title,RelType.CONTAINS,relData,false);
      nodeData.put(AbstractNode.Key.type.name(),Content.class.getSimpleName());
      nodeData.put(Content.UiKey.content.name(),"New Page");
      AbstractNode content=(AbstractNode)createNode.execute(nodeData);
      relData.put(pageId,0);
      createRel.execute(title,content,RelType.CONTAINS,relData,false);
      return page;
    }
  }
;
  try {
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Could not create node.",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
