{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  Map<String,Object> properties=webSocketData.getData();
  final String address=(String)properties.get("address");
  final String name=(String)properties.get("name");
  final int timeout=Integer.parseInt((String)properties.get("timeout"));
  StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      Importer pageImporter=new Importer(securityContext,address,name,timeout);
      boolean parseOk=pageImporter.parse();
      if (parseOk) {
        logger.log(Level.INFO,"Sucessfully parsed {0}",address);
        getWebSocket().send(MessageBuilder.status().code(200).message("Sucessfully parsed address " + address).build(),true);
        String resourceId=pageImporter.readResource();
        Map<String,Object> resultData=new HashMap<String,Object>();
        if (resourceId != null) {
          resultData.put("id",resourceId);
          getWebSocket().send(MessageBuilder.status().code(200).message("Sucessfully created resource " + name).data(resultData).build(),true);
        }
 else {
          getWebSocket().send(MessageBuilder.status().code(400).message("Error while creating resource " + name).data(resultData).build(),true);
        }
      }
      return null;
    }
  }
;
  try {
    Services.command(securityContext,TransactionCommand.class).execute(transaction);
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Error while importing content",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
