{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String type=(String)webSocketData.getNodeData().get("type");
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  Set<String> nodesWithChildren=new HashSet<String>();
  searchAttributes.add(Search.andExactType(CaseHelper.toUpperCamelCase(type)));
  AbstractNode topNode=null;
  boolean includeDeletedAndHidden=false;
  boolean publicOnly=false;
  try {
    Result result=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(topNode,includeDeletedAndHidden,publicOnly,searchAttributes);
    List<? extends GraphObject> resultList=result.getResults();
    if (webSocketData.getSortKey() != null) {
      final String sortOrder=webSocketData.getSortOrder();
      final String sortKey=webSocketData.getSortKey();
      Comparator<GraphObject> comparator=null;
      try {
        if ("desc".equalsIgnoreCase(sortOrder)) {
          comparator=new Comparator<GraphObject>(){
            @Override public int compare(            GraphObject n1,            GraphObject n2){
              Comparable c1=(Comparable)n1.getProperty(sortKey);
              Comparable c2=(Comparable)n2.getProperty(sortKey);
              return (c2.compareTo(c1));
            }
          }
;
        }
 else {
          comparator=new Comparator<GraphObject>(){
            @Override public int compare(            GraphObject n1,            GraphObject n2){
              Comparable c1=(Comparable)n1.getProperty(sortKey);
              Comparable c2=(Comparable)n2.getProperty(sortKey);
              return (c1.compareTo(c2));
            }
          }
;
        }
        if (comparator != null) {
          Collections.sort(resultList,comparator);
        }
      }
 catch (      Throwable t) {
      }
    }
    for (    GraphObject obj : resultList) {
      if (obj instanceof AbstractNode) {
        AbstractNode node=(AbstractNode)obj;
        if (RelationshipHelper.hasChildren(node,node.getUuid())) {
          nodesWithChildren.add(node.getUuid());
        }
      }
    }
    webSocketData.setNodesWithChildren(nodesWithChildren);
    if (webSocketData.getPageSize() > 0) {
      int pageSize=webSocketData.getPageSize();
      int page=webSocketData.getPage();
      int resultCount=result.size();
      int fromIndex=Math.min(resultCount,Math.max(0,(page - 1) * pageSize));
      int toIndex=Math.min(resultCount,page * pageSize);
      webSocketData.setResult(resultList.subList(fromIndex,toIndex));
    }
 else {
      webSocketData.setResult(resultList);
    }
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
  }
}
