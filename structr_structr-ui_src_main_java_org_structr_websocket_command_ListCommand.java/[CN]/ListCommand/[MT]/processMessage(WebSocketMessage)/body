{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String rawType=(String)webSocketData.getNodeData().get("type");
  Class type=EntityContext.getEntityClassForRawType(rawType);
  List<SearchAttribute> searchAttributes=new LinkedList<SearchAttribute>();
  Set<String> nodesWithChildren=new HashSet<String>();
  searchAttributes.add(Search.andExactType(type.getSimpleName()));
  final String sortOrder=webSocketData.getSortOrder();
  final String sortKey=webSocketData.getSortKey();
  final int pageSize=webSocketData.getPageSize();
  final int page=webSocketData.getPage();
  PropertyKey sortProperty=EntityContext.getPropertyKeyForJSONName(type,sortKey);
  try {
    Result result=(Result)Services.command(securityContext,SearchNodeCommand.class).execute(true,false,searchAttributes,sortProperty,"desc".equals(sortOrder),pageSize,page);
    List<? extends GraphObject> resultList=result.getResults();
    webSocketData.setResult(resultList);
    webSocketData.setRawResultCount(result.getRawResultCount());
    getWebSocket().send(webSocketData,true);
  }
 catch (  FrameworkException fex) {
    fex.printStackTrace();
  }
}
