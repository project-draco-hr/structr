{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String id=webSocketData.getId();
  String parentId=(String)webSocketData.getNodeData().get("id");
  final String componentId=(String)webSocketData.getNodeData().get("componentId");
  final String pageId=(String)webSocketData.getNodeData().get("pageId");
  String position=(String)webSocketData.getNodeData().get("position");
  if ((id != null) && (parentId != null)) {
    final AbstractNode nodeToRemove=getNode(id);
    final AbstractNode parentNode=getNode(parentId);
    final Long pos=(position != null) ? Long.parseLong(position) : null;
    if ((nodeToRemove != null) && (parentNode != null)) {
      final List<AbstractRelationship> rels=parentNode.getRelationships(RelType.CONTAINS,Direction.OUTGOING);
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          String removedRelId=null;
          Command deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
          boolean hasPageId=true;
          List<AbstractRelationship> relsToReorder=new ArrayList<AbstractRelationship>();
          for (          AbstractRelationship rel : rels) {
            if (pageId == null || rel.getProperty(pageId) != null) {
              relsToReorder.add(rel);
            }
            if (rel.getEndNode().equals(nodeToRemove) && ((componentId == null) || componentId.equals(rel.getStringProperty("componentId"))) && ((pageId == null) || (rel.getProperty(pageId) != null))) {
              if (pos == null) {
                deleteRel.execute(rel);
              }
 else {
                if (pos.equals(rel.getLongProperty(pageId))) {
                  rel.removeProperty(pageId);
                  RelationshipHelper.untagOutgoingRelsFromPageId(nodeToRemove,nodeToRemove,pageId,pageId);
                  hasPageId=hasPageIds(securityContext,rel);
                  if (!hasPageId) {
                    relsToReorder.remove(rel);
                    deleteRel.execute(rel);
                    break;
                  }
                }
              }
            }
          }
          reorderRels(relsToReorder,pageId);
          return null;
        }
      }
;
      try {
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
      }
 catch (      FrameworkException fex) {
        getWebSocket().send(MessageBuilder.status().code(400).message(fex.getMessage()).build(),true);
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
