{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String id=webSocketData.getId();
  String parentId=(String)webSocketData.getNodeData().get("id");
  final String treeAddress=(String)webSocketData.getNodeData().get("treeAddress");
  final String pageId;
  String position;
  if (StringUtils.isNotBlank(treeAddress)) {
    pageId=treeAddress.substring(0,32);
    position=StringUtils.substringAfterLast(treeAddress,"_");
  }
 else {
    pageId=(String)webSocketData.getNodeData().get("pageId");
    position=(String)webSocketData.getNodeData().get("position");
  }
  if (id != null) {
    final AbstractNode nodeToRemove=getNode(id);
    final Long pos=(position != null) ? Long.parseLong(position) : null;
    if (nodeToRemove != null) {
      final List<AbstractRelationship> rels=nodeToRemove.getRelationships(RelType.CONTAINS,Direction.INCOMING);
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          Command deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
          boolean hasPageId;
          List<AbstractRelationship> relsToReorder=new ArrayList<AbstractRelationship>();
          for (          AbstractRelationship rel : rels) {
            if (pageId == null || rel.getProperty(pageId) != null) {
              if (rel.getEndNode().equals(nodeToRemove)) {
                relsToReorder.remove(rel);
                if (pos == null) {
                  deleteRel.execute(rel);
                }
 else {
                  if (pos.equals(rel.getLongProperty(pageId))) {
                    rel.removeProperty(pageId);
                    hasPageId=hasPageIds(securityContext,rel);
                    if (!hasPageId) {
                      deleteRel.execute(rel);
                      break;
                    }
                  }
                }
              }
 else {
                relsToReorder.add(rel);
              }
            }
          }
          RelationshipHelper.reorderRels(relsToReorder,pageId);
          return null;
        }
      }
;
      try {
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
      }
 catch (      FrameworkException fex) {
        getWebSocket().send(MessageBuilder.status().code(400).message(fex.getMessage()).build(),true);
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
