{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String nodeId=webSocketData.getId();
  final AbstractNode nodeToWrap=getNode(nodeId);
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  final Map<String,Object> relData=webSocketData.getRelData();
  final String resourceId=(String)relData.get("resourceId");
  final String parentId=(String)nodeData.get("parentId");
  final AbstractNode parentNode=getNode(parentId);
  final Long position=Long.parseLong((String)relData.get(resourceId));
  if (nodeToWrap != null) {
    StructrTransaction transaction=new StructrTransaction(){
      @Override public Object execute() throws FrameworkException {
        Component newComponent=(Component)Services.command(securityContext,CreateNodeCommand.class).execute(nodeData);
        RelationshipHelper.moveIncomingRelationships(securityContext,nodeToWrap,newComponent,resourceId,newComponent.getStringProperty(AbstractNode.Key.uuid),position);
        if ((parentNode != null) && (newComponent != null)) {
          RelationClass rel=EntityContext.getRelationClass(parentNode.getClass(),newComponent.getClass());
          if (rel != null) {
            Map<String,Object> relProps=new LinkedHashMap<String,Object>();
            relProps.put(resourceId,0);
            try {
              rel.createRelationship(securityContext,parentNode,newComponent,relProps);
            }
 catch (            Throwable t) {
              getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
            }
          }
        }
 else {
          getWebSocket().send(MessageBuilder.status().code(404).build(),true);
        }
        return null;
      }
    }
;
    try {
      Services.command(securityContext,TransactionCommand.class).execute(transaction);
    }
 catch (    FrameworkException fex) {
      logger.log(Level.WARNING,"Could not create node.",fex);
      getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
    }
  }
 else {
    logger.log(Level.WARNING,"Node with uuid {0} not found.",webSocketData.getId());
    getWebSocket().send(MessageBuilder.status().code(404).build(),true);
  }
}
