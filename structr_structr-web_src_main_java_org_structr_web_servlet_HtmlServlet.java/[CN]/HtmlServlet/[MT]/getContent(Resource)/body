{
  TraversalDescription localDesc=desc.expand(new ResourceExpander(resource.getIdString()));
  final StringBuilder headBuffer=new StringBuilder();
  final StringBuilder tailBuffer=new StringBuilder();
  localDesc=localDesc.evaluator(new Evaluator(){
    @Override public Evaluation evaluate(    Path path){
      Node node=path.endNode();
      try {
        if (node.hasProperty(AbstractNode.Key.type.name())) {
          String type=(String)node.getProperty(AbstractNode.Key.type.name());
          if (edit && "Content".equals(type)) {
            headBuffer.append("<div class=\"structr-editable-area data-structr-type-").append(type).append("\" id=\"structr-id-").append(node.getId()).append("\">");
          }
          Evaluation evaluation;
          if ("Content".equals(type)) {
            if (node.hasProperty(Content.Key.content.name())) {
              Object content=node.getProperty(Content.Key.content.name());
              if (content != null) {
                if (node.hasProperty("tag")) {
                  Object tag=node.getProperty("tag");
                  headBuffer.append("<").append(tag);
                  headBuffer.append(" id='").append(node.getProperty("id")).append("'");
                  headBuffer.append(">");
                  headBuffer.append(content);
                  headBuffer.append("</").append(tag).append(">");
                }
 else {
                  headBuffer.append(content);
                }
              }
            }
            evaluation=Evaluation.EXCLUDE_AND_PRUNE;
          }
 else {
            if (node.hasProperty("tag")) {
              Object tag=node.getProperty("tag");
              headBuffer.append("<").append(tag).append(">");
              tailBuffer.insert(0,">").insert(0,tag).insert(0,"</");
            }
            evaluation=Evaluation.EXCLUDE_AND_CONTINUE;
          }
          if (edit && "Content".equals(type)) {
            headBuffer.append("</div><!-- .structr-editable-area structr-type-").append(type).append("\" -->");
          }
          return evaluation;
        }
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"While evaluating path " + path,t);
      }
      return Evaluation.EXCLUDE_AND_CONTINUE;
    }
  }
);
  Iterable<Path> paths=localDesc.traverse(resource.getNode());
  for (  Path path : paths) {
    logger.log(Level.INFO,"Path: {0}",path.toString());
  }
  headBuffer.append(tailBuffer);
  return headBuffer.toString();
}
