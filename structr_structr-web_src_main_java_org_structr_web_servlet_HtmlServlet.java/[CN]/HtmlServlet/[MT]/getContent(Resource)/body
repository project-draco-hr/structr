{
  final StringBuilder builder=new StringBuilder();
  TraversalDescription localDesc=desc.expand(new ResourceExpander(resource.getIdString()));
  localDesc=localDesc.evaluator(new Evaluator(){
    @Override public Evaluation evaluate(    Path path){
      Node node=path.endNode();
      try {
        if (node.hasProperty(AbstractNode.Key.type.name())) {
          String type=(String)node.getProperty(AbstractNode.Key.type.name());
          if ("Content".equals(type)) {
            builder.append(node.getProperty(Content.Key.content.name()));
            return Evaluation.EXCLUDE_AND_PRUNE;
          }
 else {
            return Evaluation.EXCLUDE_AND_CONTINUE;
          }
        }
      }
 catch (      Throwable t) {
        logger.log(Level.SEVERE,"While evaluating path " + path,t);
      }
      return Evaluation.EXCLUDE_AND_CONTINUE;
    }
  }
);
  Iterable<Path> paths=localDesc.traverse(resource.getNode());
  for (  Path path : paths) {
    logger.log(Level.INFO,"Path: {0}",path.toString());
  }
  return builder.toString();
}
