{
  TraversalDescription localDesc=desc.expand(new ResourceExpander(resource.getStringProperty(AbstractNode.Key.uuid.name())));
  final StructrNodeFactory factory=new StructrNodeFactory(securityContext);
  final TreeNode root=new TreeNode(null);
  localDesc=localDesc.evaluator(new Evaluator(){
    TreeNode currentNode=root;
    @Override public Evaluation evaluate(    Path path){
      Node node=path.endNode();
      int nodeDepth=path.length();
      int currentTreeDepth=currentNode.depth();
      if (node.hasProperty(AbstractNode.Key.type.name())) {
        String type=(String)node.getProperty(AbstractNode.Key.type.name());
        TreeNode newTreeNode=new TreeNode(factory.createNode(securityContext,node,type));
        Relationship rel=path.lastRelationship();
        if (rel != null) {
          AbstractNode parentNode=factory.createNode(securityContext,rel.getStartNode());
          TreeNode parentTreeNode=root.getNode(parentNode);
          if (parentTreeNode == null) {
            parentTreeNode=new TreeNode(parentNode);
          }
          logger.log(Level.FINE,"New tree node: {0} --> {1}",new Object[]{newTreeNode.getData().getName(),((parentTreeNode.getData() != null) ? parentTreeNode.getData().getName() : "<no data>")});
          newTreeNode.setParent(parentTreeNode);
          if (nodeDepth > currentTreeDepth) {
            currentNode.addChild(newTreeNode);
            logger.log(Level.FINE,"Level down; {0} --> {1}",new Object[]{newTreeNode.getData().getName(),currentNode.getData().getName()});
            currentNode=newTreeNode;
          }
 else           if (nodeDepth < currentTreeDepth) {
            newTreeNode.setParent(parentTreeNode);
            logger.log(Level.FINE,"Level up; {1} --> {0}",new Object[]{((parentTreeNode.getData() != null) ? parentTreeNode.getData().getName() : "<no data>"),currentNode.getData().getName()});
            currentNode=newTreeNode;
          }
        }
 else {
          root.addChild(newTreeNode);
          logger.log(Level.FINE,"Added {0} to root",newTreeNode);
          currentNode=newTreeNode;
        }
        newTreeNode.depth(nodeDepth);
        return Evaluation.INCLUDE_AND_CONTINUE;
      }
 else {
        return Evaluation.EXCLUDE_AND_CONTINUE;
      }
    }
  }
);
  for (  Node node : localDesc.traverse(resource.getNode()).nodes()) {
    System.out.println(node.getProperty("type") + "[" + node.getProperty("uuid")+ "]: "+ node.getProperty("name"));
  }
  StringBuilder buffer=new StringBuilder(10000);
  printNodes(buffer,root,0);
  return buffer.toString();
}
