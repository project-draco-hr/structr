{
  messageStack=messageStackMap.get(transactionKey);
  AbstractRelationship relationship;
  if (graphObject instanceof AbstractRelationship) {
    relationship=(AbstractRelationship)graphObject;
    if (relationship.getRelType().equals(RelType.CONTAINS) || relationship.getRelType().equals(RelType.HAS_CHILD)) {
      AbstractNode startNode=relationship.getStartNode();
      AbstractNode endNode=relationship.getEndNode();
      WebSocketMessage message=new WebSocketMessage();
      message.setCommand("ADD");
      message.setGraphObject(relationship);
      message.setId(startNode.getStringProperty("uuid"));
      message.setResult(Arrays.asList(new GraphObject[]{endNode}));
      messageStack.add(message);
      logger.log(Level.FINE,"Relationship created: {0}({1} -> {2}{3}",new Object[]{startNode.getId(),startNode.getStringProperty(AbstractNode.Key.uuid),endNode.getStringProperty(AbstractNode.Key.uuid)});
    }
    return false;
  }
 else {
    WebSocketMessage message=new WebSocketMessage();
    message.setCommand("CREATE");
    message.setGraphObject(graphObject);
    List<GraphObject> list=new LinkedList<GraphObject>();
    list.add(graphObject);
    message.setResult(list);
    messageStack.add(message);
    logger.log(Level.FINE,"Node created: {0}",((AbstractNode)graphObject).getStringProperty(AbstractNode.Key.uuid));
    return false;
  }
}
