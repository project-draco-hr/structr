{
  JsonObject root=new JsonObject();
  JsonObject jsonNodeData=new JsonObject();
  JsonObject jsonRelData=new JsonObject();
  JsonArray removedProperties=new JsonArray();
  JsonArray modifiedProperties=new JsonArray();
  if (src.getCommand() != null) {
    root.add("command",new JsonPrimitive(src.getCommand()));
  }
  if (src.getId() != null) {
    root.add("id",new JsonPrimitive(src.getId()));
  }
  if (src.getMessage() != null) {
    root.add("message",new JsonPrimitive(src.getMessage()));
  }
  if (src.getCode() != 0) {
    root.add("code",new JsonPrimitive(src.getCode()));
  }
  if (src.getToken() != null) {
    root.add("token",new JsonPrimitive(src.getToken()));
  }
  if (src.getCallback() != null) {
    root.add("callback",new JsonPrimitive(src.getCallback()));
  }
  if (src.getButton() != null) {
    root.add("button",new JsonPrimitive(src.getButton()));
  }
  if (src.getParent() != null) {
    root.add("parent",new JsonPrimitive(src.getParent()));
  }
  if (src.getView() != null) {
    root.add("view",new JsonPrimitive(src.getView()));
  }
  if (src.getSortKey() != null) {
    root.add("sort",new JsonPrimitive(src.getSortKey()));
  }
  if (src.getSortOrder() != null) {
    root.add("order",new JsonPrimitive(src.getSortOrder()));
  }
  if (src.getPageSize() > 0) {
    root.add("pageSize",new JsonPrimitive(src.getPageSize()));
  }
  if (src.getPage() > 0) {
    root.add("page",new JsonPrimitive(src.getPage()));
  }
  JsonArray nodesWithChildren=new JsonArray();
  Set<String> nwc=src.getNodesWithChildren();
  if ((nwc != null) && !src.getNodesWithChildren().isEmpty()) {
    for (    String nodeId : nwc) {
      nodesWithChildren.add(new JsonPrimitive(nodeId));
    }
    root.add("nodesWithChildren",nodesWithChildren);
  }
  root.add("sessionValid",new JsonPrimitive(src.isSessionValid()));
  if ((src.getGraphObject() != null)) {
    GraphObject graphObject=src.getGraphObject();
    if (!src.getModifiedProperties().isEmpty()) {
      for (      PropertyKey modifiedKey : src.getModifiedProperties()) {
        modifiedProperties.add(toJsonPrimitive(modifiedKey));
        Object newValue=graphObject.getProperty(modifiedKey);
        if (newValue != null) {
          if (graphObject instanceof AbstractNode) {
            src.getNodeData().put(modifiedKey.jsonName(),newValue);
          }
 else {
            src.getRelData().put(modifiedKey.jsonName(),newValue);
          }
        }
      }
      root.add("modifiedProperties",modifiedProperties);
    }
    if (!src.getRemovedProperties().isEmpty()) {
      for (      PropertyKey removedKey : src.getRemovedProperties()) {
        removedProperties.add(toJsonPrimitive(removedKey));
      }
      root.add("removedProperties",removedProperties);
    }
  }
  if (src.getNodeData() != null) {
    for (    Entry<String,Object> entry : src.getNodeData().entrySet()) {
      Object value=entry.getValue();
      String key=entry.getKey();
      if (value != null) {
        jsonNodeData.add(key,toJsonPrimitive(value));
      }
    }
    root.add("data",jsonNodeData);
  }
  if (src.getRelData() != null) {
    for (    Entry<String,Object> entry : src.getRelData().entrySet()) {
      Object value=entry.getValue();
      String key=entry.getKey();
      if (value != null) {
        jsonRelData.add(key,toJsonPrimitive(value));
      }
    }
    root.add("relData",jsonRelData);
  }
  if (src.getResult() != null) {
    if (src.getView() != null) {
      try {
        propertyView.set(null,src.getView());
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Unable to set property view",fex);
      }
    }
 else {
      try {
        propertyView.set(null,PropertyView.All);
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Unable to set property view",fex);
      }
    }
    JsonArray result=new JsonArray();
    for (    GraphObject obj : src.getResult()) {
      result.add(graphObjectSerializer.serialize(obj,GraphObject.class,context));
    }
    root.add("result",result);
  }
  if (src.getResultTree() != null) {
    TreeNode node=src.getResultTree();
    root.add("root",buildTree(node,context));
  }
  return root;
}
