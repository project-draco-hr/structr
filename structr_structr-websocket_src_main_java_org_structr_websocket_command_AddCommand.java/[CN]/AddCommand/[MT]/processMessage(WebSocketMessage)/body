{
  SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  String sourceId=webSocketData.getId();
  Map<String,Object> properties=webSocketData.getData();
  String targetId=(String)properties.get("id");
  properties.remove("id");
  if (sourceId != null) {
    AbstractNode sourceNode=getNode(sourceId);
    AbstractNode targetNode=null;
    if (targetId != null) {
      targetNode=getNode(targetId);
    }
 else {
      String type=(String)properties.get("type");
      properties.remove("type");
      String tag=(String)properties.get("tag");
      properties.remove("tag");
      String name=(String)properties.get("name");
      properties.remove("name");
      final Map<String,Object> props=new HashMap<String,Object>();
      props.put("tag",tag);
      props.put("type",type);
      props.put("name",name);
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          return Services.command(SecurityContext.getSuperUserInstance(),CreateNodeCommand.class).execute(props);
        }
      }
;
      try {
        targetNode=(AbstractNode)Services.command(SecurityContext.getSuperUserInstance(),TransactionCommand.class).execute(transaction);
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Could not create node.",fex);
        getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
      }
    }
    if ((sourceNode != null) && (targetNode != null)) {
      RelationClass rel=EntityContext.getDirectedRelationship(sourceNode.getClass(),targetNode.getClass());
      if (rel != null) {
        try {
          rel.createRelationship(securityContext,sourceNode,targetNode,properties);
        }
 catch (        Throwable t) {
          getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
