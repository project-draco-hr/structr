{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  final Map<String,Object> nodeData=webSocketData.getNodeData();
  String sourceId=(String)nodeData.get("id");
  final Map<String,Object> relData=webSocketData.getRelData();
  String targetId=webSocketData.getId();
  if (targetId != null) {
    AbstractNode sourceNode=null;
    AbstractNode targetNode=getNode(targetId);
    if (sourceId != null) {
      sourceNode=getNode(sourceId);
    }
 else {
      StructrTransaction transaction=new StructrTransaction(){
        @Override public Object execute() throws FrameworkException {
          return Services.command(securityContext,CreateNodeCommand.class).execute(nodeData);
        }
      }
;
      try {
        sourceNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
      }
 catch (      FrameworkException fex) {
        logger.log(Level.WARNING,"Could not create node.",fex);
        getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
      }
    }
    if ((sourceNode != null) && (targetNode != null)) {
      RelationClass rel=EntityContext.getRelationClass(sourceNode.getClass(),targetNode.getClass());
      if (rel != null) {
        try {
          rel.createRelationship(securityContext,sourceNode,targetNode,relData);
        }
 catch (        Throwable t) {
          getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
