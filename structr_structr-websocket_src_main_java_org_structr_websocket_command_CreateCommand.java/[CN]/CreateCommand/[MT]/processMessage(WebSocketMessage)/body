{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  StructrTransaction transaction=new StructrTransaction(){
    @Override public Object execute() throws FrameworkException {
      Map<String,Object> nodeData=webSocketData.getNodeData();
      nodeData.put(AbstractNode.visibleToAuthenticatedUsers.name(),true);
      PropertySet properties=PropertySet.convertFromInput(securityContext,nodeData);
      return Services.command(securityContext,CreateNodeCommand.class).execute(properties);
    }
  }
;
  try {
    AbstractNode newNode=(AbstractNode)Services.command(securityContext,TransactionCommand.class).execute(transaction);
    if (newNode instanceof File) {
      File fileNode=(File)newNode;
      String uuid=newNode.getProperty(AbstractNode.uuid);
      fileNode.setRelativeFilePath(File.getDirectoryPath(uuid) + "/" + uuid);
      getWebSocket().createFileUploadHandler((File)newNode);
    }
  }
 catch (  FrameworkException fex) {
    logger.log(Level.WARNING,"Could not create node.",fex);
    getWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(),true);
  }
}
