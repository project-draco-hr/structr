{
  SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  String sourceId=webSocketData.getId();
  Map<String,Object> properties=webSocketData.getData();
  String resourceId=(String)properties.get("resourceId");
  Integer startOffset=Integer.parseInt((String)properties.get("startOffset"));
  Integer endOffset=Integer.parseInt((String)properties.get("endOffset"));
  properties.remove("id");
  if ((sourceId != null) && (resourceId != null)) {
    AbstractNode sourceNode=getNode(sourceId);
    AbstractNode resourceNode=getNode(resourceId);
    AbstractNode firstNode;
    AbstractNode secondNode;
    AbstractNode thirdNode;
    if ((sourceNode != null) && (resourceNode != null)) {
      try {
        Command transactionCommand=Services.command(SecurityContext.getSuperUserInstance(),TransactionCommand.class);
        List<AbstractRelationship> relsIn=sourceNode.getIncomingRelationships();
        for (        AbstractRelationship relIn : relsIn) {
          if (relIn.getType().equals(RelType.CONTAINS.name())) {
            Map<String,Object> sourceRelationshipProperties=relIn.getProperties();
            for (            String resourceIdFromRel : sourceRelationshipProperties.keySet()) {
              final List<NodeAttribute> attrsFirstNode=new LinkedList<NodeAttribute>();
              attrsFirstNode.add(new NodeAttribute(AbstractNode.Key.type.name(),"Content"));
              attrsFirstNode.add(new NodeAttribute(AbstractNode.Key.name.name(),"First Node"));
              if (sourceNode.getType().equals("Content")) {
                String content=sourceNode.getStringProperty("content");
                attrsFirstNode.add(new NodeAttribute("content",content.substring(0,startOffset)));
              }
              StructrTransaction transaction=new StructrTransaction(){
                @Override public Object execute() throws FrameworkException {
                  return Services.command(SecurityContext.getSuperUserInstance(),CreateNodeCommand.class).execute(attrsFirstNode);
                }
              }
;
              firstNode=(AbstractNode)transactionCommand.execute(transaction);
              final List<NodeAttribute> attrsSecondNode=new LinkedList<NodeAttribute>();
              attrsSecondNode.add(new NodeAttribute(AbstractNode.Key.type.name(),"Content"));
              attrsSecondNode.add(new NodeAttribute(AbstractNode.Key.name.name(),"Second (Link) Node"));
              if (sourceNode.getType().equals("Content")) {
                String content=sourceNode.getStringProperty("content");
                attrsSecondNode.add(new NodeAttribute("content",content.substring(startOffset,endOffset)));
              }
              transaction=new StructrTransaction(){
                @Override public Object execute() throws FrameworkException {
                  return Services.command(SecurityContext.getSuperUserInstance(),CreateNodeCommand.class).execute(attrsSecondNode);
                }
              }
;
              secondNode=(AbstractNode)transactionCommand.execute(transaction);
              final List<NodeAttribute> attrsThirdNode=new LinkedList<NodeAttribute>();
              attrsThirdNode.add(new NodeAttribute(AbstractNode.Key.type.name(),"Content"));
              attrsThirdNode.add(new NodeAttribute(AbstractNode.Key.name.name(),"Third Node"));
              if (sourceNode.getType().equals("Content")) {
                String content=sourceNode.getStringProperty("content");
                attrsThirdNode.add(new NodeAttribute("content",content.substring(endOffset,content.length())));
              }
              transaction=new StructrTransaction(){
                @Override public Object execute() throws FrameworkException {
                  return Services.command(SecurityContext.getSuperUserInstance(),CreateNodeCommand.class).execute(attrsThirdNode);
                }
              }
;
              thirdNode=(AbstractNode)transactionCommand.execute(transaction);
              RelationClass rel=new RelationClass(null,RelType.CONTAINS,Direction.OUTGOING,Cardinality.ManyToMany,null,false);
              Map<String,Object> newRelationshipProperties=new HashMap<String,Object>();
              newRelationshipProperties.put(resourceIdFromRel,0);
              rel.createRelationship(securityContext,sourceNode,firstNode,newRelationshipProperties);
              newRelationshipProperties.put(resourceIdFromRel,1);
              rel.createRelationship(securityContext,sourceNode,secondNode,newRelationshipProperties);
              newRelationshipProperties.put(resourceIdFromRel,2);
              rel.createRelationship(securityContext,sourceNode,thirdNode,newRelationshipProperties);
              rel=new RelationClass(resourceNode.getType(),RelType.LINK,Direction.OUTGOING,Cardinality.ManyToMany,null,false);
              rel.createRelationship(securityContext,secondNode,resourceNode);
            }
          }
        }
        sourceNode.setType("Element");
        sourceNode.removeProperty("content");
      }
 catch (      Throwable t) {
        getWebSocket().send(MessageBuilder.status().code(400).message(t.getMessage()).build(),true);
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("The LINK command needs id and data.id!").build(),true);
  }
}
