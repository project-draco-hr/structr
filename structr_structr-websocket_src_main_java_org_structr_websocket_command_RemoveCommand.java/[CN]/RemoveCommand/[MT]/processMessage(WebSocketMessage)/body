{
  final SecurityContext securityContext=getWebSocket().getSecurityContext();
  String id=webSocketData.getId();
  String parentId=(String)webSocketData.getNodeData().get("id");
  final String componentId=(String)webSocketData.getNodeData().get("componentId");
  final String resourceId=(String)webSocketData.getNodeData().get("resourceId");
  String position=(String)webSocketData.getNodeData().get("position");
  if ((id != null) && (parentId != null)) {
    final AbstractNode nodeToRemove=getNode(id);
    final AbstractNode parentNode=getNode(parentId);
    final Long pos=(position != null) ? Long.parseLong(position) : null;
    if ((nodeToRemove != null) && (parentNode != null)) {
      RelationClass rel=EntityContext.getRelationClass(parentNode.getClass(),nodeToRemove.getClass());
      if (rel != null) {
        final List<AbstractRelationship> rels=parentNode.getRelationships(rel.getRelType(),rel.getDirection());
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws FrameworkException {
            Command deleteRel=Services.command(securityContext,DeleteRelationshipCommand.class);
            List<AbstractRelationship> relsToShift=new LinkedList<AbstractRelationship>();
            for (            AbstractRelationship rel : rels) {
              if (rel.getOtherNode(parentNode).equals(nodeToRemove) && ((componentId == null) || componentId.equals(rel.getStringProperty("componentId"))) && ((resourceId == null) || (rel.getProperty(resourceId) != null))) {
                relsToShift.add(rel);
                if (pos.equals(rel.getLongProperty(resourceId))) {
                  deleteRel.execute(rel);
                  relsToShift.remove(rel);
                  break;
                }
              }
            }
            if (pos != null) {
              moveUpRels(relsToShift,resourceId);
            }
            return null;
          }
        }
;
        try {
          Services.command(securityContext,TransactionCommand.class).execute(transaction);
        }
 catch (        FrameworkException fex) {
          getWebSocket().send(MessageBuilder.status().code(400).message(fex.getMessage()).build(),true);
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
