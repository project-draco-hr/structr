{
  final SecurityContext securityContext=SecurityContext.getSuperUserInstance();
  String sourceId=webSocketData.getId();
  String targetId=(String)webSocketData.getData().get("id");
  if ((sourceId != null) && (targetId != null)) {
    final AbstractNode sourceNode=getNode(sourceId);
    final AbstractNode targetNode=getNode(targetId);
    if ((sourceNode != null) && (targetNode != null)) {
      DirectedRelationship rel=EntityContext.getDirectedRelationship(sourceNode.getClass(),targetNode.getClass());
      if (rel != null) {
        final List<StructrRelationship> rels=sourceNode.getRelationships(rel.getRelType(),rel.getDirection());
        StructrTransaction transaction=new StructrTransaction(){
          @Override public Object execute() throws Throwable {
            for (            StructrRelationship rel : rels) {
              if (rel.getOtherNode(sourceNode).equals(targetNode)) {
                rel.delete(securityContext);
              }
            }
            return null;
          }
        }
;
        Services.command(securityContext,TransactionCommand.class).execute(transaction);
        if (transaction.getCause() != null) {
          getWebSocket().send(MessageBuilder.status().code(400).message(transaction.getCause().getMessage()).build(),true);
        }
      }
    }
 else {
      getWebSocket().send(MessageBuilder.status().code(404).build(),true);
    }
  }
 else {
    getWebSocket().send(MessageBuilder.status().code(400).message("Add needs id and data.id!").build(),true);
  }
}
